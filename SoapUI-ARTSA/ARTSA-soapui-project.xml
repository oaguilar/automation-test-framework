<?xml version="1.0" encoding="UTF-8"?>
<con:soapui-project activeEnvironment="Default" name="ARTSA" resourceRoot="" soapui-version="4.6.4" abortOnError="false" runType="SEQUENTIAL" xmlns:con="http://eviware.com/soapui/config"><con:settings/><con:interface xsi:type="con:RestService" wadlVersion="http://wadl.dev.java.net/2009/02" name="ARTSA- Account Manager" type="rest" basePath="/SaasCoreAccountManager/rest/" definitionUrl="C:\Users\tmemmott\Documents\SoapUI-Projects\wadl-files\AccountManager.wadl" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT"/><con:endpoints><con:endpoint>http://10.200.0.124:8080</con:endpoint></con:endpoints><con:resource name="account" path="account"><con:settings/><con:parameters/><con:resource name="{id}" path="{id}"><con:settings/><con:parameters><con:parameter><con:name>id</con:name><con:value>-1</con:value><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:int</con:type><con:default>-1</con:default></con:parameter></con:parameters><con:method name="GET - getAccount" method="GET"><con:settings/><con:parameters/><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" mediaType="application/json"><con:settings/><con:endpoint>http://10.200.0.124:8080</con:endpoint><con:parameters/></con:request></con:method><con:method name="PUT - updateWithPut" method="PUT"><con:settings/><con:parameters/><con:representation type="REQUEST" id=""><con:mediaType>application/json</con:mediaType><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" mediaType="application/json"><con:settings/><con:endpoint>http://10.200.0.124:8080</con:endpoint><con:parameters/></con:request></con:method><con:method name="DELETE - deleteAccount" method="DELETE"><con:settings/><con:parameters/><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" mediaType="application/json"><con:settings/><con:endpoint>http://10.200.0.124:8080</con:endpoint><con:parameters/></con:request></con:method></con:resource><con:resource name="/users/{account}" path="/users/{account}"><con:settings/><con:parameters><con:parameter><con:name>account</con:name><con:value xsi:nil="true"/><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:int</con:type><con:default xsi:nil="true"/></con:parameter></con:parameters><con:method name="GET - getAllUsersForAccount" method="GET"><con:settings/><con:parameters/><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" mediaType="application/json"><con:settings/><con:endpoint>http://10.200.0.124:8080</con:endpoint><con:parameters/></con:request></con:method></con:resource><con:resource name="unique" path="unique"><con:settings/><con:parameters/><con:method name="POST - accountIsUnique" method="POST"><con:settings/><con:parameters/><con:representation type="REQUEST" id=""><con:mediaType>application/json</con:mediaType><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>applicaton/json</con:mediaType><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" mediaType="application/json"><con:settings/><con:endpoint>http://10.200.0.124:8080</con:endpoint><con:parameters/></con:request></con:method></con:resource><con:resource name="brands" path="brands"><con:settings/><con:parameters/><con:method name="GET - getBrands" method="GET"><con:settings/><con:parameters/><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" mediaType="application/json"><con:settings/><con:endpoint>http://10.200.0.124:8080</con:endpoint><con:parameters/></con:request></con:method></con:resource><con:resource name="accountInfo" path="accountInfo"><con:settings/><con:parameters/><con:method name="GET - getAccountInfo" method="GET"><con:settings/><con:parameters/><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" mediaType="application/json"><con:settings/><con:endpoint>http://10.200.0.124:8080</con:endpoint><con:parameters/></con:request></con:method></con:resource><con:method name="POST - update" method="POST"><con:settings/><con:parameters/><con:representation type="REQUEST" id=""><con:mediaType>application/json</con:mediaType><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" mediaType="application/json" postQueryString="false" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://10.200.0.124:8080</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method><con:method name="GET - getAccounts" method="GET"><con:settings/><con:parameters/><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" mediaType="application/json"><con:settings/><con:endpoint>http://10.200.0.124:8080</con:endpoint><con:parameters/></con:request></con:method></con:resource><con:resource name="accountauth" path="accountauth"><con:settings/><con:parameters/><con:resource name="{id}" path="{id}"><con:settings/><con:parameters><con:parameter><con:name>id</con:name><con:value>-1</con:value><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:int</con:type><con:default>-1</con:default></con:parameter></con:parameters><con:method name="DELETE - logout" method="DELETE"><con:settings/><con:parameters/><con:representation type="REQUEST" id=""><con:mediaType>application/json</con:mediaType><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" mediaType="application/json"><con:settings/><con:endpoint>http://10.200.0.124:8080</con:endpoint><con:parameters/></con:request></con:method><con:method name="GET - getCurrentUserWithId" method="GET"><con:settings/><con:parameters/><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" mediaType="application/json"><con:settings/><con:endpoint>http://10.200.0.124:8080</con:endpoint><con:parameters/></con:request></con:method><con:method name="PUT - authenticateWithPut" method="PUT"><con:settings/><con:parameters/><con:representation type="REQUEST" id=""><con:mediaType>application/json</con:mediaType><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" mediaType="application/json"><con:settings/><con:endpoint>http://10.200.0.124:8080</con:endpoint><con:parameters/></con:request></con:method></con:resource><con:method name="POST - authenticate" method="POST"><con:description>get AccountToken</con:description><con:settings/><con:parameters><con:parameter><con:name>username</con:name><con:value>account</con:value><con:style>PLAIN</con:style><con:default>account</con:default></con:parameter><con:parameter><con:name>password</con:name><con:value>account</con:value><con:style>PLAIN</con:style><con:default>account</con:default></con:parameter></con:parameters><con:representation type="REQUEST" id=""><con:mediaType>application/json</con:mediaType><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="GetAccountToken" mediaType="application/json" postQueryString="false" accept=""><con:description>Get initial token</con:description><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://10.200.0.124:8080</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method><con:method name="GET - getCurrentUser" method="GET"><con:settings/><con:parameters/><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" mediaType="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://10.200.0.124:8080</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:resource name="{account}" path="user/account/{account}"><con:settings/><con:parameters><con:parameter><con:name>account</con:name><con:value>account</con:value><con:style>TEMPLATE</con:style><con:default>account</con:default></con:parameter></con:parameters><con:method name="GET - getAllUsersForAccount" method="GET"><con:settings/><con:parameters/><con:request name="GET - getAllUsersForAccount" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="utoken" value="-7960859428367281967--5480928049939478702--5694980023367921047-0" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://10.200.0.124:8080</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="account" value="1" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:request></con:method></con:resource><con:resource name="user" path="user"><con:settings/><con:parameters/><con:resource name="{id}" path="{id}"><con:settings/><con:parameters><con:parameter><con:name>id</con:name><con:value>id</con:value><con:style>TEMPLATE</con:style><con:default>id</con:default></con:parameter></con:parameters><con:method name="GET - getUser" method="GET"><con:settings/><con:parameters/><con:request name="Request 1" mediaType="application/json"><con:settings/><con:endpoint>http://10.200.0.124:8080</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method><con:method name="PUT - updateWithPut" method="PUT"><con:settings/><con:parameters/><con:request name="Request 1" mediaType="application/json" postQueryString="false"><con:settings/><con:endpoint>http://10.200.0.124:8080</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method><con:method name="DELETE - deleteUser" method="DELETE"><con:settings/><con:parameters/><con:request name="Request 1" mediaType="application/json"><con:settings/><con:endpoint>http://10.200.0.124:8080</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:resource name="unique" path="unique"><con:settings/><con:parameters/><con:method name="POST - userIsUnique" method="POST"><con:settings/><con:parameters/><con:request name="Request 1" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://10.200.0.124:8080</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:method name="POST - updateUser" method="POST"><con:settings/><con:parameters/><con:request name="Request 1" mediaType="application/json" postQueryString="false"><con:settings/><con:endpoint>http://10.200.0.124:8080</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:RestService" wadlVersion="http://wadl.dev.java.net/2009/02" name="ARTSA - UserManager" type="rest" basePath="/SaasCoreUserManager/rest/" definitionUrl="C:\Users\tmemmott\Documents\SoapUI-Projects\wadl-files\UserManager.wadl" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="CreateWadlDocumentationAction@report-directory">C:\Users\tmemmott\Documents\test_ITC</con:setting></con:settings><con:definitionCache type="TEXT" rootPart="file:/C:/Users/tmemmott/Documents/SoapUI-Projects/wadl-files/UserManager.wadl"><con:part><con:url>file:/C:/Users/tmemmott/Documents/SoapUI-Projects/wadl-files/UserManager.wadl</con:url><con:content><![CDATA[<application xmlns="http://wadl.dev.java.net/2009/02">
  <doc jersey:generatedBy="Jersey: 1.11 12/09/2011 10:27 AM" xmlns:jersey="http://jersey.java.net/"/>
  <grammars/>
  <resources base="http://10.200.0.124:8080/SaasCoreUserManager/rest/">
    <resource path="profile">
      <method name="POST" id="updateProfile">
        <request>
          <representation mediaType="application/json"/>
        </request>
        <response>
          <representation mediaType="application/json"/>
        </response>
      </method>
      <resource path="password">
        <method name="POST" id="updatePassword">
          <request>
            <representation mediaType="application/json"/>
          </request>
          <response>
            <representation mediaType="application/json"/>
          </response>
        </method>
      </resource>
      <resource path="{id}">
        <param default="-1" type="xs:int" style="template" name="id" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
        <method name="PUT" id="updateProfileWithPut">
          <request>
            <representation mediaType="application/json"/>
          </request>
          <response>
            <representation mediaType="application/json"/>
          </response>
        </method>
      </resource>
    </resource>
    <resource path="user">
      <method name="POST" id="update">
        <request>
          <representation mediaType="application/json"/>
        </request>
        <response>
          <representation mediaType="application/json"/>
        </response>
      </method>
      <method name="GET" id="getAllUsersForAccountExceptCurrentUser">
        <response>
          <representation mediaType="application/json"/>
        </response>
      </method>
      <resource path="{id}">
        <param default="-1" type="xs:int" style="template" name="id" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
        <method name="GET" id="getUser">
          <response>
            <representation mediaType="application/json"/>
          </response>
        </method>
        <method name="PUT" id="updateWithPut">
          <request>
            <representation mediaType="application/json"/>
          </request>
          <response>
            <representation mediaType="application/json"/>
          </response>
        </method>
        <method name="DELETE" id="deleteUser">
          <response>
            <representation mediaType="application/json"/>
          </response>
        </method>
      </resource>
      <resource path="unique">
        <method name="POST" id="userIsUnique">
          <request>
            <representation mediaType="application/json"/>
          </request>
          <response>
            <representation mediaType="application/json"/>
          </response>
        </method>
      </resource>
    </resource>
    <resource path="auth">
      <method name="POST" id="authenticate">
        <request>
          <representation mediaType="application/json"/>
        </request>
        <response>
          <representation mediaType="application/json"/>
        </response>
      </method>
      <method name="GET" id="getCurrentUser">
        <response>
          <representation mediaType="application/json"/>
        </response>
      </method>
      <method name="OPTIONS" id="fixOptions">
        <request>
          <param type="xs:string" style="header" name="Access-Control-Request-Headers" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
        </request>
        <response>
          <representation mediaType="application/json"/>
        </response>
      </method>
      <resource path="{id}">
        <param default="-1" type="xs:int" style="template" name="id" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
        <method name="DELETE" id="logout">
          <request>
            <representation mediaType="application/json"/>
          </request>
          <response>
            <representation mediaType="application/json"/>
          </response>
        </method>
        <method name="GET" id="getCurrentUserWithId">
          <response>
            <representation mediaType="application/json"/>
          </response>
        </method>
        <method name="PUT" id="authenticateWithPut">
          <request>
            <representation mediaType="application/json"/>
          </request>
          <response>
            <representation mediaType="application/json"/>
          </response>
        </method>
        <method name="OPTIONS" id="fixOptionsPut">
          <request>
            <param type="xs:string" style="header" name="Access-Control-Request-Headers" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
          </request>
          <response>
            <representation mediaType="application/json"/>
          </response>
        </method>
      </resource>
    </resource>
  </resources>
</application>]]></con:content><con:type>http://wadl.dev.java.net/2009/02</con:type></con:part></con:definitionCache><con:endpoints><con:endpoint>http://10.200.0.124:8080</con:endpoint></con:endpoints><con:resource name="profile" path="profile"><con:settings/><con:parameters/><con:resource name="password" path="password"><con:settings/><con:parameters/><con:method name="POST - updatePassword" method="POST"><con:settings/><con:parameters/><con:representation type="REQUEST" id=""><con:mediaType>application/json</con:mediaType><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" mediaType="application/json"><con:settings/><con:endpoint>http://10.200.0.124:8080</con:endpoint><con:parameters/></con:request></con:method></con:resource><con:resource name="{id}" path="{id}"><con:settings/><con:parameters><con:parameter><con:name>id</con:name><con:value>-1</con:value><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:int</con:type><con:default>-1</con:default></con:parameter></con:parameters><con:method name="PUT - updateProfileWithPut" method="PUT"><con:settings/><con:parameters/><con:representation type="REQUEST" id=""><con:mediaType>application/json</con:mediaType><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" mediaType="application/json"><con:settings/><con:endpoint>http://10.200.0.124:8080</con:endpoint><con:parameters/></con:request></con:method></con:resource><con:method name="POST - updateProfile" method="POST"><con:settings/><con:parameters/><con:representation type="REQUEST" id=""><con:mediaType>application/json</con:mediaType><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" mediaType="application/json" postQueryString="false"><con:settings/><con:endpoint>http://10.200.0.124:8080</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:resource name="user" path="user"><con:settings/><con:parameters><con:parameter required="true"><con:name>utoken</con:name><con:value/><con:style>HEADER</con:style><con:default/><con:description>Use AuthUser class to generate the token</con:description></con:parameter></con:parameters><con:resource name="{id}" path="{id}"><con:settings/><con:parameters><con:parameter><con:name>id</con:name><con:value>-1</con:value><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:int</con:type><con:default>-1</con:default></con:parameter></con:parameters><con:method name="GET - getUser" method="GET"><con:settings/><con:parameters/><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" mediaType="application/xml"><con:settings/><con:endpoint>http://10.200.0.124:8080</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method><con:method name="PUT - updateWithPut" method="PUT"><con:settings/><con:parameters/><con:representation type="REQUEST" id=""><con:mediaType>application/json</con:mediaType><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" mediaType="application/json"><con:settings/><con:endpoint>http://10.200.0.124:8080</con:endpoint><con:parameters/></con:request></con:method><con:method name="DELETE - deleteUser" method="DELETE"><con:settings/><con:parameters/><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" mediaType="application/json"><con:settings/><con:endpoint>http://10.200.0.124:8080</con:endpoint><con:parameters/></con:request></con:method></con:resource><con:resource name="unique" path="unique"><con:settings/><con:parameters/><con:method name="POST - userIsUnique" method="POST"><con:settings/><con:parameters/><con:representation type="REQUEST" id=""><con:mediaType>application/json</con:mediaType><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" mediaType="application/json" postQueryString="false"><con:settings/><con:endpoint>http://10.200.0.124:8080</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:method name="POST - update" method="POST"><con:description>Update current username properties</con:description><con:settings/><con:parameters/><con:representation type="REQUEST" id=""><con:mediaType>application/json</con:mediaType><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" mediaType="application/x-www-form-urlencoded" postQueryString="true" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://10.200.0.124:8080</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method><con:method name="GET - getAllUsersForAccountExceptCurrentUser" method="GET"><con:settings/><con:parameters/><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" mediaType="application/xml" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting><con:setting id="RecordRequestRepresentations">true</con:setting></con:settings><con:endpoint>http://10.200.0.124:8080</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:resource name="auth" path="auth"><con:settings/><con:parameters/><con:resource name="{id}" path="{id}"><con:settings/><con:parameters><con:parameter><con:name>id</con:name><con:value>-1</con:value><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:int</con:type><con:default>-1</con:default></con:parameter></con:parameters><con:method name="DELETE - logout" method="DELETE"><con:settings/><con:parameters/><con:representation type="REQUEST" id=""><con:mediaType>application/json</con:mediaType><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" mediaType="application/json"><con:settings/><con:endpoint>http://10.200.0.124:8080</con:endpoint><con:parameters/></con:request></con:method><con:method name="GET - getCurrentUserWithId" method="GET"><con:settings/><con:parameters/><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" mediaType="application/json"><con:settings/><con:endpoint>http://10.200.0.124:8080</con:endpoint><con:parameters/></con:request></con:method><con:method name="PUT - authenticateWithPut" method="PUT"><con:settings/><con:parameters/><con:representation type="REQUEST" id=""><con:mediaType>application/json</con:mediaType><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" mediaType="application/json"><con:settings/><con:endpoint>http://10.200.0.124:8080</con:endpoint><con:parameters/></con:request></con:method><con:method name="OPTIONS - fixOptionsPut" method="OPTIONS"><con:settings/><con:parameters><con:parameter><con:name>Access-Control-Request-Headers</con:name><con:value xsi:nil="true"/><con:style>HEADER</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default xsi:nil="true"/></con:parameter></con:parameters><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" mediaType="application/json"><con:settings/><con:endpoint>http://10.200.0.124:8080</con:endpoint><con:parameters/></con:request></con:method></con:resource><con:method name="POST - authenticate" method="POST"><con:settings/><con:parameters/><con:representation type="REQUEST" id=""><con:mediaType>application/json</con:mediaType><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Get Utoken" mediaType="application/json" postQueryString="false" accept=""><con:description>get token for current User</con:description><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Contest-Type" value="application/json"/>
  &lt;con:entry key="Accept" value="application/json"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>http://10.200.0.124:8080</con:endpoint><con:request>{"username":"admin", "password":"admin1", "accountName":"infomaven"}
</con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder/></con:request></con:method><con:method name="GET - getCurrentUser" method="GET"><con:settings/><con:parameters/><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://10.200.0.124:8080</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method><con:method name="OPTIONS - fixOptions" method="OPTIONS"><con:settings/><con:parameters><con:parameter><con:name>Access-Control-Request-Headers</con:name><con:value xsi:nil="true"/><con:style>HEADER</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default xsi:nil="true"/></con:parameter></con:parameters><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" mediaType="application/json"><con:settings/><con:endpoint>http://10.200.0.124:8080</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:resource name="userAccount" path="user/account"><con:settings/><con:parameters><con:parameter required="true"><con:name>UserToken</con:name><con:value/><con:style>HEADER</con:style><con:default/><con:description>Use AuthUser class to generate the token</con:description></con:parameter></con:parameters><con:resource name="{id}" path="{id}"><con:settings/><con:parameters><con:parameter><con:name>id</con:name><con:value>-1</con:value><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:int</con:type><con:default>-1</con:default></con:parameter></con:parameters><con:method name="GET - getUser" method="GET"><con:settings/><con:parameters/><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" mediaType="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://10.200.0.124:8080</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method><con:method name="PUT - updateWithPut" method="PUT"><con:settings/><con:parameters/><con:representation type="REQUEST" id=""><con:mediaType>application/json</con:mediaType><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" mediaType="application/json"><con:settings/><con:endpoint>http://10.200.0.124:8080</con:endpoint><con:parameters/></con:request></con:method><con:method name="DELETE - deleteUser" method="DELETE"><con:settings/><con:parameters/><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" mediaType="application/json"><con:settings/><con:endpoint>http://10.200.0.124:8080</con:endpoint><con:parameters/></con:request></con:method></con:resource><con:resource name="unique" path="unique"><con:settings/><con:parameters/><con:method name="POST - userIsUnique" method="POST"><con:settings/><con:parameters/><con:representation type="REQUEST" id=""><con:mediaType>application/json</con:mediaType><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" mediaType="application/json" postQueryString="false"><con:settings/><con:endpoint>http://10.200.0.124:8080</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:method name="POST - update" method="POST"><con:description>Update current username properties</con:description><con:settings/><con:parameters/><con:representation type="REQUEST" id=""><con:mediaType>application/json</con:mediaType><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" mediaType="application/x-www-form-urlencoded" postQueryString="true" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://10.200.0.124:8080</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method><con:method name="GET - getAllUsersForAccountExceptCurrentUser" method="GET"><con:settings/><con:parameters/><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" mediaType="application/xml" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting><con:setting id="RecordRequestRepresentations">true</con:setting></con:settings><con:endpoint>http://10.200.0.124:8080</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:RestService" wadlVersion="http://wadl.dev.java.net/2009/02" name="ARTSA  - Article Query" type="rest" basePath="/ArticleQueryApi/rest/" definitionUrl="C:\Users\tmemmott\Documents\SoapUI-Projects\wadl-files\ArticleQueryApi.wadl" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT"/><con:endpoints><con:endpoint>http://10.200.0.124:8080</con:endpoint></con:endpoints><con:resource name="query" path="query"><con:settings/><con:parameters/><con:resource name="details" path="details"><con:settings/><con:parameters/><con:method name="POST - getArticleDetailsData" method="POST"><con:settings/><con:parameters/><con:representation type="REQUEST" id=""><con:mediaType>application/json</con:mediaType><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://10.200.0.124:8080</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method><con:method name="OPTIONS - fixOptionsDetails" method="OPTIONS"><con:settings/><con:parameters><con:parameter><con:name>Access-Control-Request-Headers</con:name><con:value xsi:nil="true"/><con:style>HEADER</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default xsi:nil="true"/></con:parameter></con:parameters><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://10.200.0.124:8080</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:resource name="aggregate" path="aggregate"><con:settings/><con:parameters/><con:method name="POST - getAggregateData" method="POST"><con:settings/><con:parameters/><con:representation type="REQUEST" id=""><con:mediaType>application/json</con:mediaType><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" mediaType="application/json" postQueryString="false"><con:settings/><con:endpoint>http://10.200.0.124:8080</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request><con:request name="Summary - 01.1 Author Location State" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="utoken" value="869958268430324053-3437487091947146822-2060348361176850563-61" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://10.200.0.124:8080</con:endpoint><con:request>{
  "topicIDs":[${#Global#topicid}],
  //"limit":"55",
  "selectedFields":[
        {"field":"content_volume()","sortDirection":"DESCENDING"},
        {"field":"author_state"}
        //{"field":"article_topic"}
  ],
  "filters":[
      {"field":"author_country","comparison":EQ,"values":["us"]}    
  ],
  "dateRange":{"startDate":${#Global#queryepochstart},"endDate":${#Global#queryepochend}}
}</con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method><con:method name="OPTIONS - fixOptionsAggregate" method="OPTIONS"><con:settings/><con:parameters><con:parameter><con:name>Access-Control-Request-Headers</con:name><con:value xsi:nil="true"/><con:style>HEADER</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default xsi:nil="true"/></con:parameter></con:parameters><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" mediaType="application/json"><con:settings/><con:endpoint>http://10.200.0.124:8080</con:endpoint><con:parameters/></con:request></con:method></con:resource><con:resource name="timeseries" path="timeseries"><con:settings/><con:parameters/><con:method name="POST - getTimeSeriesData" method="POST"><con:settings/><con:parameters/><con:representation type="REQUEST" id=""><con:mediaType>application/json</con:mediaType><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" mediaType="application/json"><con:settings/><con:endpoint>http://10.200.0.124:8080</con:endpoint><con:parameters/></con:request></con:method><con:method name="OPTIONS - fixOptionsTimeSeries" method="OPTIONS"><con:settings/><con:parameters><con:parameter><con:name>Access-Control-Request-Headers</con:name><con:value xsi:nil="true"/><con:style>HEADER</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default xsi:nil="true"/></con:parameter></con:parameters><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" mediaType="application/json"><con:settings/><con:endpoint>http://10.200.0.124:8080</con:endpoint><con:parameters/></con:request></con:method></con:resource><con:resource name="fieldsmap" path="fieldsmap"><con:settings/><con:parameters/><con:method name="POST - getArticleFieldsMap" method="POST"><con:settings/><con:parameters/><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" mediaType="application/json"><con:settings/><con:endpoint>http://10.200.0.124:8080</con:endpoint><con:parameters/></con:request></con:method><con:method name="OPTIONS - fixOptionsFieldsMap" method="OPTIONS"><con:settings/><con:parameters><con:parameter><con:name>Access-Control-Request-Headers</con:name><con:value xsi:nil="true"/><con:style>HEADER</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default xsi:nil="true"/></con:parameter></con:parameters><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" mediaType="application/json"><con:settings/><con:endpoint>http://10.200.0.124:8080</con:endpoint><con:parameters/></con:request></con:method></con:resource><con:resource name="population" path="population"><con:settings/><con:parameters/><con:method name="OPTIONS - fixOptionsPopulation" method="OPTIONS"><con:settings/><con:parameters><con:parameter><con:name>Access-Control-Request-Headers</con:name><con:value xsi:nil="true"/><con:style>HEADER</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default xsi:nil="true"/></con:parameter></con:parameters><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" mediaType="application/json"><con:settings/><con:endpoint>http://10.200.0.124:8080</con:endpoint><con:parameters/></con:request></con:method><con:method name="GET - getPopulation" method="GET"><con:settings/><con:parameters/><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" mediaType="application/json"><con:settings/><con:endpoint>http://10.200.0.124:8080</con:endpoint><con:parameters/></con:request></con:method></con:resource><con:resource name="csvresults" path="csvresults"><con:settings/><con:parameters/><con:method name="OPTIONS - fixOptionsCSVResults" method="OPTIONS"><con:settings/><con:parameters><con:parameter><con:name>Access-Control-Request-Headers</con:name><con:value xsi:nil="true"/><con:style>HEADER</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default xsi:nil="true"/></con:parameter></con:parameters><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" mediaType="application/json"><con:settings/><con:endpoint>http://10.200.0.124:8080</con:endpoint><con:parameters/></con:request></con:method></con:resource><con:resource name="/topicvolume/{id}" path="/topicvolume/{id}"><con:settings/><con:parameters><con:parameter><con:name>id</con:name><con:value>-1</con:value><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:int</con:type><con:default>-1</con:default></con:parameter></con:parameters><con:method name="GET - getTopicAverage" method="GET"><con:settings/><con:parameters/><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" mediaType="application/json"><con:settings/><con:endpoint>http://10.200.0.124:8080</con:endpoint><con:parameters/></con:request></con:method><con:method name="OPTIONS - fixOptionsTopicAverage" method="OPTIONS"><con:settings/><con:parameters><con:parameter><con:name>Access-Control-Request-Headers</con:name><con:value xsi:nil="true"/><con:style>HEADER</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default xsi:nil="true"/></con:parameter></con:parameters><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" mediaType="application/json"><con:settings/><con:endpoint>http://10.200.0.124:8080</con:endpoint><con:parameters/></con:request></con:method></con:resource></con:resource></con:interface><con:interface xsi:type="con:RestService" wadlVersion="http://wadl.dev.java.net/2009/02" name="ARTSA - Topic Manager" type="rest" basePath="/SaasCoreTopicManager/rest/" definitionUrl="C:\Users\tmemmott\Documents\SoapUI-Projects\wadl-files\TopicManager.wadl" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="CreateWadlDocumentationAction@report-directory">C:\Users\tmemmott\Generated Docs</con:setting></con:settings><con:definitionCache type="TEXT" rootPart="file:/C:/Users/tmemmott/Documents/SoapUI-Projects/wadl-files/TopicManager.wadl"><con:part><con:url>file:/C:/Users/tmemmott/Documents/SoapUI-Projects/wadl-files/TopicManager.wadl</con:url><con:content><![CDATA[<application xmlns="http://wadl.dev.java.net/2009/02">
  <doc jersey:generatedBy="Jersey: 1.11 12/09/2011 10:27 AM" xmlns:jersey="http://jersey.java.net/"/>
  <grammars/>
  <resources base="http://10.200.0.124:8080/SaasCoreTopicManager/rest/">
    <resource path="topic">
      <method name="POST" id="update">
        <request>
          <representation mediaType="application/json"/>
        </request>
        <response>
          <representation mediaType="application/json"/>
        </response>
      </method>
      <method name="OPTIONS" id="fixOptions">
        <request>
          <param type="xs:string" style="header" name="Access-Control-Request-Headers" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
        </request>
        <response>
          <representation mediaType="application/json"/>
        </response>
      </method>
      <method name="GET" id="getAllTopics">
        <response>
          <representation mediaType="application/json"/>
        </response>
      </method>
      <resource path="{id}">
        <param default="-1" type="xs:int" style="template" name="id" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
        <method name="PUT" id="updateWithPut">
          <request>
            <representation mediaType="application/json"/>
          </request>
          <response>
            <representation mediaType="application/json"/>
          </response>
        </method>
        <method name="OPTIONS" id="fixOptionsPut">
          <request>
            <param type="xs:string" style="header" name="Access-Control-Request-Headers" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
          </request>
          <response>
            <representation mediaType="application/json"/>
          </response>
        </method>
        <method name="GET" id="getTopic">
          <response>
            <representation mediaType="application/json"/>
          </response>
        </method>
        <method name="DELETE" id="deleteTopic">
          <response>
            <representation mediaType="application/json"/>
          </response>
        </method>
      </resource>
      <resource path="/topicAudit/{id}">
        <param default="-1" type="xs:int" style="template" name="id" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
        <method name="GET" id="getTopicAudits">
          <response>
            <representation mediaType="application/json"/>
          </response>
        </method>
      </resource>
      <resource path="sanity">
        <method name="POST" id="topicSanityCheck">
          <request>
            <representation mediaType="application/json"/>
          </request>
          <response>
            <representation mediaType="application/json"/>
          </response>
        </method>
        <method name="OPTIONS" id="fixOptionsSanity">
          <request>
            <param type="xs:string" style="header" name="Access-Control-Request-Headers" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
          </request>
          <response>
            <representation mediaType="application/json"/>
          </response>
        </method>
      </resource>
      <resource path="unique">
        <method name="POST" id="topicIsUnique">
          <request>
            <representation mediaType="application/json"/>
          </request>
          <response>
            <representation mediaType="application/json"/>
          </response>
        </method>
        <method name="OPTIONS" id="fixOptionsUnique">
          <request>
            <param type="xs:string" style="header" name="Access-Control-Request-Headers" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
          </request>
          <response>
            <representation mediaType="application/json"/>
          </response>
        </method>
      </resource>
    </resource>
  </resources>
</application>]]></con:content><con:type>http://wadl.dev.java.net/2009/02</con:type></con:part></con:definitionCache><con:endpoints><con:endpoint>http://10.200.0.124:8080</con:endpoint></con:endpoints><con:resource name="topic" path="topic"><con:settings/><con:parameters/><con:resource name="{id}" path="{id}"><con:settings/><con:parameters><con:parameter><con:name>id</con:name><con:value>-1</con:value><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:int</con:type><con:default>-1</con:default></con:parameter></con:parameters><con:method name="PUT - updateWithPut" method="PUT"><con:settings/><con:parameters/><con:representation type="REQUEST" id=""><con:mediaType>application/json</con:mediaType><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" mediaType="application/json"><con:settings/><con:endpoint>http://10.200.0.124:8080</con:endpoint><con:parameters/></con:request></con:method><con:method name="OPTIONS - fixOptionsPut" method="OPTIONS"><con:settings/><con:parameters><con:parameter><con:name>Access-Control-Request-Headers</con:name><con:value xsi:nil="true"/><con:style>HEADER</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default xsi:nil="true"/></con:parameter></con:parameters><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" mediaType="application/json"><con:settings/><con:endpoint>http://10.200.0.124:8080</con:endpoint><con:parameters/></con:request></con:method><con:method name="GET - getTopic" method="GET"><con:settings/><con:parameters/><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" mediaType="application/json"><con:settings/><con:endpoint>http://10.200.0.124:8080</con:endpoint><con:parameters/></con:request></con:method><con:method name="DELETE - deleteTopic" method="DELETE"><con:settings/><con:parameters/><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" mediaType="application/json"><con:settings/><con:endpoint>http://10.200.0.124:8080</con:endpoint><con:parameters/></con:request></con:method></con:resource><con:resource name="/topicAudit/{id}" path="/topicAudit/{id}"><con:settings/><con:parameters><con:parameter><con:name>id</con:name><con:value>-1</con:value><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:int</con:type><con:default>-1</con:default></con:parameter></con:parameters><con:method name="GET - getTopicAudits" method="GET"><con:settings/><con:parameters/><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" mediaType="application/json"><con:settings/><con:endpoint>http://10.200.0.124:8080</con:endpoint><con:parameters/></con:request></con:method></con:resource><con:resource name="sanity" path="sanity"><con:settings/><con:parameters/><con:method name="POST - topicSanityCheck" method="POST"><con:settings/><con:parameters/><con:representation type="REQUEST" id=""><con:mediaType>application/json</con:mediaType><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" mediaType="application/json"><con:settings/><con:endpoint>http://10.200.0.124:8080</con:endpoint><con:parameters/></con:request></con:method><con:method name="OPTIONS - fixOptionsSanity" method="OPTIONS"><con:settings/><con:parameters><con:parameter><con:name>Access-Control-Request-Headers</con:name><con:value xsi:nil="true"/><con:style>HEADER</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default xsi:nil="true"/></con:parameter></con:parameters><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" mediaType="application/json"><con:settings/><con:endpoint>http://10.200.0.124:8080</con:endpoint><con:parameters/></con:request></con:method></con:resource><con:resource name="unique" path="unique"><con:settings/><con:parameters/><con:method name="POST - topicIsUnique" method="POST"><con:settings/><con:parameters/><con:representation type="REQUEST" id=""><con:mediaType>application/json</con:mediaType><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" mediaType="application/json"><con:settings/><con:endpoint>http://10.200.0.124:8080</con:endpoint><con:parameters/></con:request></con:method><con:method name="OPTIONS - fixOptionsUnique" method="OPTIONS"><con:settings/><con:parameters><con:parameter><con:name>Access-Control-Request-Headers</con:name><con:value xsi:nil="true"/><con:style>HEADER</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default xsi:nil="true"/></con:parameter></con:parameters><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" mediaType="application/json"><con:settings/><con:endpoint>http://10.200.0.124:8080</con:endpoint><con:parameters/></con:request></con:method></con:resource><con:resource name="alerts" path="/update/alerts"><con:settings/><con:parameters/><con:method name="POST - addAlert" method="POST"><con:settings/><con:parameters/><con:request name="Request 1" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://10.200.0.124:8080</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:method name="POST - update" method="POST"><con:settings/><con:parameters/><con:representation type="REQUEST" id=""><con:mediaType>application/json</con:mediaType><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" mediaType="application/json"><con:settings/><con:endpoint>http://10.200.0.124:8080</con:endpoint><con:parameters/></con:request></con:method><con:method name="OPTIONS - fixOptions" method="OPTIONS"><con:settings/><con:parameters><con:parameter><con:name>Access-Control-Request-Headers</con:name><con:value xsi:nil="true"/><con:style>HEADER</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default xsi:nil="true"/></con:parameter></con:parameters><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" mediaType="application/json"><con:settings/><con:endpoint>http://10.200.0.124:8080</con:endpoint><con:parameters/></con:request></con:method><con:method name="GET - getAllTopics" method="GET"><con:settings/><con:parameters/><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" mediaType="application/json"><con:settings/><con:endpoint>http://10.200.0.124:8080</con:endpoint><con:parameters/></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:RestService" wadlVersion="http://wadl.dev.java.net/2009/02" name="http://10.200.0.124:8080" type="rest" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart=""/><con:endpoints><con:endpoint>http://10.200.0.124:8080</con:endpoint></con:endpoints><con:resource name="Id" path="/SaasCoreInternalManager/rest/internal/topic_status/{id}"><con:settings/><con:parameters><con:parameter><con:name>id</con:name><con:value>id</con:value><con:style>TEMPLATE</con:style><con:default>id</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter></con:parameters><con:method name="GET - Topic Status" method="GET"><con:settings/><con:parameters/><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>401</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>403</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>403</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>403</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>403</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="Request 1" mediaType="application/json"><con:settings/><con:endpoint>http://10.200.0.124:8080</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:resource name="topic_status" path="/SaasCoreInternalManager/rest/internal/topic_status/"><con:settings/><con:parameters/><con:method name="POST - Topic Status" method="POST"><con:settings/><con:parameters/><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>401</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>403</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>403</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>403</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="Request 1" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://10.200.0.124:8080</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource></con:interface><con:testSuite name="accountManagerTestSuite" disabled="true"><con:description>TestSuite generated for REST Service [ARTSA- Account Manager]</con:description><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="accountBrandList" searchProperties="true" id="6ec89ca4-f663-4520-af26-38a31d00e7eb"><con:description>TestCase generated for REST Resource [brands] located at [/account/brands]</con:description><con:settings/><con:testStep type="groovy" name="setTime"><con:settings/><con:config><script>Calendar sod = Calendar.instance
    sod.set(Calendar.AM_PM, 0)
    sod.set(Calendar.HOUR, 0)
    sod.set(Calendar.MINUTE, 0)
    sod.set(Calendar.SECOND, 0)
    sod.set(Calendar.MILLISECOND, 0)
start = sod.time 
sqlstart = start.format('MM-dd-yy HH:mm:ss')
//log.info "SQL Start Time:  " + sqlstart
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "querysqlstart", sqlstart )

Calendar eod = Calendar.instance
    eod.set(Calendar.AM_PM, 0)
    eod.set(Calendar.HOUR, 9)
    eod.set(Calendar.MINUTE, 59)
    eod.set(Calendar.SECOND, 59)
    eod.set(Calendar.MILLISECOND, 999)
end = eod.time 
sqlend = end.format('MM-dd-yy HH:mm:ss')
//log.info "SQL End Time:  " + sqlend
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "querysqlend", sqlend )

offset = sod.get(Calendar.ZONE_OFFSET) + sod.get(Calendar.DST_OFFSET) / (60 * 1000)

starttime = start.time
epochstart = starttime + offset
//log.info "Epoch Start Time:  " + epochstart
def epochstart = epochstart as String
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "queryepochstart", epochstart )
def timestampstart = epochstart as Long
Date tss = new Date(timestampstart)
//log.info "Time to select in local timezone:  "+ tss

endtime = end.time
epochend = endtime + offset
//log.info "Epoch End Time:  " + epochend
def epochend = epochend as String
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "queryepochend", epochend )
def timestampend = epochend as Long
Date tse = new Date(timestampend)
//log.info "Time to select in local timezone:  "+ tse

now = Calendar.instance
today = now.time
millis = today.time
//log.info "Current time in milli-seconds:  " + millis
def today = new Date (millis)
//log.info "Current Local Time:  "+ today
tf = today.format('MM dd yy HH mm ss')
//log.info "Current Local Time nicely formatted:  "+ tf
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "time", tf )
millis = today.time as String
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "currentTime", millis )
</script></con:config></con:testStep><con:testStep type="restrequest" name="authAccountUser"><con:settings/><con:config service="ARTSA- Account Manager" resourcePath="/SaasCoreAccountManager/rest/accountauth" methodName="POST - authenticate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="authAccountUser" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://10.200.0.124:8080</con:endpoint><con:request>{
  "username":${#Global#accountAccountUsername},
  "password":${#Global#accountAccountPassword}
}</con:request><con:assertion type="XPath Match" name="XPath Match"><con:configuration><path>declare namespace soap='http://schemas.xmlsoap.org/soap/envelope/';
declare namespace ns1='http://10.200.0.124/SaasCoreAccountManager/rest/accountauth';
//ns1:loginFailed</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="username" value="${#Global#accountAccountUsername}"/>
  <con:entry key="password" value="${#Global#accountAccountPassword}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="authResponse"><con:settings/><con:config><script>import groovy.json.JsonSlurper
import com.eviware.soapui.impl.wsdl.teststeps.*

responseContent = testRunner.testCase.getTestStepByName("authAccountUser").getPropertyValue("response")
slurperresponse = new JsonSlurper().parseText(responseContent)

authkey = (slurperresponse.authkey)
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "accountAuthKey", authkey )

//log.info authkey</script></con:config></con:testStep><con:testStep type="groovy" name="setUtokenHeader"><con:settings/><con:config><script>import com.eviware.soapui.impl.wsdl.teststeps.*
import com.eviware.soapui.support.types.StringToStringMap;

def authkey = com.eviware.soapui.SoapUI.globalProperties.getPropertyValue( "accountAuthKey")
def tc = testRunner.testCase.testSuite.getTestCaseByName("accountBrandList")
def ts11 = tc.getTestStepByName("getBrandList")


def headers = new StringToStringMap()
headers.putIfMissing("utoken",authkey)

ts11.getHttpRequest().setRequestHeaders(headers)</script></con:config></con:testStep><con:testStep type="restrequest" name="getBrandList"><con:settings/><con:config service="ARTSA- Account Manager" resourcePath="/SaasCoreAccountManager/rest/account/brands" methodName="GET - getBrands" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="getBrandList" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="utoken" value="-152976831198233617-2336589428410961707--1988139137678661934-1012" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://10.200.0.124:8080</con:endpoint><con:request/><con:assertion type="Simple Contains" name="Contains"><con:configuration><token>Attensity</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:properties/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="accountNameUnique" searchProperties="true" id="d35c0405-ae91-43b9-aabf-735852012a28"><con:description>TestCase generated for REST Resource [unique] located at [/account/unique]</con:description><con:settings/><con:testStep type="groovy" name="setTime"><con:settings/><con:config><script>Calendar sod = Calendar.instance
    sod.set(Calendar.AM_PM, 0)
    sod.set(Calendar.HOUR, 0)
    sod.set(Calendar.MINUTE, 0)
    sod.set(Calendar.SECOND, 0)
    sod.set(Calendar.MILLISECOND, 0)
start = sod.time 
sqlstart = start.format('MM-dd-yy HH:mm:ss')
//log.info "SQL Start Time:  " + sqlstart
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "querysqlstart", sqlstart )

Calendar eod = Calendar.instance
    eod.set(Calendar.AM_PM, 0)
    eod.set(Calendar.HOUR, 9)
    eod.set(Calendar.MINUTE, 59)
    eod.set(Calendar.SECOND, 59)
    eod.set(Calendar.MILLISECOND, 999)
end = eod.time 
sqlend = end.format('MM-dd-yy HH:mm:ss')
//log.info "SQL End Time:  " + sqlend
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "querysqlend", sqlend )

offset = sod.get(Calendar.ZONE_OFFSET) + sod.get(Calendar.DST_OFFSET) / (60 * 1000)

starttime = start.time
epochstart = starttime + offset
//log.info "Epoch Start Time:  " + epochstart
def epochstart = epochstart as String
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "queryepochstart", epochstart )
def timestampstart = epochstart as Long
Date tss = new Date(timestampstart)
//log.info "Time to select in local timezone:  "+ tss

endtime = end.time
epochend = endtime + offset
//log.info "Epoch End Time:  " + epochend
def epochend = epochend as String
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "queryepochend", epochend )
def timestampend = epochend as Long
Date tse = new Date(timestampend)
//log.info "Time to select in local timezone:  "+ tse

now = Calendar.instance
today = now.time
millis = today.time
//log.info "Current time in milli-seconds:  " + millis
def today = new Date (millis)
//log.info "Current Local Time:  "+ today
tf = today.format('MM dd yy HH mm ss')
//log.info "Current Local Time nicely formatted:  "+ tf
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "time", tf )
millis = today.time as String
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "currentTime", millis )

secondsInHour = 3600000
secondsInDay = 24*secondsInHour as Long
secondsInMonth = 30*secondsInDay as Long
expirationDate = starttime+secondsInMonth as String
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "expirationDate", expirationDate )</script></con:config></con:testStep><con:testStep type="restrequest" name="authAccountUser"><con:settings/><con:config service="ARTSA- Account Manager" resourcePath="/SaasCoreAccountManager/rest/accountauth" methodName="POST - authenticate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="authAccountUser" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://10.200.0.124:8080</con:endpoint><con:request>{
  "username":${#Global#accountAccountUsername},
  "password":${#Global#accountAccountPassword}
}</con:request><con:assertion type="XPath Match" name="XPath Match"><con:configuration><path>declare namespace soap='http://schemas.xmlsoap.org/soap/envelope/';
declare namespace ns1='http://10.200.0.124/SaasCoreAccountManager/rest/accountauth';
//ns1:loginFailed</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="username" value="${#Global#accountAccountUsername}"/>
  <con:entry key="password" value="${#Global#accountAccountPassword}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="authResponse"><con:settings/><con:config><script>import groovy.json.JsonSlurper
import com.eviware.soapui.impl.wsdl.teststeps.*

responseContent = testRunner.testCase.getTestStepByName("authAccountUser").getPropertyValue("response")
slurperresponse = new JsonSlurper().parseText(responseContent)

authkey = (slurperresponse.authkey)
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "accountAuthKey", authkey )

//log.info authkey</script></con:config></con:testStep><con:testStep type="groovy" name="setUtokenHeader"><con:settings/><con:config><script>import com.eviware.soapui.impl.wsdl.teststeps.*
import com.eviware.soapui.support.types.StringToStringMap;

def authkey = com.eviware.soapui.SoapUI.globalProperties.getPropertyValue( "accountAuthKey")
def tc = testRunner.testCase.testSuite.getTestCaseByName("accountNameUnique")
def ts11 = tc.getTestStepByName("uniqueAccountNameFail")
def ts12 = tc.getTestStepByName("uniqueAccountNamePass")


def headers = new StringToStringMap()
headers.putIfMissing("utoken",authkey)

ts11.getHttpRequest().setRequestHeaders(headers)
ts12.getHttpRequest().setRequestHeaders(headers)</script></con:config></con:testStep><con:testStep type="restrequest" name="uniqueAccountNameFail"><con:settings/><con:config service="ARTSA- Account Manager" resourcePath="/SaasCoreAccountManager/rest/account/unique" methodName="POST - accountIsUnique" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="uniqueAccountNameFail" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="utoken" value="8089191231684344770-8589673437898982338--1157353364186578717-0" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://10.200.0.124:8080</con:endpoint><con:request>{
  "id":-1,
  "name":"Attensity"
}</con:request><con:assertion type="XPath Match" name="XPath Match"><con:configuration><path>declare namespace soap='http://schemas.xmlsoap.org/soap/envelope/';
declare namespace ns1='http://10.200.0.124/SaasCoreAccountManager/rest/account/unique';
//ns1:unique</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="uniqueAccountNamePass"><con:settings/><con:config service="ARTSA- Account Manager" resourcePath="/SaasCoreAccountManager/rest/account/unique" methodName="POST - accountIsUnique" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="uniqueAccountNamePass" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="utoken" value="8089191231684344770-8589673437898982338--1157353364186578717-0" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://10.200.0.124:8080</con:endpoint><con:request>{
  "id":-1,
  "name":"AttensityBlah"
}</con:request><con:assertion type="XPath Match" name="XPath Match"><con:configuration><path>declare namespace soap='http://schemas.xmlsoap.org/soap/envelope/';
declare namespace ns1='http://10.200.0.124/SaasCoreAccountManager/rest/account/unique';
//ns1:unique</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:properties/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="accountInfo" searchProperties="true" id="d4db46b4-3dc5-4d90-8024-d417eaca3374"><con:description>TestCase generated for REST Resource [accountInfo] located at [/account/accountInfo]</con:description><con:settings/><con:testStep type="groovy" name="setTime"><con:settings/><con:config><script>Calendar sod = Calendar.instance
    sod.set(Calendar.AM_PM, 0)
    sod.set(Calendar.HOUR, 0)
    sod.set(Calendar.MINUTE, 0)
    sod.set(Calendar.SECOND, 0)
    sod.set(Calendar.MILLISECOND, 0)
start = sod.time 
sqlstart = start.format('MM-dd-yy HH:mm:ss')
//log.info "SQL Start Time:  " + sqlstart
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "querysqlstart", sqlstart )

Calendar eod = Calendar.instance
    eod.set(Calendar.AM_PM, 0)
    eod.set(Calendar.HOUR, 9)
    eod.set(Calendar.MINUTE, 59)
    eod.set(Calendar.SECOND, 59)
    eod.set(Calendar.MILLISECOND, 999)
end = eod.time 
sqlend = end.format('MM-dd-yy HH:mm:ss')
//log.info "SQL End Time:  " + sqlend
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "querysqlend", sqlend )

offset = sod.get(Calendar.ZONE_OFFSET) + sod.get(Calendar.DST_OFFSET) / (60 * 1000)

starttime = start.time
epochstart = starttime + offset
//log.info "Epoch Start Time:  " + epochstart
def epochstart = epochstart as String
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "queryepochstart", epochstart )
def timestampstart = epochstart as Long
Date tss = new Date(timestampstart)
//log.info "Time to select in local timezone:  "+ tss

endtime = end.time
epochend = endtime + offset
//log.info "Epoch End Time:  " + epochend
def epochend = epochend as String
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "queryepochend", epochend )
def timestampend = epochend as Long
Date tse = new Date(timestampend)
//log.info "Time to select in local timezone:  "+ tse

now = Calendar.instance
today = now.time
millis = today.time
//log.info "Current time in milli-seconds:  " + millis
def today = new Date (millis)
//log.info "Current Local Time:  "+ today
tf = today.format('MM dd yy HH mm ss')
//log.info "Current Local Time nicely formatted:  "+ tf
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "time", tf )
millis = today.time as String
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "currentTime", millis )

secondsInHour = 3600000
secondsInDay = 24*secondsInHour as Long
secondsInMonth = 30*secondsInDay as Long
expirationDate = starttime+secondsInMonth as String
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "expirationDate", expirationDate )</script></con:config></con:testStep><con:testStep type="restrequest" name="authAccountUser"><con:settings/><con:config service="ARTSA- Account Manager" resourcePath="/SaasCoreAccountManager/rest/accountauth" methodName="POST - authenticate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="authAccountUser" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://10.200.0.124:8080</con:endpoint><con:request>{
  "username":${#Global#accountAccountUsername},
  "password":${#Global#accountAccountPassword}
}</con:request><con:assertion type="XPath Match" name="XPath Match"><con:configuration><path>declare namespace soap='http://schemas.xmlsoap.org/soap/envelope/';
declare namespace ns1='http://10.200.0.124/SaasCoreAccountManager/rest/accountauth';
//ns1:loginFailed</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="username" value="${#Global#accountAccountUsername}"/>
  <con:entry key="password" value="${#Global#accountAccountPassword}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="authResponse"><con:settings/><con:config><script>import groovy.json.JsonSlurper
import com.eviware.soapui.impl.wsdl.teststeps.*

responseContent = testRunner.testCase.getTestStepByName("authAccountUser").getPropertyValue("response")
slurperresponse = new JsonSlurper().parseText(responseContent)

authkey = (slurperresponse.authkey)
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "accountAuthKey", authkey )

//log.info authkey</script></con:config></con:testStep><con:testStep type="groovy" name="setUtokenHeader"><con:settings/><con:config><script>import com.eviware.soapui.impl.wsdl.teststeps.*
import com.eviware.soapui.support.types.StringToStringMap;

def authkey = com.eviware.soapui.SoapUI.globalProperties.getPropertyValue( "accountAuthKey")
def tc = testRunner.testCase.testSuite.getTestCaseByName("accountInfo")
def ts11 = tc.getTestStepByName("getAccountInfo")


def headers = new StringToStringMap()
headers.putIfMissing("utoken",authkey)

ts11.getHttpRequest().setRequestHeaders(headers)</script></con:config></con:testStep><con:testStep type="restrequest" name="getAccountInfo"><con:settings/><con:config service="ARTSA- Account Manager" resourcePath="/SaasCoreAccountManager/rest/account/accountInfo" methodName="GET - getAccountInfo" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="getAccountInfo" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="utoken" value="1196367737356813879--4598266690552066776-8263436038276395410-0" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://10.200.0.124:8080</con:endpoint><con:request/><con:assertion type="Simple Contains" name="Contains"><con:configuration><token>1</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:properties/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="accountCreate" searchProperties="true" id="7fb54499-d18b-49bb-8b46-1414cb0864cc" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword=""><con:description>TestCase generated for REST Resource [account] located at [/account]</con:description><con:settings/><con:testStep type="groovy" name="setTime"><con:settings/><con:config><script>Calendar sod = Calendar.instance
    sod.set(Calendar.AM_PM, 0)
    sod.set(Calendar.HOUR, 0)
    sod.set(Calendar.MINUTE, 0)
    sod.set(Calendar.SECOND, 0)
    sod.set(Calendar.MILLISECOND, 0)
start = sod.time 
sqlstart = start.format('MM-dd-yy HH:mm:ss')
//log.info "SQL Start Time:  " + sqlstart
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "querysqlstart", sqlstart )

Calendar eod = Calendar.instance
    eod.set(Calendar.AM_PM, 0)
    eod.set(Calendar.HOUR, 9)
    eod.set(Calendar.MINUTE, 59)
    eod.set(Calendar.SECOND, 59)
    eod.set(Calendar.MILLISECOND, 999)
end = eod.time 
sqlend = end.format('MM-dd-yy HH:mm:ss')
//log.info "SQL End Time:  " + sqlend
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "querysqlend", sqlend )

offset = sod.get(Calendar.ZONE_OFFSET) + sod.get(Calendar.DST_OFFSET) / (60 * 1000)

starttime = start.time
epochstart = starttime + offset
//log.info "Epoch Start Time:  " + epochstart
def epochstart = epochstart as String
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "queryepochstart", epochstart )
def timestampstart = epochstart as Long
Date tss = new Date(timestampstart)
//log.info "Time to select in local timezone:  "+ tss

endtime = end.time
epochend = endtime + offset
//log.info "Epoch End Time:  " + epochend
def epochend = epochend as String
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "queryepochend", epochend )
def timestampend = epochend as Long
Date tse = new Date(timestampend)
//log.info "Time to select in local timezone:  "+ tse

now = Calendar.instance
today = now.time
millis = today.time
//log.info "Current time in milli-seconds:  " + millis
def today = new Date (millis)
//log.info "Current Local Time:  "+ today
tf = today.format('MM dd yy HH mm ss')
//log.info "Current Local Time nicely formatted:  "+ tf
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "time", tf )
millis = today.time as String
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "currentTime", millis )

secondsInHour = 3600000
secondsInDay = 24*secondsInHour as Long
secondsInMonth = 30*secondsInDay as Long
expirationDate = starttime+secondsInMonth as String
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "expirationDate", expirationDate )</script></con:config></con:testStep><con:testStep type="restrequest" name="authAccountUser"><con:settings/><con:config service="ARTSA- Account Manager" resourcePath="/SaasCoreAccountManager/rest/accountauth" methodName="POST - authenticate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="authAccountUser" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://10.200.0.124:8080</con:endpoint><con:request>{
  "username":${#Global#accountAccountUsername},
  "password":${#Global#accountAccountPassword}
}</con:request><con:assertion type="XPath Match" name="XPath Match"><con:configuration><path>declare namespace soap='http://schemas.xmlsoap.org/soap/envelope/';
declare namespace ns1='http://10.200.0.124/SaasCoreAccountManager/rest/accountauth';
//ns1:loginFailed</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="username" value="${#Global#accountAccountUsername}"/>
  <con:entry key="password" value="${#Global#accountAccountPassword}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="authResponse"><con:settings/><con:config><script>import groovy.json.JsonSlurper
import com.eviware.soapui.impl.wsdl.teststeps.*

responseContent = testRunner.testCase.getTestStepByName("authAccountUser").getPropertyValue("response")
slurperresponse = new JsonSlurper().parseText(responseContent)

authkey = (slurperresponse.authkey)
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "accountAuthKey", authkey )

//log.info authkey</script></con:config></con:testStep><con:testStep type="groovy" name="setUtokenHeader"><con:settings/><con:config><script>import com.eviware.soapui.impl.wsdl.teststeps.*
import com.eviware.soapui.support.types.StringToStringMap;

def authkey = com.eviware.soapui.SoapUI.globalProperties.getPropertyValue( "accountAuthKey")
def tc = testRunner.testCase.testSuite.getTestCaseByName("accountCreate")
def ts11 = tc.getTestStepByName("createAccount")


def headers = new StringToStringMap()
headers.putIfMissing("utoken",authkey)

ts11.getHttpRequest().setRequestHeaders(headers)</script></con:config></con:testStep><con:testStep type="restrequest" name="createAccount"><con:settings/><con:config service="ARTSA- Account Manager" methodName="POST - update" resourcePath="/SaasCoreAccountManager/rest/account" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="createAccount" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="utoken" value="-4068602797603738279--875030518170872162--641408459201561602-0" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://10.200.0.124:8080</con:endpoint><con:request>{
  "id":-1,
  "name":"AccountCreateThroughAPI${#Global#currentTime}",
  "user":{
          "id":-1,
          "username":"admin",
          "email":"a@a.aa",
          "password": "admin1",
          "updatePassword":true,
          "enabled":true,
          "admin":true,
          "allowEditTopic":true,
           "userRole":{"description":"Admin",
             "roleName":"admin"
           },
          "accountAdminUser":false
         /*"preferences":{"timeZoneString":"GMT-4",
                         "timeZoneOffset":-14400000
                        },*/
         },
  "accountType":0,
  "brandName":"attensity",
  "expirationDate":1394637299000,
  "accessEli":true,
  "accessTempEditorEli":true,
  "contactName":"aa",
  "contactEmail":"a@a.aaa",
  "address":"anything goes here",
  "city":"anything goes here",
  "state":"anything goes here",
  "zipCode":"anything goes here",
  "psOwner":"anything goes here",
  "maxTopicLimit":5,
  "maxUserLimit":10,
  "maxVolumeLimit":3,
  "maxDataLimit":2
}</con:request><con:assertion type="XPath Match" name="XPath Match"><con:configuration><path>declare namespace soap='http://schemas.xmlsoap.org/soap/envelope/';
declare namespace ns1='http://10.200.0.124/SaasCoreAccountManager/rest/account';
//ns1:id</path><content>*</content><allowWildcards>true</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="createAccountResponse"><con:settings/><con:config><script>import groovy.json.JsonSlurper
import com.eviware.soapui.impl.wsdl.teststeps.*

responseContent = testRunner.testCase.getTestStepByName("createAccount").getPropertyValue("response")
slurperresponse = new JsonSlurper().parseText(responseContent)

def id = (slurperresponse.id) as String
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "createAccountAccountId", id )
//log.info "Account ID: " + id

def userAccountId = (slurperresponse.user.account) as String
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "createAccountUserAccountId", userAccountId )
//log.info "User Account ID: " + userAccountId

accountName = (slurperresponse.name)
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "createAccountAccountName", accountName )
//log.info "Account Name: " + accountName

userAccountName = (slurperresponse.user.accountName)
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "createAccoutUserAccountName", userAccountName )
//log.info "User Account Name: " + userAccountName

userName = (slurperresponse.user.username)
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "createAccountAdminUsername", userName )
//log.info "User Name: " + userName

def userId = (slurperresponse.user.id) as String
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "createAccountAdminUserId", userId )
//log.info "User ID:" + userId</script></con:config></con:testStep><con:properties/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="accountEdit" searchProperties="true" id="675f3cec-2e9d-4405-8821-de152a11001c" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword=""><con:description>TestCase generated for REST Resource [{id}] located at [/account/{id}]</con:description><con:settings/><con:testStep type="groovy" name="setTime"><con:settings/><con:config><script>Calendar sod = Calendar.instance
    sod.set(Calendar.AM_PM, 0)
    sod.set(Calendar.HOUR, 0)
    sod.set(Calendar.MINUTE, 0)
    sod.set(Calendar.SECOND, 0)
    sod.set(Calendar.MILLISECOND, 0)
start = sod.time 
sqlstart = start.format('MM-dd-yy HH:mm:ss')
//log.info "SQL Start Time:  " + sqlstart
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "querysqlstart", sqlstart )

Calendar eod = Calendar.instance
    eod.set(Calendar.AM_PM, 0)
    eod.set(Calendar.HOUR, 9)
    eod.set(Calendar.MINUTE, 59)
    eod.set(Calendar.SECOND, 59)
    eod.set(Calendar.MILLISECOND, 999)
end = eod.time 
sqlend = end.format('MM-dd-yy HH:mm:ss')
//log.info "SQL End Time:  " + sqlend
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "querysqlend", sqlend )

offset = sod.get(Calendar.ZONE_OFFSET) + sod.get(Calendar.DST_OFFSET) / (60 * 1000)

starttime = start.time
epochstart = starttime + offset
//log.info "Epoch Start Time:  " + epochstart
def epochstart = epochstart as String
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "queryepochstart", epochstart )
def timestampstart = epochstart as Long
Date tss = new Date(timestampstart)
//log.info "Time to select in local timezone:  "+ tss

endtime = end.time
epochend = endtime + offset
//log.info "Epoch End Time:  " + epochend
def epochend = epochend as String
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "queryepochend", epochend )
def timestampend = epochend as Long
Date tse = new Date(timestampend)
//log.info "Time to select in local timezone:  "+ tse

now = Calendar.instance
today = now.time
millis = today.time
//log.info "Current time in milli-seconds:  " + millis
def today = new Date (millis)
//log.info "Current Local Time:  "+ today
tf = today.format('MM dd yy HH mm ss')
//log.info "Current Local Time nicely formatted:  "+ tf
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "time", tf )
millis = today.time as String
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "currentTime", millis )

secondsInHour = 3600000
secondsInDay = 24*secondsInHour as BigDecimal
secondsInMonth = 30*secondsInDay as BigDecimal
expirationDate = starttime+secondsInMonth as String
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "expirationDate", expirationDate )</script></con:config></con:testStep><con:testStep type="restrequest" name="authAccountUser"><con:settings/><con:config service="ARTSA- Account Manager" resourcePath="/SaasCoreAccountManager/rest/accountauth" methodName="POST - authenticate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="authAccountUser" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://10.200.0.124:8080</con:endpoint><con:request>{
  "username":${#Global#accountAccountUsername},
  "password":${#Global#accountAccountPassword}
}</con:request><con:assertion type="XPath Match" name="XPath Match"><con:configuration><path>declare namespace soap='http://schemas.xmlsoap.org/soap/envelope/';
declare namespace ns1='http://10.200.0.124/SaasCoreAccountManager/rest/accountauth';
//ns1:loginFailed</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="username" value="${#Global#accountAccountUsername}"/>
  <con:entry key="password" value="${#Global#accountAccountPassword}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="authResponse"><con:settings/><con:config><script>import groovy.json.JsonSlurper
import com.eviware.soapui.impl.wsdl.teststeps.*

responseContent = testRunner.testCase.getTestStepByName("authAccountUser").getPropertyValue("response")
slurperresponse = new JsonSlurper().parseText(responseContent)

authkey = (slurperresponse.authkey)
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "accountAuthKey", authkey )

//log.info authkey</script></con:config></con:testStep><con:testStep type="groovy" name="setUtokenHeader"><con:settings/><con:config><script>import com.eviware.soapui.impl.wsdl.teststeps.*
import com.eviware.soapui.support.types.StringToStringMap;

def authkey = com.eviware.soapui.SoapUI.globalProperties.getPropertyValue( "accountAuthKey")
def tc = testRunner.testCase.testSuite.getTestCaseByName("accountEdit")
def ts11 = tc.getTestStepByName("editAccountFail")
def ts12 = tc.getTestStepByName("editAccountSuccess")


def headers = new StringToStringMap()
headers.putIfMissing("utoken",authkey)

ts11.getHttpRequest().setRequestHeaders(headers)
ts12.getHttpRequest().setRequestHeaders(headers)</script></con:config></con:testStep><con:testStep type="restrequest" name="editAccountFail"><con:settings/><con:config service="ARTSA- Account Manager" methodName="POST - update" resourcePath="/SaasCoreAccountManager/rest/account" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="editAccountFail" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="utoken" value="-4022438213351701261-8431410532911076592-1110252091298420394-0" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://10.200.0.124:8080</con:endpoint><con:request>{
  "id":${#Global#createAccountAccountId},
  "name":${#Global#createAccountAccountName},
  "accountType":0,
  "brand":"",
  "expirationDate":${#Global#expirationDate},
  "accessEli":true,
  "accessTempEditorEli":true,
  "contactName":"${#Global#validationLong}",
  "contactEmail":"bb.BBB",
  "address":"anything goes here",
  "city":"${#Global#validationLong}",
  "state":"${#Global#validationLong}",
  "zipCode":"${#Global#validationLong}",
  "psOwner":"${#Global#validationLong}",
  "maxTopicLimit":5,
  "maxUserLimit":10,
  "maxVolumeLimit":3,
  "maxDataLimit":2
}</con:request><con:assertion type="Simple Contains" name="validatesErrorPresent"><con:configuration><token>"CONTACTNAME_TOO_LONG","INVALID_EMAIL","CITY_TOO_LONG","STATE_TOO_LONG","ZIPCODE_TOO_LONG","PSOWNER_TOO_LONG"</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="editAccountSuccess"><con:settings/><con:config service="ARTSA- Account Manager" methodName="POST - update" resourcePath="/SaasCoreAccountManager/rest/account" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="editAccountSuccess" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="utoken" value="-4022438213351701261-8431410532911076592-1110252091298420394-0" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://10.200.0.124:8080</con:endpoint><con:request>{
  "id":${#Global#createAccountAccountId},
  "name":${#Global#createAccountAccountName},
  "accountType":0,
  "brand":"",
  "expirationDate":"${#Global#expirationDate}",
  "accessEli":true,
  "accessTempEditorEli":true,
  "contactName":"anything goes here",
  "contactEmail":"b@b.BBB",
  "address":"anything goes here",
  "city":"anything goes here",
  "state":"anything goes here",
  "zipCode":"anything goes here",
  "psOwner":"anything goes here",
  "maxTopicLimit":5,
  "maxUserLimit":10,
  "maxVolumeLimit":3,
  "maxDataLimit":2
}</con:request><con:assertion type="XPath Match" name="validateAccountIdOnEdit"><con:configuration><path>declare namespace soap='http://schemas.xmlsoap.org/soap/envelope/';
declare namespace ns1='http://10.200.0.124/SaasCoreAccountManager/rest/account';
//ns1:id</path><content>${#Global#createAccountAccountId}</content><allowWildcards>true</allowWildcards><ignoreNamspaceDifferences>true</ignoreNamspaceDifferences><ignoreComments>true</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:properties/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="accountUsers" searchProperties="true" id="299fd071-b85d-4e68-9249-d86bb53b2d6d"><con:description>TestCase generated for REST Resource [/users/{account}] located at [/account/users/{account}]</con:description><con:settings/><con:testStep type="groovy" name="setTime"><con:settings/><con:config><script>Calendar sod = Calendar.instance
    sod.set(Calendar.AM_PM, 0)
    sod.set(Calendar.HOUR, 0)
    sod.set(Calendar.MINUTE, 0)
    sod.set(Calendar.SECOND, 0)
    sod.set(Calendar.MILLISECOND, 0)
start = sod.time 
sqlstart = start.format('MM-dd-yy HH:mm:ss')
//log.info "SQL Start Time:  " + sqlstart
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "querysqlstart", sqlstart )

Calendar eod = Calendar.instance
    eod.set(Calendar.AM_PM, 0)
    eod.set(Calendar.HOUR, 9)
    eod.set(Calendar.MINUTE, 59)
    eod.set(Calendar.SECOND, 59)
    eod.set(Calendar.MILLISECOND, 999)
end = eod.time 
sqlend = end.format('MM-dd-yy HH:mm:ss')
//log.info "SQL End Time:  " + sqlend
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "querysqlend", sqlend )

offset = sod.get(Calendar.ZONE_OFFSET) + sod.get(Calendar.DST_OFFSET) / (60 * 1000)

starttime = start.time
epochstart = starttime + offset
//log.info "Epoch Start Time:  " + epochstart
def epochstart = epochstart as String
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "queryepochstart", epochstart )
def timestampstart = epochstart as Long
Date tss = new Date(timestampstart)
//log.info "Time to select in local timezone:  "+ tss

endtime = end.time
epochend = endtime + offset
//log.info "Epoch End Time:  " + epochend
def epochend = epochend as String
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "queryepochend", epochend )
def timestampend = epochend as Long
Date tse = new Date(timestampend)
//log.info "Time to select in local timezone:  "+ tse

now = Calendar.instance
today = now.time
millis = today.time
//log.info "Current time in milli-seconds:  " + millis
def today = new Date (millis)
//log.info "Current Local Time:  "+ today
tf = today.format('MM dd yy HH mm ss')
//log.info "Current Local Time nicely formatted:  "+ tf
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "time", tf )
millis = today.time as String
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "currentTime", millis )

secondsInHour = 3600000
secondsInDay = 24*secondsInHour as Long
secondsInMonth = 30*secondsInDay as Long
expirationDate = starttime+secondsInMonth as String
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "expirationDate", expirationDate )</script></con:config></con:testStep><con:testStep type="restrequest" name="authAccountUser"><con:settings/><con:config service="ARTSA- Account Manager" resourcePath="/SaasCoreAccountManager/rest/accountauth" methodName="POST - authenticate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="authAccountUser" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://10.200.0.124:8080</con:endpoint><con:request>{
  "username":${#Global#accountAccountUsername},
  "password":${#Global#accountAccountPassword}
}</con:request><con:assertion type="XPath Match" name="XPath Match"><con:configuration><path>declare namespace soap='http://schemas.xmlsoap.org/soap/envelope/';
declare namespace ns1='http://10.200.0.124/SaasCoreAccountManager/rest/accountauth';
//ns1:loginFailed</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="username" value="${#Global#accountAccountUsername}"/>
  <con:entry key="password" value="${#Global#accountAccountPassword}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="authResponse"><con:settings/><con:config><script>import groovy.json.JsonSlurper
import com.eviware.soapui.impl.wsdl.teststeps.*

responseContent = testRunner.testCase.getTestStepByName("authAccountUser").getPropertyValue("response")
slurperresponse = new JsonSlurper().parseText(responseContent)

authkey = (slurperresponse.authkey)
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "accountAuthKey", authkey )

//log.info authkey</script></con:config></con:testStep><con:testStep type="groovy" name="setUtokenHeader"><con:settings/><con:config><script>import com.eviware.soapui.impl.wsdl.teststeps.*
import com.eviware.soapui.support.types.StringToStringMap;

def authkey = com.eviware.soapui.SoapUI.globalProperties.getPropertyValue( "accountAuthKey")
def tc = testRunner.testCase.testSuite.getTestCaseByName("accountUsers")
def ts11 = tc.getTestStepByName("getListOfAccountUsers")

def headers = new StringToStringMap()
headers.putIfMissing("utoken",authkey)

ts11.getHttpRequest().setRequestHeaders(headers)</script></con:config></con:testStep><con:testStep type="restrequest" name="getListOfAccountUsers"><con:settings/><con:config service="ARTSA- Account Manager" resourcePath="/SaasCoreAccountManager/rest/user/account/{account}" methodName="GET - getAllUsersForAccount" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="getListOfAccountUsers" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="utoken" value="6510730973036056884--617572907846628622--4463395281827487283-0" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://10.200.0.124:8080</con:endpoint><con:request/><con:assertion type="Simple Contains" name="Contains"><con:configuration><token>${#GlobalcreateAccountUserAccountId}</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="account" value="${#Global#createAccountAccountId}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:properties/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="accountDelete" searchProperties="true" id="b51efe42-625e-4bf1-8ed7-c166e64f8baa" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" disabled="true"><con:settings/><con:testStep type="groovy" name="setTime"><con:settings/><con:config><script>Calendar sod = Calendar.instance
    sod.set(Calendar.AM_PM, 0)
    sod.set(Calendar.HOUR, 0)
    sod.set(Calendar.MINUTE, 0)
    sod.set(Calendar.SECOND, 0)
    sod.set(Calendar.MILLISECOND, 0)
start = sod.time 
sqlstart = start.format('MM-dd-yy HH:mm:ss')
//log.info "SQL Start Time:  " + sqlstart
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "querysqlstart", sqlstart )

Calendar eod = Calendar.instance
    eod.set(Calendar.AM_PM, 0)
    eod.set(Calendar.HOUR, 9)
    eod.set(Calendar.MINUTE, 59)
    eod.set(Calendar.SECOND, 59)
    eod.set(Calendar.MILLISECOND, 999)
end = eod.time 
sqlend = end.format('MM-dd-yy HH:mm:ss')
//log.info "SQL End Time:  " + sqlend
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "querysqlend", sqlend )

offset = sod.get(Calendar.ZONE_OFFSET) + sod.get(Calendar.DST_OFFSET) / (60 * 1000)

starttime = start.time
epochstart = starttime + offset
//log.info "Epoch Start Time:  " + epochstart
def epochstart = epochstart as String
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "queryepochstart", epochstart )
def timestampstart = epochstart as Long
Date tss = new Date(timestampstart)
//log.info "Time to select in local timezone:  "+ tss

endtime = end.time
epochend = endtime + offset
//log.info "Epoch End Time:  " + epochend
def epochend = epochend as String
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "queryepochend", epochend )
def timestampend = epochend as Long
Date tse = new Date(timestampend)
//log.info "Time to select in local timezone:  "+ tse

now = Calendar.instance
today = now.time
millis = today.time
//log.info "Current time in milli-seconds:  " + millis
def today = new Date (millis)
//log.info "Current Local Time:  "+ today
tf = today.format('MM dd yy HH mm ss')
//log.info "Current Local Time nicely formatted:  "+ tf
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "time", tf )
millis = today.time as String
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "currentTime", millis )
</script></con:config></con:testStep><con:testStep type="restrequest" name="authAccountUser"><con:settings/><con:config service="ARTSA- Account Manager" resourcePath="/SaasCoreAccountManager/rest/accountauth" methodName="POST - authenticate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="authAccountUser" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://10.200.0.124:8080</con:endpoint><con:request>{
  "username":"account",
  "password":"account"
}</con:request><con:assertion type="XPath Match" name="XPath Match"><con:configuration><path>declare namespace soap='http://schemas.xmlsoap.org/soap/envelope/';
declare namespace ns1='http://10.200.0.124/SaasCoreAccountManager/rest/accountauth';
//ns1:loginFailed</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="authResponse"><con:settings/><con:config><script>import groovy.json.JsonSlurper
import com.eviware.soapui.impl.wsdl.teststeps.*

responseContent = testRunner.testCase.getTestStepByName("authAccountUser").getPropertyValue("response")
slurperresponse = new JsonSlurper().parseText(responseContent)

authkey = (slurperresponse.authkey)
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "accountAuthKey", authkey )

//log.info authkey</script></con:config></con:testStep><con:testStep type="groovy" name="setUtokenHeader"><con:settings/><con:config><script>import com.eviware.soapui.impl.wsdl.teststeps.*
import com.eviware.soapui.support.types.StringToStringMap;

def authkey = com.eviware.soapui.SoapUI.globalProperties.getPropertyValue( "accountAuthKey")
def tc = testRunner.testCase.testSuite.getTestCaseByName("accountDelete")
def ts11 = tc.getTestStepByName("deleteAccount")


def headers = new StringToStringMap()
headers.putIfMissing("utoken",authkey)

ts11.getHttpRequest().setRequestHeaders(headers)
log.info headers</script></con:config></con:testStep><con:testStep type="restrequest" name="deleteAccount"><con:settings/><con:config service="ARTSA- Account Manager" resourcePath="/SaasCoreAccountManager/rest/account/{id}" methodName="DELETE - deleteAccount" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="deleteAccount" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="utoken" value="4018635226033164853--8545411673857221708-5997050184582682010-0" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://10.200.0.124:8080</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="id" value="${#Global#createAccountAccountId}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:properties/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="non_account_test" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="authAccountUser"><con:settings/><con:config service="ARTSA- Account Manager" resourcePath="/SaasCoreAccountManager/rest/accountauth" methodName="POST - authenticate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="authAccountUser" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://10.200.0.124:8080</con:endpoint><con:request>{
  "username":${#Global#accountAccountUsername},
  "password":${#Global#accountAccountPassword}
}</con:request><con:assertion type="XPath Match" name="XPath Match"><con:configuration><path>declare namespace soap='http://schemas.xmlsoap.org/soap/envelope/';
declare namespace ns1='http://10.200.0.124/SaasCoreAccountManager/rest/accountauth';
//ns1:loginFailed</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="username" value="${#Global#accountAccountUsername}"/>
  <con:entry key="password" value="${#Global#accountAccountPassword}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="authResponse"><con:settings/><con:config><script>import groovy.json.JsonSlurper
import com.eviware.soapui.impl.wsdl.teststeps.*

responseContent = testRunner.testCase.getTestStepByName("authAccountUser").getPropertyValue("response")
slurperresponse = new JsonSlurper().parseText(responseContent)

authkey = (slurperresponse.authkey)
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "accountAuthKey", authkey )

//log.info authkey</script></con:config></con:testStep><con:testStep type="groovy" name="setUtokenHeader"><con:settings/><con:config><script>import com.eviware.soapui.impl.wsdl.teststeps.*
import com.eviware.soapui.support.types.StringToStringMap;

def authkey = com.eviware.soapui.SoapUI.globalProperties.getPropertyValue( "authKey")
def tc = testRunner.testCase.testSuite.getTestCaseByName("accountBrandList")
def ts11 = tc.getTestStepByName("getBrandList")


def headers = new StringToStringMap()
headers.putIfMissing("utoken",authkey)

ts11.getHttpRequest().setRequestHeaders(headers)</script></con:config></con:testStep><con:testStep type="restrequest" name="authuser"><con:settings/><con:config service="ARTSA - UserManager" resourcePath="/SaasCoreUserManager/rest/auth" methodName="POST - authenticate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="authuser" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="authkey" value="1189377229352574419-2213262129298445271-4936701685398756970-61" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://10.200.0.124:8080</con:endpoint><con:request>{
  "username":"admin",
  "password":"admin1",
  "accountName":"idetestaccount"
}</con:request><con:assertion type="XPath Match" name="XPath Match"><con:configuration><path>declare namespace soap='http://schemas.xmlsoap.org/soap/envelope/';
declare namespace ns1='http://10.200.0.124/SaasCoreUserManager/rest/auth';
//ns1:loginFailed</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="authResponseUser"><con:settings/><con:config><script>import groovy.json.JsonSlurper
import com.eviware.soapui.impl.wsdl.teststeps.*

responseContent = testRunner.testCase.getTestStepByName("authuser").getPropertyValue("response")
slurperresponse = new JsonSlurper().parseText(responseContent)

authkey = (slurperresponse.authkey)
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "authkey", authkey )

//log.info authkey</script></con:config></con:testStep><con:testStep type="restrequest" name="getBrandList"><con:settings/><con:config service="ARTSA- Account Manager" resourcePath="/SaasCoreAccountManager/rest/account/brands" methodName="GET - getBrands" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="getBrandList" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="utoken" value="-1922306759530167933-7978523910851133240--4350645275137553763-0" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://10.200.0.124:8080</con:endpoint><con:request/><con:assertion type="Simple Contains" name="Contains"><con:configuration><token>Attensity</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:properties/></con:testCase><con:properties/></con:testSuite><con:testSuite name="userManagerTestSuite" disabled="true"><con:description>TestSuite generated for REST Service [ARTSA - UserManager]</con:description><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="userCreate" searchProperties="true" id="986c3960-c9f4-4735-b79d-9d1c92ece501"><con:settings/><con:testStep type="groovy" name="setTime"><con:settings/><con:config><script>Calendar sod = Calendar.instance
    sod.set(Calendar.AM_PM, 0)
    sod.set(Calendar.HOUR, 0)
    sod.set(Calendar.MINUTE, 0)
    sod.set(Calendar.SECOND, 0)
    sod.set(Calendar.MILLISECOND, 0)
start = sod.time 
sqlstart = start.format('MM-dd-yy HH:mm:ss')
//log.info "SQL Start Time:  " + sqlstart
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "querysqlstart", sqlstart )

Calendar eod = Calendar.instance
    eod.set(Calendar.AM_PM, 0)
    eod.set(Calendar.HOUR, 9)
    eod.set(Calendar.MINUTE, 59)
    eod.set(Calendar.SECOND, 59)
    eod.set(Calendar.MILLISECOND, 999)
end = eod.time 
sqlend = end.format('MM-dd-yy HH:mm:ss')
//log.info "SQL End Time:  " + sqlend
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "querysqlend", sqlend )

offset = sod.get(Calendar.ZONE_OFFSET) + sod.get(Calendar.DST_OFFSET) / (60 * 1000)

starttime = start.time
epochstart = starttime + offset
//log.info "Epoch Start Time:  " + epochstart
def epochstart = epochstart as String
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "queryepochstart", epochstart )
def timestampstart = epochstart as Long
Date tss = new Date(timestampstart)
//log.info "Time to select in local timezone:  "+ tss

endtime = end.time
epochend = endtime + offset
//log.info "Epoch End Time:  " + epochend
def epochend = epochend as String
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "queryepochend", epochend )
def timestampend = epochend as Long
Date tse = new Date(timestampend)
//log.info "Time to select in local timezone:  "+ tse

now = Calendar.instance
today = now.time
millis = today.time
//log.info "Current time in milli-seconds:  " + millis
def today = new Date (millis)
//log.info "Current Local Time:  "+ today
tf = today.format('MM dd yy HH mm ss')
//log.info "Current Local Time nicely formatted:  "+ tf
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "time", tf )
millis = today.time as String
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "currentTime", millis )

secondsInHour = 3600000
secondsInDay = 24*secondsInHour as Long
secondsInMonth = 30*secondsInDay as Long
expirationDate = starttime+secondsInMonth as String
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "expirationDate", expirationDate )</script></con:config></con:testStep><con:testStep type="restrequest" name="authAdminUser"><con:settings/><con:config service="ARTSA - UserManager" resourcePath="/SaasCoreUserManager/rest/auth" methodName="POST - authenticate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="authAdminUser" mediaType="application/json" postQueryString="false" accept=""><con:description>get token for current User</con:description><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Contest-Type" value="application/json"/>
  &lt;con:entry key="Accept" value="application/json"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>http://10.200.0.124:8080</con:endpoint><con:request>{
  "username":"${#Global#createAccountAdminUsername}",
  "password":"${#Global#userOriginalPassword}",
  "accountName":"${#Global#createAccoutUserAccountName}"
}</con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="authResponse"><con:settings/><con:config><script>import groovy.json.JsonSlurper
import com.eviware.soapui.impl.wsdl.teststeps.*

responseContent = testRunner.testCase.getTestStepByName("authAdminUser").getPropertyValue("response")
slurperresponse = new JsonSlurper().parseText(responseContent)

authkey = (slurperresponse.authkey)
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "accountAuthKey", authkey )

//log.info authkey</script></con:config></con:testStep><con:testStep type="groovy" name="setUtokenHeader"><con:settings/><con:config><script>import com.eviware.soapui.impl.wsdl.teststeps.*
import com.eviware.soapui.support.types.StringToStringMap;

def authkey = com.eviware.soapui.SoapUI.globalProperties.getPropertyValue( "accountAuthKey")
def tc = testRunner.testCase.testSuite.getTestCaseByName("userCreate")
def ts11 = tc.getTestStepByName("createUserReadOnly")
def ts12 = tc.getTestStepByName("createUserEditor")
def ts13 = tc.getTestStepByName("createUserAdmin")
def ts14 = tc.getTestStepByName("createUserProfessionalService")


def headers = new StringToStringMap()
headers.putIfMissing("utoken",authkey)

ts11.getHttpRequest().setRequestHeaders(headers)
ts12.getHttpRequest().setRequestHeaders(headers)
ts13.getHttpRequest().setRequestHeaders(headers)
ts14.getHttpRequest().setRequestHeaders(headers)</script></con:config></con:testStep><con:testStep type="restrequest" name="createUserReadOnly"><con:settings/><con:config service="ARTSA - UserManager" resourcePath="/SaasCoreUserManager/rest/user" methodName="POST - update" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="createUserReadOnly" mediaType="application/json" postQueryString="false" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="utoken" value="-1820003979065125350--5455457267176897721--4016001549055387710-64" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://10.200.0.124:8080</con:endpoint><con:request>{
  "id":-1,
  "account": ${#Global#createAccountAccountId},
  "accountName":"${#Global#createAccountAccountName}",
  "username":"readOnlyUserCreatedThroughAPI${#Global#currentTime}",
  "email": "blahblahblah@attensity.com",
  "password": "admin1",
  "updatePassword":true,
  "enabled": true,
  "accountType": 0,
  "brandName": "attensity",
    "userRole": {
      "roleName": "read_only"
    },
  "preferences": {
      "timeZoneString": "GMT-4",
      "timeZoneOffset": -14400000
  }
}</con:request><con:assertion type="Simple NotContains" name="notContainsAdminRole1"><con:configuration><token>view_account_reports</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" name="notContainsAdminRole2"><con:configuration><token>set_account_level_preferences</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" name="notContainsEditorRole1"><con:configuration><token>create_custom_entities</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" name="notContainsEditorRole2"><con:configuration><token>create_edit_topics</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" name="containsReadOnlyRole1"><con:configuration><token>share_data_dashboards</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" name="containsReadOnlyRole2"><con:configuration><token>export</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" name="containsReadOnlyRole3"><con:configuration><token>drill_down_article</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" name="containsReadOnlyRole4"><con:configuration><token>apply_filters</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="UserToken" value="${#Global#accountAuthKey}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="createUserResponseReadOnly"><con:settings/><con:config><script>import groovy.json.JsonSlurper
import com.eviware.soapui.impl.wsdl.teststeps.*

responseContent = testRunner.testCase.getTestStepByName("createUserReadOnly").getPropertyValue("response")
slurperresponse = new JsonSlurper().parseText(responseContent)

def id = (slurperresponse.id) as String
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "createUserReadOnlyUserId", id )
//log.info "User ID: " + id

def userName = (slurperresponse.username) as String
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "createUserReadOnlyUsername", userName )
//log.info "User Name: " + userName</script></con:config></con:testStep><con:testStep type="restrequest" name="createUserEditor"><con:settings/><con:config service="ARTSA - UserManager" resourcePath="/SaasCoreUserManager/rest/user" methodName="POST - update" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="createUserEditor" mediaType="application/json" postQueryString="false" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="utoken" value="-1820003979065125350--5455457267176897721--4016001549055387710-64" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://10.200.0.124:8080</con:endpoint><con:request>{
  "id":-1,
  "account": ${#Global#createAccountAccountId},
  "accountName":"${#Global#createAccountAccountName}",
  "username":"editorUserCreatedThroughAPI${#Global#currentTime}",
  "email": "blahblahblah@attensity.com",
  "password": "admin1",
  "updatePassword":true,
  "enabled": true,
  "accountType": 0,
  "brandName": "attensity",
    "userRole": {
      "roleName": "editor"
    },
  "preferences": {
      "timeZoneString": "GMT-4",
      "timeZoneOffset": -14400000
  }
}</con:request><con:assertion type="Simple NotContains" name="notContainsAdminRole1"><con:configuration><token>view_account_reports</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" name="notContainsAdminRole2"><con:configuration><token>set_account_level_preferences</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" name="containsEditorRole1"><con:configuration><token>create_custom_entities</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" name="containsEditorRole2"><con:configuration><token>create_edit_topics</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" name="containsReadOnlyRole1"><con:configuration><token>share_data_dashboards</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" name="containsReadOnlyRole2"><con:configuration><token>export</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" name="containsReadOnlyRole3"><con:configuration><token>drill_down_article</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" name="containsReadOnlyRole4"><con:configuration><token>apply_filters</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="UserToken" value="${#Global#accountAuthKey}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="createUserResponseEditor"><con:settings/><con:config><script>import groovy.json.JsonSlurper
import com.eviware.soapui.impl.wsdl.teststeps.*

responseContent = testRunner.testCase.getTestStepByName("createUserEditor").getPropertyValue("response")
slurperresponse = new JsonSlurper().parseText(responseContent)

def id = (slurperresponse.id) as String
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "createUserEditorUserId", id )
//log.info "User ID: " + id

def userName = (slurperresponse.username) as String
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "createUserEditorUsername", userName )
//log.info "User Name: " + userName</script></con:config></con:testStep><con:testStep type="restrequest" name="createUserAdmin"><con:settings/><con:config service="ARTSA - UserManager" resourcePath="/SaasCoreUserManager/rest/user" methodName="POST - update" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="createUserAdmin" mediaType="application/json" postQueryString="false" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="utoken" value="-1820003979065125350--5455457267176897721--4016001549055387710-64" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://10.200.0.124:8080</con:endpoint><con:request>{
  "id":-1,
  "account": ${#Global#createAccountAccountId},
  "accountName":"${#Global#createAccountAccountName}",
  "username":"adminUserCreatedThroughAPI${#Global#currentTime}",
  "email": "blahblahblah@attensity.com",
  "password": "admin1",
  "updatePassword":true,
  "enabled": true,
  "accountType": 0,
  "brandName": "attensity",
    "userRole": {
      "roleName": "admin"
    },
  "preferences": {
      "timeZoneString": "GMT-4",
      "timeZoneOffset": -14400000
  }
}</con:request><con:assertion type="Simple Contains" name="containsAdminRole1"><con:configuration><token>view_account_reports</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" name="containsAdminRole2"><con:configuration><token>set_account_level_preferences</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" name="containsEditorRole1"><con:configuration><token>create_custom_entities</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" name="containsEditorRole2"><con:configuration><token>create_edit_topics</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" name="containsReadOnlyRole1"><con:configuration><token>share_data_dashboards</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" name="containsReadOnlyRole2"><con:configuration><token>export</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" name="containsReadOnlyRole3"><con:configuration><token>drill_down_article</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" name="containsReadOnlyRole4"><con:configuration><token>apply_filters</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="UserToken" value="${#Global#accountAuthKey}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="createUserResponseAdmin"><con:settings/><con:config><script>import groovy.json.JsonSlurper
import com.eviware.soapui.impl.wsdl.teststeps.*

responseContent = testRunner.testCase.getTestStepByName("createUserAdmin").getPropertyValue("response")
slurperresponse = new JsonSlurper().parseText(responseContent)

def id = (slurperresponse.id) as String
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "createUserAdminUserId", id )
//log.info "User ID: " + id

def userName = (slurperresponse.username) as String
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "createUserAdminUsername", userName )
//log.info "User Name: " + userName</script></con:config></con:testStep><con:testStep type="restrequest" name="createUserProfessionalService"><con:settings/><con:config service="ARTSA - UserManager" resourcePath="/SaasCoreUserManager/rest/user" methodName="POST - update" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="createUserProfessionalService" mediaType="application/json" postQueryString="false" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="utoken" value="-1820003979065125350--5455457267176897721--4016001549055387710-64" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://10.200.0.124:8080</con:endpoint><con:request>{
  "id":-1,
  "account": ${#Global#createAccountAccountId},
  "accountName":"${#Global#createAccountAccountName}",
  "username":"psUserCreatedThroughAPI${#Global#currentTime}",
  "email": "blahblahblah@attensity.com",
  "password": "admin1",
  "updatePassword":true,
  "enabled": true,
  "accountType": 0,
  "brandName": "attensity",
    "userRole": {
      "roleName": "professional_service"
    },
  "preferences": {
      "timeZoneString": "GMT-4",
      "timeZoneOffset": -14400000
  }
}</con:request><con:assertion type="Simple Contains" name="containsAdminRole1"><con:configuration><token>view_account_reports</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" name="containsAdminRole2"><con:configuration><token>set_account_level_preferences</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" name="containsEditorRole1"><con:configuration><token>create_custom_entities</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" name="containsEditorRole2"><con:configuration><token>create_edit_topics</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" name="containsReadOnlyRole1"><con:configuration><token>share_data_dashboards</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" name="containsReadOnlyRole2"><con:configuration><token>export</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" name="containsReadOnlyRole3"><con:configuration><token>drill_down_article</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" name="containsReadOnlyRole4"><con:configuration><token>apply_filters</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="UserToken" value="${#Global#accountAuthKey}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="createUserResponseProfessionalService"><con:settings/><con:config><script>import groovy.json.JsonSlurper
import com.eviware.soapui.impl.wsdl.teststeps.*

responseContent = testRunner.testCase.getTestStepByName("createUserProfessionalService").getPropertyValue("response")
slurperresponse = new JsonSlurper().parseText(responseContent)

def id = (slurperresponse.id) as String
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "createUserProfessionalServiceUserId", id )
//log.info "User ID: " + id

def userName = (slurperresponse.username) as String
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "createUserProfessionalServiceUsername", userName )
//log.info "User Name: " + userName</script></con:config></con:testStep><con:properties/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="userUnique" searchProperties="true" id="9534145a-4011-4ebe-b4f9-c4fc34e5f22d" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword=""><con:description>TestCase generated for REST Resource [unique] located at [/user/unique]</con:description><con:settings/><con:testStep type="restrequest" name="authuser"><con:settings/><con:config service="ARTSA - UserManager" resourcePath="/SaasCoreUserManager/rest/auth" methodName="POST - authenticate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="authuser" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="authkey" value="-6182438897467552937-6799856262350202343--1888206223179694123-12" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://10.200.0.124:8080</con:endpoint><con:request>{
  "username":"${#Global#createUserUserName}",
  "password":"${#Global#original}",
  "accountName":"${#Global#createAccountAccountName}"
}</con:request><con:assertion type="XPath Match" name="XPath Match"><con:configuration><path>declare namespace soap='http://schemas.xmlsoap.org/soap/envelope/';
declare namespace ns1='http://10.200.0.124/SaasCoreUserManager/rest/auth';
//ns1:loginFailed</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="authResponse"><con:settings/><con:config><script>import groovy.json.JsonSlurper
import com.eviware.soapui.impl.wsdl.teststeps.*

responseContent = testRunner.testCase.getTestStepByName("authuser").getPropertyValue("response")
slurperresponse = new JsonSlurper().parseText(responseContent)

accountid = (slurperresponse.account)
def accountid = accountid as String
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "accountid", accountid )

accountname = (slurperresponse.accountName)
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "accountName", accountname )

authkey = (slurperresponse.authkey)
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "authkey", authkey )

userid = (slurperresponse.id)
def userid = userid as String
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "userid", userid )

username = (slurperresponse.username)
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "userName", username )

//log.info accountid
//log.info accountname
//log.info authkey
//log.info userid
//log.info username</script></con:config></con:testStep><con:testStep type="groovy" name="setutokenheader"><con:settings/><con:config><script>import com.eviware.soapui.impl.wsdl.teststeps.*
import com.eviware.soapui.support.types.StringToStringMap;

def authkey = com.eviware.soapui.SoapUI.globalProperties.getPropertyValue( "authkey")
def tc = testRunner.testCase.testSuite.getTestCaseByName("userUnique")
def ts1 =tc.getTestStepByName("uniqueUserNameFail")
def ts2 =tc.getTestStepByName("uniqueUserNamePass")

def headers = new StringToStringMap()
headers.putIfMissing("utoken",authkey)

ts1.getHttpRequest().setRequestHeaders(headers)
ts2.getHttpRequest().setRequestHeaders(headers)

//log.info ts5.getHttpRequest().getRequestHeaders()</script></con:config></con:testStep><con:testStep type="restrequest" name="uniqueUserNameFail"><con:settings/><con:config service="ARTSA - UserManager" resourcePath="/SaasCoreUserManager/rest/user/unique" methodName="POST - userIsUnique" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="uniqueUserNameFail" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="utoken" value="-1077551810117279698-6964397400084399626-806825128675574899-32" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://10.200.0.124:8080</con:endpoint><con:request>{
  "account":${#Global#accountid},
  "username":"${#Global#username}"
}</con:request><con:assertion type="XPath Match" name="XPath Match"><con:configuration><path>declare namespace soap='http://schemas.xmlsoap.org/soap/envelope/';
declare namespace ns1='http://10.200.0.124/SaasCoreUserManager/rest/user/unique';
//ns1:unique</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="UserToken" value="${#Global#authkey}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="uniqueUserNamePass"><con:settings/><con:config service="ARTSA - UserManager" resourcePath="/SaasCoreUserManager/rest/user/unique" methodName="POST - userIsUnique" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="uniqueUserNamePass" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="utoken" value="-1077551810117279698-6964397400084399626-806825128675574899-32" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://10.200.0.124:8080</con:endpoint><con:request>{
  "account":${#Global#accountid},
  "username":"blahblahblahblah1234567890"
}</con:request><con:assertion type="XPath Match" name="XPath Match"><con:configuration><path>declare namespace soap='http://schemas.xmlsoap.org/soap/envelope/';
declare namespace ns1='http://10.200.0.124/SaasCoreUserManager/rest/user/unique';
//ns1:unique</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="UserToken" value="${#Global#authkey}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:loadTest name="LoadTest 1"><con:settings><con:setting id="HttpSettings@close-connections">false</con:setting></con:settings><con:threadCount>5</con:threadCount><con:startDelay>0</con:startDelay><con:sampleInterval>250</con:sampleInterval><con:calculateTPSOnTimePassed>true</con:calculateTPSOnTimePassed><con:resetStatisticsOnThreadCountChange>true</con:resetStatisticsOnThreadCountChange><con:historyLimit>-1</con:historyLimit><con:testLimit>60</con:testLimit><con:limitType>TIME</con:limitType><con:loadStrategy><con:type>Simple</con:type></con:loadStrategy><con:assertion type="Step Status" name="Step Status"/><con:maxAssertionErrors>100</con:maxAssertionErrors><con:cancelExcessiveThreads>true</con:cancelExcessiveThreads><con:strategyInterval>500</con:strategyInterval></con:loadTest><con:properties/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="userUpdatePassword" searchProperties="true" id="58f70256-23a3-473a-926d-a1374ca8f8af" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword=""><con:description>TestCase generated for REST Resource [password] located at [/profile/password]</con:description><con:settings/><con:testStep type="restrequest" name="authuser"><con:settings/><con:config service="ARTSA - UserManager" resourcePath="/SaasCoreUserManager/rest/auth" methodName="POST - authenticate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="authuser" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="authkey" value="-6182438897467552937-6799856262350202343--1888206223179694123-12" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://10.200.0.124:8080</con:endpoint><con:request>{
  "username":"${#Global#createUserUserName}",
  "password":"${#Global#original}",
  "accountName":"${#Global#createAccountAccountName}"
}</con:request><con:assertion type="XPath Match" name="XPath Match"><con:configuration><path>declare namespace soap='http://schemas.xmlsoap.org/soap/envelope/';
declare namespace ns1='http://10.200.0.124/SaasCoreUserManager/rest/auth';
//ns1:loginFailed</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="authResponse"><con:settings/><con:config><script>import groovy.json.JsonSlurper
import com.eviware.soapui.impl.wsdl.teststeps.*

responseContent = testRunner.testCase.getTestStepByName("authuser").getPropertyValue("response")
slurperresponse = new JsonSlurper().parseText(responseContent)

accountid = (slurperresponse.account)
def accountid = accountid as String
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "accountid", accountid )

accountname = (slurperresponse.accountName)
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "accountName", accountname )

authkey = (slurperresponse.authkey)
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "authkey", authkey )

userid = (slurperresponse.id)
def userid = userid as String
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "userid", userid )

username = (slurperresponse.username)
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "userName", username )

//log.info accountid
//log.info accountname
//log.info authkey
//log.info userid
//log.info username</script></con:config></con:testStep><con:testStep type="groovy" name="setutokenheader"><con:settings/><con:config><script>import com.eviware.soapui.impl.wsdl.teststeps.*
import com.eviware.soapui.support.types.StringToStringMap;

def authkey = com.eviware.soapui.SoapUI.globalProperties.getPropertyValue( "authkey")
def tc = testRunner.testCase.testSuite.getTestCaseByName("userUpdatePassword")
def ts1 =tc.getTestStepByName("incorrectpassword")
def ts2 =tc.getTestStepByName("changepassword")
def ts3 =tc.getTestStepByName("updatepassword")
def ts4 =tc.getTestStepByName("shortpassword")
def ts5 =tc.getTestStepByName("notcomplexpassword")

def headers = new StringToStringMap()
headers.putIfMissing("utoken",authkey)

ts1.getHttpRequest().setRequestHeaders(headers)
ts2.getHttpRequest().setRequestHeaders(headers)
ts3.getHttpRequest().setRequestHeaders(headers)
ts4.getHttpRequest().setRequestHeaders(headers)
ts5.getHttpRequest().setRequestHeaders(headers)

//log.info ts5.getHttpRequest().getRequestHeaders()</script></con:config></con:testStep><con:testStep type="restrequest" name="incorrectpassword"><con:settings/><con:config service="ARTSA - UserManager" methodName="POST - updatePassword" resourcePath="/SaasCoreUserManager/rest/profile/password" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="incorrectpassword" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="utoken" value="3814118463344403204-7356183654196445798--8154815437624929225-32" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://10.200.0.124:8080</con:endpoint><con:request>{
  "username": ${#Global#username},
  "account": ${#Global#accountid},
  "id":${#Global#userid},
  "oldpassword": "${#Global#new}",
  "password": "${#Global#original}",
  "updatePassword":false
}</con:request><con:assertion type="Simple Contains" name="assert_incorrect_password"><con:configuration><token>IncorrectCurrentPassword</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="changepassword"><con:settings/><con:config service="ARTSA - UserManager" methodName="POST - updatePassword" resourcePath="/SaasCoreUserManager/rest/profile/password" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="changepassword" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="utoken" value="3814118463344403204-7356183654196445798--8154815437624929225-32" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://10.200.0.124:8080</con:endpoint><con:request>{
  "username": ${#Global#username},
  "account": ${#Global#accountid},
  "id":${#Global#userid},
  "oldpassword": "${#Global#original}",
  "password": "${#Global#new}",
  "updatePassword":false
}</con:request><con:assertion type="XPath Match" name="XPath Match"><con:configuration><path>declare namespace soap='http://schemas.xmlsoap.org/soap/envelope/';
declare namespace ns1='http://10.200.0.124/SaasCoreUserManager/rest/profile/password';
//ns1:loginFailed</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="updatepassword"><con:settings/><con:config service="ARTSA - UserManager" methodName="POST - updatePassword" resourcePath="/SaasCoreUserManager/rest/profile/password" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="updatepassword" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="utoken" value="3814118463344403204-7356183654196445798--8154815437624929225-32" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://10.200.0.124:8080</con:endpoint><con:request>{
  "username": ${#Global#username},
  "account": ${#Global#accountid},
  "id":${#Global#userid},
  "oldpassword": "${#Global#new}",
  "password": "${#Global#original}",
  "updatePassword":true
}</con:request><con:assertion type="XPath Match" name="assert_update_password"><con:configuration><path>declare namespace soap='http://schemas.xmlsoap.org/soap/envelope/';
declare namespace ns1='http://10.200.0.124/SaasCoreUserManager/rest/profile/password';
//ns1:loginFailed</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="shortpassword"><con:settings/><con:config service="ARTSA - UserManager" methodName="POST - updatePassword" resourcePath="/SaasCoreUserManager/rest/profile/password" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="shortpassword" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="utoken" value="3814118463344403204-7356183654196445798--8154815437624929225-32" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://10.200.0.124:8080</con:endpoint><con:request>{
  "username": ${#Global#username},
  "account": ${#Global#accountid},
  "id":${#Global#userid},
  "oldpassword": "${#Global#original}",
  "password": "${#Global#short}",
  "updatePassword":true
}</con:request><con:assertion type="Simple Contains" name="assert_short_password"><con:configuration><token>PASSWORD_TOO_SHORT</token><ignoreCase>true</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="notcomplexpassword"><con:settings/><con:config service="ARTSA - UserManager" methodName="POST - updatePassword" resourcePath="/SaasCoreUserManager/rest/profile/password" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="notcomplexpassword" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="utoken" value="3814118463344403204-7356183654196445798--8154815437624929225-32" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://10.200.0.124:8080</con:endpoint><con:request>{
  "username": ${#Global#username},
  "account": ${#Global#accountid},
  "id":${#Global#userid},
  "oldpassword": "${#Global#original}",
  "password": "${#Global#short}",
  "updatePassword":true
}</con:request><con:assertion type="Simple Contains" name="assert_not_complex_password"><con:configuration><token>PASSWORD_NOT_COMPLEX</token><ignoreCase>true</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:loadTest name="LoadTest 1"><con:settings><con:setting id="HttpSettings@close-connections">false</con:setting></con:settings><con:threadCount>5</con:threadCount><con:startDelay>0</con:startDelay><con:sampleInterval>250</con:sampleInterval><con:calculateTPSOnTimePassed>true</con:calculateTPSOnTimePassed><con:resetStatisticsOnThreadCountChange>true</con:resetStatisticsOnThreadCountChange><con:historyLimit>-1</con:historyLimit><con:testLimit>60</con:testLimit><con:limitType>TIME</con:limitType><con:loadStrategy><con:type>Simple</con:type></con:loadStrategy><con:assertion type="Step Status" name="Step Status"/><con:maxAssertionErrors>100</con:maxAssertionErrors><con:cancelExcessiveThreads>true</con:cancelExcessiveThreads><con:strategyInterval>500</con:strategyInterval></con:loadTest><con:properties/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="userUpdateEmail" searchProperties="true" id="4885fbf1-0eca-467d-a381-b7276f2b5122" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword=""><con:description>TestCase generated for REST Resource [profile] located at [/profile]</con:description><con:settings/><con:testStep type="restrequest" name="authuser"><con:settings/><con:config service="ARTSA - UserManager" resourcePath="/SaasCoreUserManager/rest/auth" methodName="POST - authenticate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="authuser" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="authkey" value="-6182438897467552937-6799856262350202343--1888206223179694123-12" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://10.200.0.124:8080</con:endpoint><con:request>{
  "username":"${#Global#createUserUserName}",
  "password":"${#Global#original}",
  "accountName":"${#Global#createAccountAccountName}"
}</con:request><con:assertion type="XPath Match" name="XPath Match"><con:configuration><path>declare namespace soap='http://schemas.xmlsoap.org/soap/envelope/';
declare namespace ns1='http://10.200.0.124/SaasCoreUserManager/rest/auth';
//ns1:loginFailed</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="authResponse"><con:settings/><con:config><script>import groovy.json.JsonSlurper
import com.eviware.soapui.impl.wsdl.teststeps.*

responseContent = testRunner.testCase.getTestStepByName("authuser").getPropertyValue("response")
slurperresponse = new JsonSlurper().parseText(responseContent)

accountid = (slurperresponse.account)
def accountid = accountid as String
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "accountid", accountid )

accountname = (slurperresponse.accountName)
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "accountName", accountname )

authkey = (slurperresponse.authkey)
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "authkey", authkey )

userid = (slurperresponse.id)
def userid = userid as String
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "userid", userid )

username = (slurperresponse.username)
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "userName", username )

//log.info accountid
//log.info accountname
//log.info authkey
//log.info userid
//log.info username</script></con:config></con:testStep><con:testStep type="groovy" name="setutokenheader"><con:settings/><con:config><script>import com.eviware.soapui.impl.wsdl.teststeps.*
import com.eviware.soapui.support.types.StringToStringMap;

def authkey = com.eviware.soapui.SoapUI.globalProperties.getPropertyValue( "authkey")
def tc = testRunner.testCase.testSuite.getTestCaseByName("userUpdateEmail")
def ts1 =tc.getTestStepByName("updateUserEmailFail")
def ts2 =tc.getTestStepByName("updateUserEmailPass")

def headers = new StringToStringMap()
headers.putIfMissing("utoken",authkey)

ts1.getHttpRequest().setRequestHeaders(headers)
ts2.getHttpRequest().setRequestHeaders(headers)

//log.info ts5.getHttpRequest().getRequestHeaders()</script></con:config></con:testStep><con:testStep type="restrequest" name="updateUserEmailFail"><con:settings/><con:config service="ARTSA - UserManager" resourcePath="/SaasCoreUserManager/rest/profile" methodName="POST - updateProfile" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="updateUserEmailFail" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="utoken" value="-225063482689075797-7893819951824853941-3899122548796182717-32" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://10.200.0.124:8080</con:endpoint><con:request>{
  "id":"${#Global#userid}",
  "email": "tmemmota.com"
}</con:request><con:assertion type="Simple Contains" name="Contains"><con:configuration><token>INVALID_EMAIL</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="updateUserEmailPass"><con:settings/><con:config service="ARTSA - UserManager" resourcePath="/SaasCoreUserManager/rest/profile" methodName="POST - updateProfile" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="updateUserEmailPass" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="utoken" value="-225063482689075797-7893819951824853941-3899122548796182717-32" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://10.200.0.124:8080</con:endpoint><con:request>{
  "id":"${#Global#userid}",
  "email": "tmemmoty@a.com"
}</con:request><con:assertion type="Simple Contains" name="Contains"><con:configuration><token>${#Global#userid}</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:loadTest name="LoadTest 1"><con:settings><con:setting id="HttpSettings@close-connections">false</con:setting></con:settings><con:threadCount>5</con:threadCount><con:startDelay>0</con:startDelay><con:sampleInterval>250</con:sampleInterval><con:calculateTPSOnTimePassed>true</con:calculateTPSOnTimePassed><con:resetStatisticsOnThreadCountChange>true</con:resetStatisticsOnThreadCountChange><con:historyLimit>-1</con:historyLimit><con:testLimit>60</con:testLimit><con:limitType>TIME</con:limitType><con:loadStrategy><con:type>Simple</con:type></con:loadStrategy><con:assertion type="Step Status" name="Step Status"/><con:maxAssertionErrors>100</con:maxAssertionErrors><con:cancelExcessiveThreads>true</con:cancelExcessiveThreads><con:strategyInterval>500</con:strategyInterval></con:loadTest><con:properties/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="userListUsername" searchProperties="true" id="21af94ef-18af-4f60-95d8-fbd2e7a77f19" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword=""><con:settings/><con:testStep type="restrequest" name="authuser"><con:settings/><con:config service="ARTSA - UserManager" resourcePath="/SaasCoreUserManager/rest/auth" methodName="POST - authenticate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="authuser" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="authkey" value="-6182438897467552937-6799856262350202343--1888206223179694123-12" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://10.200.0.124:8080</con:endpoint><con:request>{
  "username":"${#Global#createUserUserName}",
  "password":"${#Global#original}",
  "accountName":"${#Global#createAccountAccountName}"
}</con:request><con:assertion type="XPath Match" name="XPath Match"><con:configuration><path>declare namespace soap='http://schemas.xmlsoap.org/soap/envelope/';
declare namespace ns1='http://10.200.0.124/SaasCoreUserManager/rest/auth';
//ns1:loginFailed</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="authResponse"><con:settings/><con:config><script>import groovy.json.JsonSlurper
import com.eviware.soapui.impl.wsdl.teststeps.*

responseContent = testRunner.testCase.getTestStepByName("authuser").getPropertyValue("response")
slurperresponse = new JsonSlurper().parseText(responseContent)

accountid = (slurperresponse.account)
def accountid = accountid as String
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "accountid", accountid )

accountname = (slurperresponse.accountName)
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "accountName", accountname )

authkey = (slurperresponse.authkey)
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "authkey", authkey )

userid = (slurperresponse.id)
def userid = userid as String
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "userid", userid )

username = (slurperresponse.username)
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "userName", username )

//log.info accountid
//log.info accountname
//log.info authkey
//log.info userid
//log.info username</script></con:config></con:testStep><con:testStep type="groovy" name="setutokenheader"><con:settings/><con:config><script>import com.eviware.soapui.impl.wsdl.teststeps.*
import com.eviware.soapui.support.types.StringToStringMap;

def authkey = com.eviware.soapui.SoapUI.globalProperties.getPropertyValue( "authkey")
def tc = testRunner.testCase.testSuite.getTestCaseByName("userLIstUername")
def ts1 =tc.getTestStepByName("listUsername")


def headers = new StringToStringMap()
headers.putIfMissing("utoken",authkey)

ts1.getHttpRequest().setRequestHeaders(headers)

//log.info ts5.getHttpRequest().getRequestHeaders()</script></con:config></con:testStep><con:testStep type="restrequest" name="listUsername"><con:settings/><con:config service="ARTSA - UserManager" resourcePath="/SaasCoreUserManager/rest/user" methodName="GET - getAllUsersForAccountExceptCurrentUser" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="listUsername" mediaType="application/json" postQueryString="false" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="utoken" value="7868385742987184277-1375810677549761084--5363778542511557675-32" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://10.200.0.124:8080</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="UserToken" value="${#Global#accountAuthKey}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:properties/></con:testCase><con:properties/></con:testSuite><con:testSuite name="topicManagerTestSuite" disabled="true"><con:description>TestSuite generated for REST Service [ARTSA - Topic Manager]</con:description><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="topicCreate" searchProperties="true" id="0af9e08f-2eb8-41c6-8c25-72e07954d581"><con:description>TestCase generated for REST Resource [topic] located at [/topic]</con:description><con:settings/><con:testStep type="groovy" name="setTime"><con:settings/><con:config><script>Calendar sod = Calendar.instance
    sod.set(Calendar.AM_PM, 0)
    sod.set(Calendar.HOUR, 0)
    sod.set(Calendar.MINUTE, 0)
    sod.set(Calendar.SECOND, 0)
    sod.set(Calendar.MILLISECOND, 0)
start = sod.time 
sqlstart = start.format('MM-dd-yy HH:mm:ss')
//log.info "SQL Start Time:  " + sqlstart
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "querysqlstart", sqlstart )

Calendar eod = Calendar.instance
    eod.set(Calendar.AM_PM, 0)
    eod.set(Calendar.HOUR, 9)
    eod.set(Calendar.MINUTE, 59)
    eod.set(Calendar.SECOND, 59)
    eod.set(Calendar.MILLISECOND, 999)
end = eod.time 
sqlend = end.format('MM-dd-yy HH:mm:ss')
//log.info "SQL End Time:  " + sqlend
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "querysqlend", sqlend )

offset = sod.get(Calendar.ZONE_OFFSET) + sod.get(Calendar.DST_OFFSET) / (60 * 1000)

starttime = start.time
epochstart = starttime + offset
//log.info "Epoch Start Time:  " + epochstart
def epochstart = epochstart as String
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "queryepochstart", epochstart )
def timestampstart = epochstart as Long
Date tss = new Date(timestampstart)
//log.info "Time to select in local timezone:  "+ tss

endtime = end.time
epochend = endtime + offset
//log.info "Epoch End Time:  " + epochend
def epochend = epochend as String
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "queryepochend", epochend )
def timestampend = epochend as Long
Date tse = new Date(timestampend)
//log.info "Time to select in local timezone:  "+ tse

now = Calendar.instance
today = now.time
millis = today.time
//log.info "Current time in milli-seconds:  " + millis
def today = new Date (millis)
//log.info "Current Local Time:  "+ today
tf = today.format('MM dd yy HH mm ss')
//log.info "Current Local Time nicely formatted:  "+ tf
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "time", tf )
millis = today.time as String
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "currentTime", millis )

secondsInHour = 3600000
secondsInDay = 24*secondsInHour as Long
secondsInMonth = 30*secondsInDay as Long
expirationDate = starttime+secondsInMonth as String
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "expirationDate", expirationDate )</script></con:config></con:testStep><con:testStep type="restrequest" name="authuser"><con:settings/><con:config service="ARTSA - UserManager" resourcePath="/SaasCoreUserManager/rest/auth" methodName="POST - authenticate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="authuser" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="authkey" value="1189377229352574419-2213262129298445271-4936701685398756970-61" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://10.200.0.124:8080</con:endpoint><con:request>{
  "username":${#Global#username},
  "password":${#Global#original},
  "accountName":${#Global#accountname}
}</con:request><con:assertion type="XPath Match" name="XPath Match"><con:configuration><path>declare namespace soap='http://schemas.xmlsoap.org/soap/envelope/';
declare namespace ns1='http://10.200.0.124/SaasCoreUserManager/rest/auth';
//ns1:loginFailed</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="authResponse"><con:settings/><con:config><script>import groovy.json.JsonSlurper
import com.eviware.soapui.impl.wsdl.teststeps.*

responseContent = testRunner.testCase.getTestStepByName("authuser").getPropertyValue("response")
slurperresponse = new JsonSlurper().parseText(responseContent)

accountid = (slurperresponse.account)
def accountid = accountid as String
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "accountid", accountid )

accountname = (slurperresponse.accountName)
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "accountName", accountname )

authkey = (slurperresponse.authkey)
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "authkey", authkey )

userid = (slurperresponse.id)
def userid = userid as String
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "userid", userid )

username = (slurperresponse.username)
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "userName", username )

//log.info accountid
//log.info accountname
//log.info authkey
//log.info userid
//log.info username</script></con:config></con:testStep><con:testStep type="groovy" name="setutokenheader"><con:settings/><con:config><script>import com.eviware.soapui.impl.wsdl.teststeps.*
import com.eviware.soapui.support.types.StringToStringMap;

def authkey = com.eviware.soapui.SoapUI.globalProperties.getPropertyValue( "authkey")
def tc = testRunner.testCase.testSuite.getTestCaseByName("topicCreate")
def ts =tc.getTestStepByName("createTopic")

def headers = new StringToStringMap()
headers.putIfMissing("utoken",authkey)

ts.getHttpRequest().setRequestHeaders(headers)</script></con:config></con:testStep><con:testStep type="restrequest" name="createTopic"><con:settings/><con:config service="ARTSA - Topic Manager" methodName="POST - update" resourcePath="/SaasCoreTopicManager/rest/topic" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="createTopic" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="utoken" value="-3140439829876897077--1048861910136648358-1948859180015683323-12" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://10.200.0.124:8080</con:endpoint><con:request>{
    "id": -1,
    "name": "Topic create through API ${#Global#currentTime}",
    "jsonDefinition": {
        "includeAll": [
            {
                "extraction": "ENTITY",
                "type": "COMPANY",
                "text": "Apple",
                "alias": "Company"
            }
        ],
        "includeAny": [],
        "exclude": [],
        "exactPhrases": [],
        "other": [
            {
                "type": "lang",
                "values": [
                    "en"
                ]
            }
        ],
   "results":{}
    }
}</con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="createTopicResponse"><con:settings/><con:config><script>import groovy.json.JsonSlurper
import com.eviware.soapui.impl.wsdl.teststeps.*

responseContent = testRunner.testCase.getTestStepByName("createTopic").getPropertyValue("response")
slurperresponse = new JsonSlurper().parseText(responseContent)

def createdBy = (slurperresponse.createdBy) as String
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "createTopicTopicCreatedBy", createdBy )
//log.info "Topic Created By: " + createdBy

def createdDate = (slurperresponse.createdDate) as String
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "createTopicTopicCreatedDate", createdDate )
//log.info "Topic Created Date: " + createdDate

def id = (slurperresponse.id) as String
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "createTopicTopicId", id )
//log.info "Topic ID: " + id

def topicName = (slurperresponse.name) as String
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "createTopicTopicName", topicName )
//log.info "Topic Name: " + topicName

def luceneQuery = (slurperresponse.jsonDefinition.luceneQuery) as String
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "createTopicLuceneQuery", luceneQuery )
//log.info "Topic Lucene Query: " + luceneQuery</script></con:config></con:testStep><con:loadTest name="LoadTest 1"><con:settings><con:setting id="HttpSettings@close-connections">false</con:setting></con:settings><con:threadCount>5</con:threadCount><con:startDelay>0</con:startDelay><con:sampleInterval>250</con:sampleInterval><con:calculateTPSOnTimePassed>true</con:calculateTPSOnTimePassed><con:resetStatisticsOnThreadCountChange>true</con:resetStatisticsOnThreadCountChange><con:historyLimit>-1</con:historyLimit><con:testLimit>60</con:testLimit><con:limitType>TIME</con:limitType><con:loadStrategy><con:type>Simple</con:type></con:loadStrategy><con:assertion type="Step Status" name="Step Status"/><con:maxAssertionErrors>100</con:maxAssertionErrors><con:cancelExcessiveThreads>true</con:cancelExcessiveThreads><con:strategyInterval>500</con:strategyInterval></con:loadTest><con:properties/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="{id} TestCase" searchProperties="true" id="def0b82c-9298-44ff-ae0e-41ad7a8ec8d3"><con:description>TestCase generated for REST Resource [{id}] located at [/topic/{id}]</con:description><con:settings/><con:testStep type="restrequest" name="Request 1"><con:settings/><con:config service="ARTSA - Topic Manager" resourcePath="/SaasCoreTopicManager/rest/topic/{id}" methodName="PUT - updateWithPut" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Request 1" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://10.200.0.124:8080</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:loadTest name="LoadTest 1"><con:settings><con:setting id="HttpSettings@close-connections">false</con:setting></con:settings><con:threadCount>5</con:threadCount><con:startDelay>0</con:startDelay><con:sampleInterval>250</con:sampleInterval><con:calculateTPSOnTimePassed>true</con:calculateTPSOnTimePassed><con:resetStatisticsOnThreadCountChange>true</con:resetStatisticsOnThreadCountChange><con:historyLimit>-1</con:historyLimit><con:testLimit>60</con:testLimit><con:limitType>TIME</con:limitType><con:loadStrategy><con:type>Simple</con:type></con:loadStrategy><con:assertion type="Step Status" name="Step Status"/><con:maxAssertionErrors>100</con:maxAssertionErrors><con:cancelExcessiveThreads>true</con:cancelExcessiveThreads><con:strategyInterval>500</con:strategyInterval></con:loadTest><con:properties/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="/topicAudit/{id} TestCase" searchProperties="true" id="13e4e95f-79a4-49c3-a1ea-ed72b7c334b8"><con:description>TestCase generated for REST Resource [/topicAudit/{id}] located at [/topic/topicAudit/{id}]</con:description><con:settings/><con:testStep type="restrequest" name="Request 1"><con:settings/><con:config service="ARTSA - Topic Manager" resourcePath="/SaasCoreTopicManager/rest/topic/topicAudit/{id}" methodName="GET - getTopicAudits" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Request 1" mediaType="application/xml"><con:settings/><con:endpoint>http://10.200.0.124:8080</con:endpoint><con:request/><con:parameters/></con:restRequest></con:config></con:testStep><con:loadTest name="LoadTest 1"><con:settings><con:setting id="HttpSettings@close-connections">false</con:setting></con:settings><con:threadCount>5</con:threadCount><con:startDelay>0</con:startDelay><con:sampleInterval>250</con:sampleInterval><con:calculateTPSOnTimePassed>true</con:calculateTPSOnTimePassed><con:resetStatisticsOnThreadCountChange>true</con:resetStatisticsOnThreadCountChange><con:historyLimit>-1</con:historyLimit><con:testLimit>60</con:testLimit><con:limitType>TIME</con:limitType><con:loadStrategy><con:type>Simple</con:type></con:loadStrategy><con:assertion type="Step Status" name="Step Status"/><con:maxAssertionErrors>100</con:maxAssertionErrors><con:cancelExcessiveThreads>true</con:cancelExcessiveThreads><con:strategyInterval>500</con:strategyInterval></con:loadTest><con:properties/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="sanity TestCase" searchProperties="true" id="fb5b4498-0669-4d83-8766-1bf59e2da66b"><con:description>TestCase generated for REST Resource [sanity] located at [/topic/sanity]</con:description><con:settings/><con:testStep type="restrequest" name="Request 1"><con:settings/><con:config service="ARTSA - Topic Manager" resourcePath="/SaasCoreTopicManager/rest/topic/sanity" methodName="POST - topicSanityCheck" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Request 1" mediaType="application/json"><con:settings/><con:endpoint>http://10.200.0.124:8080</con:endpoint><con:request/><con:parameters/></con:restRequest></con:config></con:testStep><con:loadTest name="LoadTest 1"><con:settings><con:setting id="HttpSettings@close-connections">false</con:setting></con:settings><con:threadCount>5</con:threadCount><con:startDelay>0</con:startDelay><con:sampleInterval>250</con:sampleInterval><con:calculateTPSOnTimePassed>true</con:calculateTPSOnTimePassed><con:resetStatisticsOnThreadCountChange>true</con:resetStatisticsOnThreadCountChange><con:historyLimit>-1</con:historyLimit><con:testLimit>60</con:testLimit><con:limitType>TIME</con:limitType><con:loadStrategy><con:type>Simple</con:type></con:loadStrategy><con:assertion type="Step Status" name="Step Status"/><con:maxAssertionErrors>100</con:maxAssertionErrors><con:cancelExcessiveThreads>true</con:cancelExcessiveThreads><con:strategyInterval>500</con:strategyInterval></con:loadTest><con:properties/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="unique TestCase" searchProperties="true" id="e675699c-ec1a-4490-93c6-65e48ff67f65"><con:description>TestCase generated for REST Resource [unique] located at [/topic/unique]</con:description><con:settings/><con:testStep type="restrequest" name="Request 1"><con:settings/><con:config service="ARTSA - Topic Manager" resourcePath="/SaasCoreTopicManager/rest/topic/unique" methodName="POST - topicIsUnique" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Request 1" mediaType="application/json" postQueryString="false"><con:settings/><con:endpoint>http://10.200.0.124:8080</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Request 1 1"><con:settings/><con:config service="ARTSA - Topic Manager" resourcePath="/SaasCoreTopicManager/rest/topic/unique" methodName="OPTIONS - fixOptionsUnique" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Request 1 1" mediaType="application/xml"><con:settings/><con:endpoint>http://10.200.0.124:8080</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:loadTest name="LoadTest 1"><con:settings><con:setting id="HttpSettings@close-connections">false</con:setting></con:settings><con:threadCount>5</con:threadCount><con:startDelay>0</con:startDelay><con:sampleInterval>250</con:sampleInterval><con:calculateTPSOnTimePassed>true</con:calculateTPSOnTimePassed><con:resetStatisticsOnThreadCountChange>true</con:resetStatisticsOnThreadCountChange><con:historyLimit>-1</con:historyLimit><con:testLimit>60</con:testLimit><con:limitType>TIME</con:limitType><con:loadStrategy><con:type>Simple</con:type></con:loadStrategy><con:assertion type="Step Status" name="Step Status"/><con:maxAssertionErrors>100</con:maxAssertionErrors><con:cancelExcessiveThreads>true</con:cancelExcessiveThreads><con:strategyInterval>500</con:strategyInterval></con:loadTest><con:properties/></con:testCase><con:properties/></con:testSuite><con:testSuite name="Article Query TestSuite" disabled="true"><con:description>TestSuite generated for REST Service [ARTSA  - Article Query]</con:description><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="aggregate TestCase" searchProperties="true" id="347a949b-5052-4472-ada9-67d7f5ab6293" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" disabled="true"><con:description>TestCase generated for REST Resource [aggregate] located at [/query/aggregate]</con:description><con:settings/><con:testStep type="groovy" name="settime"><con:settings/><con:config><script>Calendar sod = Calendar.instance
    sod.set(Calendar.AM_PM, 0)
    sod.set(Calendar.HOUR, 0)
    sod.set(Calendar.MINUTE, 0)
    sod.set(Calendar.SECOND, 0)
    sod.set(Calendar.MILLISECOND, 0)
start = sod.time 
sqlstart = start.format('MM-dd-yy HH:mm:ss')
//log.info "SQL Start Time:  " + sqlstart
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "querysqlstart", sqlstart )

Calendar eod = Calendar.instance
    eod.set(Calendar.AM_PM, 0)
    eod.set(Calendar.HOUR, 9)
    eod.set(Calendar.MINUTE, 59)
    eod.set(Calendar.SECOND, 59)
    eod.set(Calendar.MILLISECOND, 999)
end = eod.time 
sqlend = end.format('MM-dd-yy HH:mm:ss')
//log.info "SQL End Time:  " + sqlend
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "querysqlend", sqlend )

offset = sod.get(Calendar.ZONE_OFFSET) + sod.get(Calendar.DST_OFFSET) / (60 * 1000)

starttime = start.time
epochstart = starttime + offset
//log.info "Epoch Start Time:  " + epochstart
def epochstart = epochstart as String
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "queryepochstart", epochstart )
def timestampstart = epochstart as Long
Date tss = new Date(timestampstart)
//log.info "Time to select in local timezone:  "+ tss

endtime = end.time
epochend = endtime + offset
//log.info "Epoch End Time:  " + epochend
def epochend = epochend as String
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "queryepochend", epochend )
def timestampend = epochend as Long
Date tse = new Date(timestampend)
//log.info "Time to select in local timezone:  "+ tse

now = Calendar.instance
today = now.time
millis = today.time
//log.info "Current time in milli-seconds:  " + millis
def today = new Date (millis)
//log.info "Current Local Time:  "+ today
tf = today.format('MM dd yy HH mm ss')
//log.info "Current Local Time nicely formatted:  "+ tf
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "time", tf )</script></con:config></con:testStep><con:testStep type="restrequest" name="authuser"><con:settings/><con:config service="ARTSA - UserManager" resourcePath="/SaasCoreUserManager/rest/auth" methodName="POST - authenticate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="authuser" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="authkey" value="1189377229352574419-2213262129298445271-4936701685398756970-61" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://10.200.0.124:8080</con:endpoint><con:request>{
  "username":${#Global#username},
  "password":${#Global#original},
  "accountName":${#Global#accountname}
}</con:request><con:assertion type="XPath Match" name="XPath Match"><con:configuration><path>declare namespace soap='http://schemas.xmlsoap.org/soap/envelope/';
declare namespace ns1='http://10.200.0.124/SaasCoreUserManager/rest/auth';
//ns1:loginFailed</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="authResponse"><con:settings/><con:config><script>import groovy.json.JsonSlurper
import com.eviware.soapui.impl.wsdl.teststeps.*

responseContent = testRunner.testCase.getTestStepByName("authuser").getPropertyValue("response")
slurperresponse = new JsonSlurper().parseText(responseContent)

accountid = (slurperresponse.account)
def accountid = accountid as String
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "accountid", accountid )

accountname = (slurperresponse.accountName)
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "accountName", accountname )

authkey = (slurperresponse.authkey)
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "authkey", authkey )

userid = (slurperresponse.id)
def userid = userid as String
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "userid", userid )

username = (slurperresponse.username)
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "userName", username )

//log.info accountid
//log.info accountname
//log.info authkey
//log.info userid
//log.info username</script></con:config></con:testStep><con:testStep type="groovy" name="setutokenheader"><con:settings/><con:config><script>import com.eviware.soapui.impl.wsdl.teststeps.*
import com.eviware.soapui.support.types.StringToStringMap;

def authkey = com.eviware.soapui.SoapUI.globalProperties.getPropertyValue( "authkey")
def tc = testRunner.testCase.testSuite.getTestCaseByName("aggregate TestCase")
def ts11 = tc.getTestStepByName("Summary011AuthorLocationState")
def ts12 = tc.getTestStepByName("Summary012AuthorLocationCountry")
def ts2 = tc.getTestStepByName("Summary02SentimentArticleLevel")
def ts3 = tc.getTestStepByName("Summary03TopEntities")
def ts4 = tc.getTestStepByName("Summary04TopPeople")
def ts5 = tc.getTestStepByName("Summary05TopHashtags")
def ts6 = tc.getTestStepByName("Summary06TopStateMentions")
def ts71 = tc.getTestStepByName("Summary071TopCategoriesLevel1")
def ts72 = tc.getTestStepByName("Summary072TopCategoriesLevel2")
def ts73 = tc.getTestStepByName("Summary073TopCategoriesLevel3")
def ts74 = tc.getTestStepByName("Summary074TopCategoriesLevel4")
def ts75 = tc.getTestStepByName("Summary075TopCategoriesLevel5")
def ts8 = tc.getTestStepByName("Summary08SentimentByEntity")
def ts81 = tc.getTestStepByName("Summary081SentimentByEntityNegative")
def ts82 = tc.getTestStepByName("Summary082SentimentByEntityPositive")
def ts9 = tc.getTestStepByName("Summary09TagCloud")
def ts101 = tc.getTestStepByName("Summary101Followers")
def ts102 = tc.getTestStepByName("Summary102Klout")
def ts103 = tc.getTestStepByName("Summary103Tweets")
def ts104 = tc.getTestStepByName("Summary104Other")

def headers = new StringToStringMap()
headers.putIfMissing("utoken",authkey)

ts11.getHttpRequest().setRequestHeaders(headers)
ts12.getHttpRequest().setRequestHeaders(headers)
ts2.getHttpRequest().setRequestHeaders(headers)
ts3.getHttpRequest().setRequestHeaders(headers)
ts4.getHttpRequest().setRequestHeaders(headers)
ts5.getHttpRequest().setRequestHeaders(headers)
ts6.getHttpRequest().setRequestHeaders(headers)
ts71.getHttpRequest().setRequestHeaders(headers)
ts72.getHttpRequest().setRequestHeaders(headers)
ts73.getHttpRequest().setRequestHeaders(headers)
ts74.getHttpRequest().setRequestHeaders(headers)
ts75.getHttpRequest().setRequestHeaders(headers)
ts8.getHttpRequest().setRequestHeaders(headers)
ts81.getHttpRequest().setRequestHeaders(headers)
ts82.getHttpRequest().setRequestHeaders(headers)
ts9.getHttpRequest().setRequestHeaders(headers)
ts101.getHttpRequest().setRequestHeaders(headers)
ts102.getHttpRequest().setRequestHeaders(headers)
ts103.getHttpRequest().setRequestHeaders(headers)
ts104.getHttpRequest().setRequestHeaders(headers)</script></con:config></con:testStep><con:testStep type="groovy" name="initialize_jdbc_driver"><con:settings/><con:config><script>com.eviware.soapui.support.GroovyUtils.registerJdbcDriver("vertica.jdbc.driver.vertica")</script></con:config></con:testStep><con:testStep type="restrequest" name="Summary011AuthorLocationState"><con:settings/><con:config service="ARTSA  - Article Query" resourcePath="/ArticleQueryApi/rest/query/aggregate" methodName="POST - getAggregateData" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Summary011AuthorLocationState" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="utoken" value="592423282898117332-6555896638205456861--1342692733501113202-12" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://10.200.0.124:8080</con:endpoint><con:request>{
  "topicIDs":[${#Global#topicid}],
  "limit":"100",
  "selectedFields":[
        {"field":"content_volume()","sortDirection":"DESCENDING"},
        {"field":"author_state"}
        //{"field":"article_topic"}
  ],
  "filters":[
      {"field":"author_country","comparison":EQ,"values":["us"]}    
  ],
  "dateRange":{"startDate":${#Global#queryepochstart},"endDate":${#Global#queryepochend}}
}</con:request><con:assertion type="XPath Match" name="assert_author_state"><con:configuration><path>declare namespace soap='http://schemas.xmlsoap.org/soap/envelope/';
declare namespace ns1='http://10.200.0.124/ArticleQueryApi/rest/query/aggregate';
//ns1:author_state</path><content>*</content><allowWildcards>true</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="jdbc" name="SummaryAuthorLocationStateVertica"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>com.vertica.Driver</con:driver><con:connectionString>jdbc:vertica://10.200.0.190:5433/artsa01?user=artsa01&amp;password=artsa2</con:connectionString><con:query>SELECT fa.author_state, COUNT(DISTINCT fa.id) content_volume
FROM fact_article fa
INNER JOIN (
	SELECT pipeline_topic_id, article_id, publish_at, publish_at_week
	FROM topic_article ta
	WHERE pipeline_topic_id IN (${#Global#topicid})
	AND ta.publish_at BETWEEN '${#Global#querysqlstart}' AND '${#Global#querysqlend}'
	  ) ta  ON ta.article_id=fa.id
AND ta.publish_at_week=fa.publish_at_week
WHERE  ta.pipeline_topic_id IN (${#Global#topicid})
AND fa.author_country IN ('us')
GROUP BY fa.author_state
ORDER BY COUNT(DISTINCT fa.id) DESC, fa.author_state ASC  limit 100</con:query><con:properties/></con:config></con:testStep><con:testStep type="groovy" name="compareResultsAuthorLocationState"><con:settings/><con:config><script>// create groovyUtils and XmlHolder for response of Request
def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
def alert = com.eviware.soapui.support.UISupport;
def response1 = context.expand( 'SummaryAuthorLocationStateVertica#ResponseAsXml' )
def response2 = context.expand( '${Summary011AuthorLocationState#ResponseAsXml}' )
def holder1 = groovyUtils.getXmlHolder(response1)
def holder2 = groovyUtils.getXmlHolder(response2)

def jdbcStringList = []
def restStringList = []
def x = 0 as int
def y = 0 as int

// loop item nodes in response message
for( jdbcResults in holder1.getNodeValues( '//FACT_ARTICLE.AUTHOR_STATE, //CONTENT_VOLUME' ))
{  
  //log.info 'Item : [$jdbcResults]'
  jdbcStringList = jdbcStringList + jdbcResults
}

holder2.namespaces['ns'] = 'http://10.200.0.124/ArticleQueryApi/rest/query/aggregate'
for( restResponse in holder2.getNodeValues( '//ns:results/ns:e/ns:author_state, //ns:results/ns:e/ns:content_volume'  ))
{
  //log.info 'Item : [$restResponse]' 
  restStringList = restStringList + restResponse
    if (restResponse in jdbcStringList ) assert true
    else {
    	   //alert.showInfoMessage(jdbcStringList[x] + " counts do not match","soapUI Warning !")
    	   //log.info 'Results from vertica do not match results from articleQueryApi '+ jdbcStringList[x] + " " + restResponse
    	   log.info 'Entity : ' + jdbcStringList[x]
        log.info 'Vertica: '+ jdbcStringList[y] + " HBase: " + restResponse
        verticount = jdbcStringList[y] as Integer
        hbasecount = restResponse as Integer
        //log.info verticount
        //log.info hbasecount
       if (verticount &lt; hbasecount)
          {
             f = ((1 - (verticount/hbasecount)) * 100 )
             f = f.abs()
             log.info 'Difference of: ' + new Double(f).round(2) + '%'
             log.info 'Vertica count is less than HBase count'
          }
          else
             {
                f = ((1 - (hbasecount/verticount)) * 100 )
                f = f.abs()
                log.info 'Difference of: ' + new Double(f).round(2) + '%'
                log.info 'HBase count is less than Vertica count'
             }
       if (f &lt; 2)
          {
             log.info 'PASS'
          }
          else
             {
                log.info 'FAIL'
                testRunner.fail('Difference greater than 2%')
             }

    x = x + 1
    
    }
    y = y + 1
}

//log.info "request  : >" + jdbcStringList
//log.info "result     : >" + restStringList</script></con:config></con:testStep><con:testStep type="restrequest" name="Summary012AuthorLocationCountry"><con:settings/><con:config service="ARTSA  - Article Query" resourcePath="/ArticleQueryApi/rest/query/aggregate" methodName="POST - getAggregateData" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Summary012AuthorLocationCountry" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="utoken" value="592423282898117332-6555896638205456861--1342692733501113202-12" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://10.200.0.124:8080</con:endpoint><con:request>{
  "topicIDs":[${#Global#topicid}],
  //"limit":"20",
  "selectedFields":[
        {"field":"author_country"},
        {"field":"content_volume()","sortDirection":"DESCENDING"}
        //{"field":"combined_topics"}
  ],
  "filters":[
      //{"field":"author_country","comparison":"NE","values":["us"]}
  ],
  "dateRange":{"startDate":${#Global#queryepochstart},"endDate":${#Global#queryepochend}}
}</con:request><con:assertion type="XPath Match" name="assert_author_country"><con:configuration><path>declare namespace soap='http://schemas.xmlsoap.org/soap/envelope/';
declare namespace ns1='http://10.200.0.124/ArticleQueryApi/rest/query/aggregate';
//ns1:author_country</path><content>*</content><allowWildcards>true</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="jdbc" name="SummaryAuthorLocationCountryVertica"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>com.vertica.Driver</con:driver><con:connectionString>jdbc:vertica://10.200.0.190:5433/artsa01?user=artsa01&amp;password=artsa2</con:connectionString><con:query>SELECT fa.author_country, COUNT(DISTINCT fa.id) content_volume
FROM fact_article fa
INNER JOIN (
	SELECT pipeline_topic_id, article_id, publish_at, publish_at_week
	FROM topic_article ta
	WHERE pipeline_topic_id IN (${#Global#topicid})
	AND ta.publish_at BETWEEN '${#Global#querysqlstart}' AND '${#Global#querysqlend}'
	  ) ta  ON ta.article_id=fa.id
AND ta.publish_at_week=fa.publish_at_week
WHERE  ta.pipeline_topic_id IN (${#Global#topicid})
GROUP BY fa.author_country
ORDER BY COUNT(DISTINCT fa.id) DESC, fa.author_country ASC  limit 100</con:query><con:properties/></con:config></con:testStep><con:testStep type="groovy" name="compareResultsAuthorLocationCountry"><con:settings/><con:config><script>// create groovyUtils and XmlHolder for response of Request
def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
def alert = com.eviware.soapui.support.UISupport;
def response1 = context.expand( 'SummaryAuthorLocationCountryVertica#ResponseAsXml' )
def response2 = context.expand( '${Summary012AuthorLocationCountry#ResponseAsXml}' )
def holder1 = groovyUtils.getXmlHolder(response1)
def holder2 = groovyUtils.getXmlHolder(response2)

def jdbcStringList = []
def restStringList = []
def x = 0 as int
def y = 0 as int
def fail = 0 as int

// loop item nodes in response message
for( jdbcResults in holder1.getNodeValues( '//FACT_ARTICLE.AUTHOR_COUNTRY, //CONTENT_VOLUME' ))
{  
  //log.info 'Item : [$jdbcResults]'
  jdbcStringList = jdbcStringList + jdbcResults
}

holder2.namespaces['ns'] = 'http://10.200.0.124/ArticleQueryApi/rest/query/aggregate'
for( restResponse in holder2.getNodeValues( '//ns:results/ns:e/ns:author_country, //ns:results/ns:e/ns:content_volume'  ))
{
  //log.info 'Item : ' + restResponse
  restStringList = restStringList + restResponse
    if (restResponse in jdbcStringList ) assert true
   else {
    	   //alert.showInfoMessage(jdbcStringList[x] + " counts do not match","soapUI Warning !")
    	   //log.info 'Results from vertica do not match results from articleQueryApi '+ jdbcStringList[x] + " " + restResponse
    	   log.info 'Entity : ' + jdbcStringList[x]
        log.info 'Vertica: '+ jdbcStringList[y] + " HBase: " + restResponse
        verticount = jdbcStringList[y] as Integer
        hbasecount = restResponse as Integer
        //log.info verticount
        //log.info hbasecount
       if (verticount &lt; hbasecount)
          {
             f = ((1 - (verticount/hbasecount)) * 100 )
             f = f.abs()
             log.info 'Difference of: ' + new Double(f).round(2) + '%'
             log.info 'Vertica count is less than HBase count'
          }
          else
             {
                f = ((1 - (hbasecount/verticount)) * 100 )
                f = f.abs()
                log.info 'Difference of: ' + new Double(f).round(2) + '%'
                log.info 'HBase count is less than Vertica count'
             }
       if (f &lt; 2 )
          {
             log.info 'PASS'
          }
          else
             {
                log.info 'FAILED: Percentage is > 2%'
                fail = fail + 1
             }

    x = x + 1
    
    }
    y = y + 1
}
log.info "Fail count = " + fail
log.info "request  : >" + jdbcStringList
log.info "result     : >" + restStringList
if (fail>0)
    {
       assert false : "Percentage is greater than 2%"
    }</script></con:config></con:testStep><con:testStep type="restrequest" name="Summary02SentimentArticleLevel"><con:settings/><con:config service="ARTSA  - Article Query" resourcePath="/ArticleQueryApi/rest/query/aggregate" methodName="POST - getAggregateData" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Summary02SentimentArticleLevel" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="utoken" value="592423282898117332-6555896638205456861--1342692733501113202-12" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://10.200.0.124:8080</con:endpoint><con:request>{
  "topicIDs":[${#Global#topicid}],
  //"limit":"20",
  "selectedFields":[
        {"field":"article_sentiment","sortDirection":"DESCENDING"},
   		{"field":"content_volume()"}
        //{"field":"combined_topics"}
  ],
  "filters":[
      //{"field":"article_sentiment","comparison":"EQ","values":["MIXED","NEGATIVE","NEUTRAL","POSITIVE"]}
      //{"field":"article_content_subtype","comparison":"EQ","values":["twitter"]}
  ],
  "dateRange":{"startDate":${#Global#queryepochstart},"endDate":${#Global#queryepochend}}
}</con:request><con:assertion type="XPath Match" name="assert_article_sentiment"><con:configuration><path>declare namespace soap='http://schemas.xmlsoap.org/soap/envelope/';
declare namespace ns1='http://10.200.0.124/ArticleQueryApi/rest/query/aggregate';
//ns1:article_sentiment</path><content>*</content><allowWildcards>true</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="jdbc" name="SummarySentimentArticleLevelVertica"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>com.vertica.Driver</con:driver><con:connectionString>jdbc:vertica://10.200.0.190:5433/artsa01?user=artsa01&amp;password=artsa2</con:connectionString><con:query>SELECT fa.sentiment, COUNT(DISTINCT fa.id) content_volume
FROM fact_article fa
INNER JOIN (
	SELECT pipeline_topic_id, article_id, publish_at, publish_at_week
	FROM topic_article ta
	WHERE pipeline_topic_id IN (${#Global#topicid})
	AND ta.publish_at BETWEEN '${#Global#querysqlstart}' AND '${#Global#querysqlend}'
	  ) ta  ON ta.article_id=fa.id
AND ta.publish_at_week=fa.publish_at_week
WHERE  ta.pipeline_topic_id IN (${#Global#topicid})
GROUP BY fa.sentiment
ORDER BY COUNT(DISTINCT fa.id) DESC</con:query><con:properties/></con:config></con:testStep><con:testStep type="groovy" name="compareResultsSentimentByArticleLevel"><con:settings/><con:config><script>// create groovyUtils and XmlHolder for response of Request
def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
def alert = com.eviware.soapui.support.UISupport;
def response1 = context.expand( 'SummarySentimentArticleLevelVertica#ResponseAsXml' )
def response2 = context.expand( '${Summary02SentimentArticleLevel#ResponseAsXml}' )
def holder1 = groovyUtils.getXmlHolder(response1)
def holder2 = groovyUtils.getXmlHolder(response2)

def jdbcStringList = []
def restStringList = []
def x = 0 as int
def y = 0 as int
def fail = 0 as int

// loop item nodes in response message
for( jdbcResults in holder1.getNodeValues( '//FACT_ARTICLE.SENTIMENT, //CONTENT_VOLUME' ))
{  
  //log.info 'Item : [$jdbcResults]'
  jdbcStringList = jdbcStringList + jdbcResults
}

holder2.namespaces['ns'] = 'http://10.200.0.124/ArticleQueryApi/rest/query/aggregate'
for( restResponse in holder2.getNodeValues( '//ns:results/ns:e/ns:article_sentiment, //ns:results/ns:e/ns:content_volume'  ))
{
  //log.info 'Item : ' + restResponse
  restStringList = restStringList + restResponse
    if (restResponse in jdbcStringList ) assert true
    else {
    	   //alert.showInfoMessage(jdbcStringList[x] + " counts do not match","soapUI Warning !")
    	   //log.info 'Results from vertica do not match results from articleQueryApi '+ jdbcStringList[x] + " " + restResponse
    	   log.info 'Entity : ' + jdbcStringList[x]
        log.info 'Vertica: '+ jdbcStringList[y] + " HBase: " + restResponse
        verticount = jdbcStringList[y] as Integer
        hbasecount = restResponse as Integer
        //log.info verticount
        //log.info hbasecount
       if (verticount &lt; hbasecount)
          {
             f = ((1 - (verticount/hbasecount)) * 100 )
             f = f.abs()
             log.info 'Difference of: ' + new Double(f).round(2) + '%'
             log.info 'Vertica count is less than HBase count'
          }
          else
             {
                f = ((1 - (hbasecount/verticount)) * 100 )
                f = f.abs()
                log.info 'Difference of: ' + new Double(f).round(2) + '%'
                log.info 'HBase count is less than Vertica count'
             }
       if (f &lt; 2 )
          {
             log.info 'PASS'
          }
          else
             {
                log.info 'FAILED: Percentage is > 2%'
                fail = fail + 1
             }

    x = x + 1
    
    }
    y = y + 1
}
log.info "Fail count = " + fail
log.info "request  : >" + jdbcStringList
log.info "result     : >" + restStringList
if (fail>0)
    {
       assert false : "Percentage is greater than 2%"
    }</script></con:config></con:testStep><con:testStep type="restrequest" name="Summary03TopEntities"><con:settings/><con:config service="ARTSA  - Article Query" resourcePath="/ArticleQueryApi/rest/query/aggregate" methodName="POST - getAggregateData" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Summary03TopEntities" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="utoken" value="592423282898117332-6555896638205456861--1342692733501113202-12" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://10.200.0.124:8080</con:endpoint><con:request>{
  "topicIDs":[${#Global#topicid}],
  "limit":10,
  "selectedFields":[
        {"field":"entity_type","sortDirection":"ASCENDING"},
   		{"field":"content_volume()","sortDirection":"DESCENDING"}
        //{"field":"combined_topics"}
  ],
  "filters":[
      //{'field':'entity_type','comparison':'EQ','values':['@USERNAME','HASHTAG','PERSON','AMBIGUOUS_ICON','POSITIVE_ICON']}
  ],
  "dateRange":{"startDate":${#Global#queryepochstart},"endDate":${#Global#queryepochend}}
}</con:request><con:assertion type="XPath Match" name="assert_entity_type"><con:configuration><path>declare namespace soap='http://schemas.xmlsoap.org/soap/envelope/';
declare namespace ns1='http://10.200.0.124/ArticleQueryApi/rest/query/aggregate';
//ns1:entity_type</path><content>*</content><allowWildcards>true</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="jdbc" name="SummaryTopEntitiesVertica"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>com.vertica.Driver</con:driver><con:connectionString>jdbc:vertica://10.200.0.190:5433/artsa01?user=artsa01&amp;password=artsa2</con:connectionString><con:query>SELECT en.level1,COUNT(DISTINCT ta.article_id) content_volume
FROM (
	SELECT pipeline_topic_id, article_id, publish_at, publish_at_week
	FROM topic_article ta
	WHERE pipeline_topic_id IN (${#Global#topicid})
	AND ta.publish_at BETWEEN '${#Global#querysqlstart}' AND '${#Global#querysqlend}'
	 ) ta
INNER JOIN multi_level_annotation en on en.article_id=ta.article_id
AND en.type='entity'
WHERE  ta.pipeline_topic_id IN (${#Global#topicid})
AND en.account IN (0,${#Global#accountid})
GROUP BY en.level1
ORDER BY COUNT(DISTINCT ta.article_id) DESC, en.level1 ASC  limit 10</con:query><con:properties/></con:config></con:testStep><con:testStep type="groovy" name="compareResultsTopEntities"><con:settings/><con:config><script>// create groovyUtils and XmlHolder for response of Request
def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
def alert = com.eviware.soapui.support.UISupport;
def response1 = context.expand( 'SummaryTopEntitiesVertica#ResponseAsXml' )
def response2 = context.expand( '${Summary03TopEntities#ResponseAsXml}' )
def holder1 = groovyUtils.getXmlHolder(response1)
def holder2 = groovyUtils.getXmlHolder(response2)

def jdbcStringList = []
def restStringList = []
def x = 0 as int
def y = 0 as int
def fail = 0 as int

// loop item nodes in response message
for( jdbcResults in holder1.getNodeValues( '//MULTI_LEVEL_ANNOTATION.LEVEL1, //CONTENT_VOLUME' ))
{  
  jdbcStringList = jdbcStringList + jdbcResults
}
//log.info jdbcStringList.size()
holder2.namespaces['ns'] = 'http://10.200.0.124/ArticleQueryApi/rest/query/aggregate'
for( restResponse in holder2.getNodeValues( '//ns:results/ns:e/ns:entity_type, //ns:results/ns:e/ns:content_volume'  ))
{
  restStringList = restStringList + restResponse
    if (restResponse in jdbcStringList ) assert true : "Pass"
    else {
    	   //alert.showInfoMessage(jdbcStringList[x] + " counts do not match","soapUI Warning !")
    	   //log.info 'Results from vertica do not match results from articleQueryApi '+ jdbcStringList[x] + " " + restResponse
    	   log.info 'Entity : ' + jdbcStringList[x]
        log.info 'Vertica: '+ jdbcStringList[y] + " HBase: " + restResponse
        verticount = jdbcStringList[y] as Integer
        hbasecount = restResponse as Integer
        //log.info verticount
        //log.info hbasecount
       if (verticount &lt; hbasecount)
          {
             f = ((1 - (verticount/hbasecount)) * 100 )
             f = f.abs()
             log.info 'Difference of: ' + new Double(f).round(2) + '%'
             log.info 'Vertica count is less than HBase count'
          }
          else
             {
                f = ((1 - (hbasecount/verticount)) * 100 )
                f = f.abs()
                log.info 'Difference of: ' + new Double(f).round(2) + '%'
                log.info 'HBase count is less than Vertica count'
             }
       if (f &lt; 2 )
          {
             log.info 'PASS'
          }
          else
             {
                log.info 'FAILED: Percentage is > 2%'
                fail = fail + 1
             }

    x = x + 1
    
    }
    y = y + 1
}
log.info "Fail count = " + fail
log.info "request  : >" + jdbcStringList
log.info "result     : >" + restStringList
if (fail>0)
    {
       assert false : "Percentage is greater than 2%"
    }</script></con:config></con:testStep><con:testStep type="restrequest" name="Summary04TopPeople"><con:settings/><con:config service="ARTSA  - Article Query" resourcePath="/ArticleQueryApi/rest/query/aggregate" methodName="POST - getAggregateData" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Summary04TopPeople" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="utoken" value="592423282898117332-6555896638205456861--1342692733501113202-12" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://10.200.0.124:8080</con:endpoint><con:request>{
  "topicIDs":[${#Global#topicid}],
  "limit":25,
  "selectedFields":[
        {"field":"content_volume()","sortDirection":"DESCENDING"},
        {"field":"entity_value","sortDirection":"ASCENDING"}
        //{"field":"combined_topics"}
  ],
  "filters":[
      //{"field":"entity_value","comparison":"EQ","values":["alex","daniel","doe","josh","lady gaga","paul"]},
      {"field":"entity_type","comparison":"EQ","values":["PERSON"]}
      
  ],
  "dateRange":{"startDate":${#Global#queryepochstart},"endDate":${#Global#queryepochend}}
}</con:request><con:assertion type="XPath Match" name="assert_entity_type_person"><con:configuration><path>declare namespace soap='http://schemas.xmlsoap.org/soap/envelope/';
declare namespace ns1='http://10.200.0.124/ArticleQueryApi/rest/query/aggregate';
//ns1:entity_type</path><content>PERSON</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="jdbc" name="SummaryTopPeopleVertica"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>com.vertica.Driver</con:driver><con:connectionString>jdbc:vertica://10.200.0.190:5433/artsa01?user=artsa01&amp;password=artsa2</con:connectionString><con:query>SELECT en.value,COUNT(DISTINCT ta.article_id) content_volume
FROM (
	SELECT pipeline_topic_id, article_id, publish_at, publish_at_week
	FROM topic_article ta
	WHERE pipeline_topic_id IN (${#Global#topicid})
	AND ta.publish_at BETWEEN '${#Global#querysqlstart}' AND '${#Global#querysqlend}'
	 ) ta
INNER JOIN multi_level_annotation en on en.article_id=ta.article_id
AND en.type='entity'
WHERE  ta.pipeline_topic_id IN (${#Global#topicid})
AND en.account IN (0,${#Global#accountid})
AND en.level1 = 'PERSON'
GROUP BY en.value
ORDER BY COUNT(DISTINCT ta.article_id) DESC, en.value ASC  limit 25</con:query><con:properties/></con:config></con:testStep><con:testStep type="groovy" name="compareResultsTopPeople"><con:settings/><con:config><script>// create groovyUtils and XmlHolder for response of Request
def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
def alert = com.eviware.soapui.support.UISupport;
def response1 = context.expand( 'SummaryTopPeopleVertica#ResponseAsXml' )
def response2 = context.expand( '${Summary04TopPeople#ResponseAsXml}' )
def holder1 = groovyUtils.getXmlHolder(response1)
def holder2 = groovyUtils.getXmlHolder(response2)

def jdbcStringList = []
def restStringList = []
def x = 0 as int
def y = 0 as int

// loop item nodes in response message
for( jdbcResults in holder1.getNodeValues( '//MULTI_LEVEL_ANNOTATION.VALUE, //CONTENT_VOLUME' ))
{  
  //log.info 'Item : [$jdbcResults]'
  jdbcStringList = jdbcStringList + jdbcResults
}

holder2.namespaces['ns'] = 'http://10.200.0.124/ArticleQueryApi/rest/query/aggregate'
for( restResponse in holder2.getNodeValues( '//ns:results/ns:e/ns:entity_value, //ns:results/ns:e/ns:content_volume'  ))
{
  //log.info 'Item : [$restResponse]' 
  restStringList = restStringList + restResponse
    if (restResponse in jdbcStringList ) assert true
    else {
    	   //alert.showInfoMessage(jdbcStringList[x] + " counts do not match","soapUI Warning !")
    	   //log.info 'Results from vertica do not match results from articleQueryApi '+ jdbcStringList[x] + " " + restResponse
    	   log.info 'Entity : ' + jdbcStringList[x]
        log.info 'Vertica: '+ jdbcStringList[y] + " HBase: " + restResponse
        verticount = jdbcStringList[y] as Integer
        hbasecount = restResponse as Integer
        //log.info verticount
        //log.info hbasecount
       if (verticount &lt; hbasecount)
          {
             f = ((1 - (verticount/hbasecount)) * 100 )
             f = f.abs()
             log.info 'Difference of: ' + new Double(f).round(2) + '%'
             log.info 'Vertica count is less than HBase count'
          }
          else
             {
                f = ((1 - (hbasecount/verticount)) * 100 )
                f = f.abs()
                log.info 'Difference of: ' + new Double(f).round(2) + '%'
                log.info 'HBase count is less than Vertica count'
             }
       if (f &lt; 2)
          {
             log.info 'PASS'
          }
          else
             {
                log.info 'FAILED: Percentage is > 2%'
             }
       if (f > 2 ) assert false : "Percentage is greater than 2%"

    x = x + 1
    
    }
    y = y + 1
}

log.info "request  : >" + jdbcStringList
log.info "result     : >" + restStringList</script></con:config></con:testStep><con:testStep type="restrequest" name="Summary05TopHashtags"><con:settings/><con:config service="ARTSA  - Article Query" resourcePath="/ArticleQueryApi/rest/query/aggregate" methodName="POST - getAggregateData" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Summary05TopHashtags" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="utoken" value="592423282898117332-6555896638205456861--1342692733501113202-12" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://10.200.0.124:8080</con:endpoint><con:request>{
  "topicIDs":[${#Global#topicid}],
  "limit":25,
  "selectedFields":[
   	   {"field":"content_volume()","sortDirection":"DESCENDING"},
   	   {"field":"entity_value","sortDirection":"ASCENDING"}
        //{"field":"combined_topics"}
  ],
  "filters":[
      //{"field":"entity_value","comparison":"EQ","values":["#followella","#igetannoyedwhenpeople","#mamamaliksfirstfollowspree","#path","#thepersonalnetwork"]},
      {"field":"entity_type","comparison":"EQ","values":["HASHTAG"]}
    
  ],
  "dateRange":{"startDate":${#Global#queryepochstart},"endDate":${#Global#queryepochend}}
}</con:request><con:assertion type="XPath Match" name="assert_entity_type_hashtag"><con:configuration><path>declare namespace soap='http://schemas.xmlsoap.org/soap/envelope/';
declare namespace ns1='http://10.200.0.124/ArticleQueryApi/rest/query/aggregate';
//ns1:entity_type</path><content>HASHTAG</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="jdbc" name="SummaryTopHashtagsVertica"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>com.vertica.Driver</con:driver><con:connectionString>jdbc:vertica://10.200.0.190:5433/artsa01?user=artsa01&amp;password=artsa2</con:connectionString><con:query>SELECT en.value,COUNT(DISTINCT ta.article_id) content_volume
FROM (
	SELECT pipeline_topic_id, article_id, publish_at, publish_at_week
	FROM topic_article ta
	WHERE pipeline_topic_id IN (${#Global#topicid})
	AND ta.publish_at BETWEEN '${#Global#querysqlstart}' AND '${#Global#querysqlend}'
	 ) ta
INNER JOIN multi_level_annotation en on en.article_id=ta.article_id
AND en.type='entity'
WHERE  ta.pipeline_topic_id IN (${#Global#topicid})
AND en.account IN (0,${#Global#accountid})
AND en.level1 = 'HASHTAG'
GROUP BY en.value
ORDER BY COUNT(DISTINCT ta.article_id) DESC, en.value ASC  limit 25</con:query><con:properties/></con:config></con:testStep><con:testStep type="groovy" name="compareResultsTopHashtags"><con:settings/><con:config><script>// create groovyUtils and XmlHolder for response of Request
def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
def alert = com.eviware.soapui.support.UISupport;
def response1 = context.expand( 'SummaryTopHashtagsVertica#ResponseAsXml' )
def response2 = context.expand( '${Summary05TopHashtags#ResponseAsXml}' )
def holder1 = groovyUtils.getXmlHolder(response1)
def holder2 = groovyUtils.getXmlHolder(response2)

def jdbcStringList = []
def restStringList = []
def x = 0 as int
def y = 0 as int

// loop item nodes in response message
for( jdbcResults in holder1.getNodeValues( '//MULTI_LEVEL_ANNOTATION.VALUE, //CONTENT_VOLUME' ))
{  
  //log.info 'Item : [$jdbcResults]'
  jdbcStringList = jdbcStringList + jdbcResults
}

holder2.namespaces['ns'] = 'http://10.200.0.124/ArticleQueryApi/rest/query/aggregate'
for( restResponse in holder2.getNodeValues( '//ns:results/ns:e/ns:entity_value, //ns:results/ns:e/ns:content_volume'  ))
{
  //log.info 'Item : [$restResponse]' 
  restStringList = restStringList + restResponse
    if (restResponse in jdbcStringList ) assert true
    else {
    	   //alert.showInfoMessage(jdbcStringList[x] + " counts do not match","soapUI Warning !")
    	   //log.info 'Results from vertica do not match results from articleQueryApi '+ jdbcStringList[x] + " " + restResponse
    	   log.info 'Entity : ' + jdbcStringList[x]
        log.info 'Vertica: '+ jdbcStringList[y] + " HBase: " + restResponse
        verticount = jdbcStringList[y] as Integer
        hbasecount = restResponse as Integer
        //log.info verticount
        //log.info hbasecount
       if (verticount &lt; hbasecount)
          {
             f = ((1 - (verticount/hbasecount)) * 100 )
             f = f.abs()
             log.info 'Difference of: ' + new Double(f).round(2) + '%'
             log.info 'Vertica count is less than HBase count'
          }
          else
             {
                f = ((1 - (hbasecount/verticount)) * 100 )
                f = f.abs()
                log.info 'Difference of: ' + new Double(f).round(2) + '%'
                log.info 'HBase count is less than Vertica count'
             }
       if (f &lt; 2)
          {
             log.info 'PASS'
          }
          else
             {
                log.info 'FAILED: Percentage is > 2%'
             }
       if (f > 2 ) assert false : "Percentage is greater than 2%"

    x = x + 1
    
    }
    y = y + 1
}

log.info "request  : >" + jdbcStringList
log.info "result     : >" + restStringList</script></con:config></con:testStep><con:testStep type="restrequest" name="Summary06TopStateMentions"><con:settings/><con:config service="ARTSA  - Article Query" resourcePath="/ArticleQueryApi/rest/query/aggregate" methodName="POST - getAggregateData" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Summary06TopStateMentions" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="utoken" value="592423282898117332-6555896638205456861--1342692733501113202-12" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://10.200.0.124:8080</con:endpoint><con:request>{
  "topicIDs":[${#Global#topicid}],
  "limit":10,
  "selectedFields":[
   	   {"field":"content_volume()","sortDirection":"DESCENDING"},
        {"field":"entity_value","sortDirection":"ASCENDING"}
        //{"field":"combined_topics"}
  ],
  "filters":[
      //{"field":"entity_value","comparison":"EQ","values":["hawaii","kentucky","tennessee"]},
      {"field":"entity_type","comparison":"EQ","values":["STATE"]}
      
  ],
  "dateRange":{"startDate":${#Global#queryepochstart},"endDate":${#Global#queryepochend}}
}</con:request><con:assertion type="XPath Match" name="assert_entity_type_state"><con:configuration><path>declare namespace soap='http://schemas.xmlsoap.org/soap/envelope/';
declare namespace ns1='http://10.200.0.124/ArticleQueryApi/rest/query/aggregate';
//ns1:entity_type</path><content>STATE</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="jdbc" name="SummaryTopStateMentionsVertica"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>com.vertica.Driver</con:driver><con:connectionString>jdbc:vertica://10.200.0.190:5433/artsa01?user=artsa01&amp;password=artsa2</con:connectionString><con:query>SELECT en.value,COUNT(DISTINCT ta.article_id) content_volume
FROM (
	SELECT pipeline_topic_id, article_id, publish_at, publish_at_week
	FROM topic_article ta
	WHERE pipeline_topic_id IN (${#Global#topicid})
	AND ta.publish_at BETWEEN '${#Global#querysqlstart}' AND '${#Global#querysqlend}'
	 ) ta
INNER JOIN multi_level_annotation en on en.article_id=ta.article_id
AND en.type='entity'
WHERE  ta.pipeline_topic_id IN (${#Global#topicid})
AND en.account IN (0,${#Global#accountid})
AND en.level1 = 'STATE'
GROUP BY en.value
ORDER BY COUNT(DISTINCT ta.article_id) DESC, en.value ASC  limit 10</con:query><con:properties/></con:config></con:testStep><con:testStep type="groovy" name="compareResultsTopStateMentions"><con:settings/><con:config><script>// create groovyUtils and XmlHolder for response of Request
def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
def alert = com.eviware.soapui.support.UISupport;
def response1 = context.expand( 'SummaryTopStateMentionsVertica#ResponseAsXml' )
def response2 = context.expand( '${Summary06TopStateMentions#ResponseAsXml}' )
def holder1 = groovyUtils.getXmlHolder(response1)
def holder2 = groovyUtils.getXmlHolder(response2)

def jdbcStringList = []
def restStringList = []
def x = 0 as int
def y = 0 as int
def fail = 0 as int

// loop item nodes in response message
for( jdbcResults in holder1.getNodeValues( '//MULTI_LEVEL_ANNOTATION.VALUE, //CONTENT_VOLUME' ))
{  
  //log.info 'Item : [$jdbcResults]'
  jdbcStringList = jdbcStringList + jdbcResults
}

holder2.namespaces['ns'] = 'http://10.200.0.124/ArticleQueryApi/rest/query/aggregate'
for( restResponse in holder2.getNodeValues( '//ns:results/ns:e/ns:entity_value, //ns:results/ns:e/ns:content_volume'  ))
{
  //log.info 'Item : [$restResponse]' 
  restStringList = restStringList + restResponse
    if (restResponse in jdbcStringList ) assert true
    else {
    	   //alert.showInfoMessage(jdbcStringList[x] + " counts do not match","soapUI Warning !")
    	   //log.info 'Results from vertica do not match results from articleQueryApi '+ jdbcStringList[x] + " " + restResponse
    	   log.info 'Entity : ' + jdbcStringList[x]
        log.info 'Vertica: '+ jdbcStringList[y] + " HBase: " + restResponse
        verticount = jdbcStringList[y] as Integer
        hbasecount = restResponse as Integer
        //log.info verticount
        //log.info hbasecount
       if (verticount &lt; hbasecount)
          {
             f = ((1 - (verticount/hbasecount)) * 100 )
             f = f.abs()
             log.info 'Difference of: ' + new Double(f).round(2) + '%'
             log.info 'Vertica count is less than HBase count'
          }
          else
             {
                f = ((1 - (hbasecount/verticount)) * 100 )
                f = f.abs()
                log.info 'Difference of: ' + new Double(f).round(2) + '%'
                log.info 'HBase count is less than Vertica count'
             }
       if (f &lt; 2 )
          {
             log.info 'PASS'
          }
          else
             {
                log.info 'FAILED: Percentage is > 2%'
                fail = fail + 1
             }

    x = x + 1
    
    }
    y = y + 1
}
log.info "Fail count = " + fail
log.info "request  : >" + jdbcStringList
log.info "result     : >" + restStringList
if (fail>0)
    {
       assert false : "Percentage is greater than 2%"
    }</script></con:config></con:testStep><con:testStep type="restrequest" name="Summary071TopCategoriesLevel1"><con:settings/><con:config service="ARTSA  - Article Query" resourcePath="/ArticleQueryApi/rest/query/aggregate" methodName="POST - getAggregateData" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Summary071TopCategoriesLevel1" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="utoken" value="592423282898117332-6555896638205456861--1342692733501113202-12" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://10.200.0.124:8080</con:endpoint><con:request>{
  "topicIDs":[${#Global#topicid}],
  "limit":"10",
  "selectedFields":[
	    {"field":"content_volume()", "sortDirection":"DESCENDING"},
	    {"field":"category_type"},
   	    {"field":"category_level1"}
        //{"field":"combined_topics"}
  ],
  "filters":[
	  //{"field":"category_level1","comparison":"EQ","values":["Emotions_Category_Set","Dynamic Routing Category Set","Consumer_Electronics_Master_Category_Set","Telco_Product_Promotion","Political_Category_Set"]}
  ],
  "dateRange":{"startDate":${#Global#queryepochstart},"endDate":${#Global#queryepochend}}
}</con:request><con:assertion type="XPath Match" name="assert_category_type"><con:configuration><path>declare namespace soap='http://schemas.xmlsoap.org/soap/envelope/';
declare namespace ns1='http://10.200.0.124/ArticleQueryApi/rest/query/aggregate';
//ns1:category_type</path><content>category</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="assert_category_level1"><con:configuration><path>declare namespace soap='http://schemas.xmlsoap.org/soap/envelope/';
declare namespace ns1='http://10.200.0.124/ArticleQueryApi/rest/query/aggregate';
//ns1:category_level1</path><content>Emotions_Category*</content><allowWildcards>true</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="jdbc" name="SummaryTopCategoriesLevel1Vertica"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>com.vertica.Driver</con:driver><con:connectionString>jdbc:vertica://10.200.0.190:5433/artsa01?user=artsa01&amp;password=artsa2</con:connectionString><con:query>SELECT en.level1,COUNT(DISTINCT ta.article_id) content_volume
FROM (
	SELECT pipeline_topic_id, article_id, publish_at, publish_at_week
	FROM topic_article ta
	WHERE pipeline_topic_id IN (${#Global#topicid})
	AND ta.publish_at BETWEEN '${#Global#querysqlstart}' AND '${#Global#querysqlend}'
	 ) ta
INNER JOIN multi_level_annotation en on en.article_id=ta.article_id
AND en.type='category'
WHERE  ta.pipeline_topic_id IN (${#Global#topicid})
AND en.account IN (0,${#Global#accountid})
GROUP BY en.level1
ORDER BY COUNT(DISTINCT ta.article_id) DESC, en.level1 ASC  limit 10</con:query><con:properties/></con:config></con:testStep><con:testStep type="groovy" name="compareResultsTopCategoriesLevel1"><con:settings/><con:config><script>// create groovyUtils and XmlHolder for response of Request
def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
def alert = com.eviware.soapui.support.UISupport;
def response1 = context.expand( 'SummaryTopCategoriesLevel1Vertica#ResponseAsXml' )
def response2 = context.expand( '${Summary071TopCategoriesLevel1#ResponseAsXml}' )
def holder1 = groovyUtils.getXmlHolder(response1)
def holder2 = groovyUtils.getXmlHolder(response2)

def jdbcStringList = []
def restStringList = []
def x = 0 as int
def y = 0 as int
def fail = 0 as int

// loop item nodes in response message
for( jdbcResults in holder1.getNodeValues( '//MULTI_LEVEL_ANNOTATION.LEVEL1, //CONTENT_VOLUME' ))
{  
  //log.info 'Item : [$jdbcResults]'
  jdbcStringList = jdbcStringList + jdbcResults
}

holder2.namespaces['ns'] = 'http://10.200.0.124/ArticleQueryApi/rest/query/aggregate'
for( restResponse in holder2.getNodeValues( '//ns:results/ns:e/ns:category_level1, //ns:results/ns:e/ns:content_volume'  ))
{
  //log.info 'Item : [$restResponse]' 
  restStringList = restStringList + restResponse
    if (restResponse in jdbcStringList ) assert true
    else {
    	   //alert.showInfoMessage(jdbcStringList[x] + " counts do not match","soapUI Warning !")
    	   //log.info 'Results from vertica do not match results from articleQueryApi '+ jdbcStringList[x] + " " + restResponse
    	   log.info 'Entity : ' + jdbcStringList[x]
        log.info 'Vertica: '+ jdbcStringList[y] + " HBase: " + restResponse
        verticount = jdbcStringList[y] as Integer
        hbasecount = restResponse as Integer
        //log.info verticount
        //log.info hbasecount
       if (verticount &lt; hbasecount)
          {
             f = ((1 - (verticount/hbasecount)) * 100 )
             f = f.abs()
             log.info 'Difference of: ' + new Double(f).round(2) + '%'
             log.info 'Vertica count is less than HBase count'
          }
          else
             {
                f = ((1 - (hbasecount/verticount)) * 100 )
                f = f.abs()
                log.info 'Difference of: ' + new Double(f).round(2) + '%'
                log.info 'HBase count is less than Vertica count'
             }
       if (f &lt; 2 )
          {
             log.info 'PASS'
          }
          else
             {
                log.info 'FAILED: Percentage is > 2%'
                fail = fail + 1
             }

    x = x + 1
    
    }
    y = y + 1
}
log.info "Fail count = " + fail
log.info "request  : >" + jdbcStringList
log.info "result     : >" + restStringList
if (fail>0)
    {
       assert false : "Percentage is greater than 2%"
    }</script></con:config></con:testStep><con:testStep type="restrequest" name="Summary072TopCategoriesLevel2"><con:settings/><con:config service="ARTSA  - Article Query" resourcePath="/ArticleQueryApi/rest/query/aggregate" methodName="POST - getAggregateData" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Summary072TopCategoriesLevel2" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="utoken" value="592423282898117332-6555896638205456861--1342692733501113202-12" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://10.200.0.124:8080</con:endpoint><con:request>{
  "topicIDs":[${#Global#topicid}],
  "limit":"20",
  "selectedFields":[
	    {"field":"category_type"},
   	    {"field":"content_volume()", "sortDirection":"DESCENDING"},
	    {"field":"category_level1"},
	    {"field":"category_level2" , "sortDirection":"ASCENDING"},
        {"field":"combined_topics"}
  ],
  "filters":[
	  {"field":"category_level1","comparison":"EQ","values":["Dynamic Routing Category Set"]}
  ],
  "dateRange":{"startDate":${#Global#queryepochstart},"endDate":${#Global#queryepochend}}
}</con:request><con:assertion type="XPath Match" name="assert_category_level1"><con:configuration><path>declare namespace soap='http://schemas.xmlsoap.org/soap/envelope/';
declare namespace ns1='http://10.200.0.124/ArticleQueryApi/rest/query/aggregate';
//ns1:category_level1</path><content>Dynamic Routing*</content><allowWildcards>true</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="assert_catefory_level2"><con:configuration><path>declare namespace soap='http://schemas.xmlsoap.org/soap/envelope/';
declare namespace ns1='http://10.200.0.124/ArticleQueryApi/rest/query/aggregate';
//ns1:category_level2</path><content>*</content><allowWildcards>true</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Summary073TopCategoriesLevel3"><con:settings/><con:config service="ARTSA  - Article Query" resourcePath="/ArticleQueryApi/rest/query/aggregate" methodName="POST - getAggregateData" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Summary073TopCategoriesLevel3" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="utoken" value="592423282898117332-6555896638205456861--1342692733501113202-12" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://10.200.0.124:8080</con:endpoint><con:request>{
  "topicIDs":[${#Global#topicid}],
  "limit":"20",
  "selectedFields":[
	    {"field":"category_type"},
   	    {"field":"content_volume()", "sortDirection":"DESCENDING"},
 	    {"field":"category_level1"},
	    {"field":"category_level2"},
	    {"field":"category_level3" , "sortDirection":"ASCENDING"},
        {"field":"combined_topics"}
  ],
  "filters":[
	  {"field":"category_level1","comparison":"EQ","values":["Dynamic Routing Category Set"]},
	  {"field":"category_level2","comparison":"EQ","values":["Sentiment"]}
  ],
  "dateRange":{"startDate":${#Global#queryepochstart},"endDate":${#Global#queryepochend}}
}</con:request><con:assertion type="XPath Match" name="assert_category_level1"><con:configuration><path>declare namespace soap='http://schemas.xmlsoap.org/soap/envelope/';
declare namespace ns1='http://10.200.0.124/ArticleQueryApi/rest/query/aggregate';
//ns1:category_level1</path><content>Dynamic Routing*</content><allowWildcards>true</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="assert_category_level2"><con:configuration><path>declare namespace soap='http://schemas.xmlsoap.org/soap/envelope/';
declare namespace ns1='http://10.200.0.124/ArticleQueryApi/rest/query/aggregate';
//ns1:category_level2</path><content>Sentiment</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="XPath Match"><con:configuration><path>declare namespace soap='http://schemas.xmlsoap.org/soap/envelope/';
declare namespace ns1='http://10.200.0.124/ArticleQueryApi/rest/query/aggregate';
//ns1:category_level3</path><content>*</content><allowWildcards>true</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Summary074TopCategoriesLevel4"><con:settings/><con:config service="ARTSA  - Article Query" resourcePath="/ArticleQueryApi/rest/query/aggregate" methodName="POST - getAggregateData" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Summary074TopCategoriesLevel4" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="utoken" value="592423282898117332-6555896638205456861--1342692733501113202-12" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://10.200.0.124:8080</con:endpoint><con:request>{
  "topicIDs":[${#Global#topicid}],
"limit":"20",
  "selectedFields":[
        {"field":"category_type"},
   	    {"field":"content_volume()", "sortDirection":"DESCENDING"},
        {"field":"category_level1"},
        {"field":"category_level2"},
        {"field":"category_level3"},
        {"field":"category_level4" , "sortDirection":"ASCENDING"},
        {"field":"combined_topics"}
  ],
  "filters":[
      {"field":"category_level1","comparison":"EQ","values":["Dynamic Routing Category Set"]},
      {"field":"category_level3","comparison":"EQ","values":["Negative"]}
  ],
  "dateRange":{"startDate":${#Global#queryepochstart},"endDate":${#Global#queryepochend}}
}</con:request><con:assertion type="XPath Match" name="assert_category_level1"><con:configuration><path>declare namespace soap='http://schemas.xmlsoap.org/soap/envelope/';
declare namespace ns1='http://10.200.0.124/ArticleQueryApi/rest/query/aggregate';
//ns1:category_level1</path><content>Dynamic Routing*</content><allowWildcards>true</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="assert_category_level2"><con:configuration><path>declare namespace soap='http://schemas.xmlsoap.org/soap/envelope/';
declare namespace ns1='http://10.200.0.124/ArticleQueryApi/rest/query/aggregate';
//ns1:category_level2</path><content>Sentiment</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="assert_category_level3"><con:configuration><path>declare namespace soap='http://schemas.xmlsoap.org/soap/envelope/';
declare namespace ns1='http://10.200.0.124/ArticleQueryApi/rest/query/aggregate';
//ns1:category_level3</path><content>Negative</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="XPath Match"><con:configuration><path>declare namespace soap='http://schemas.xmlsoap.org/soap/envelope/';
declare namespace ns1='http://10.200.0.124/ArticleQueryApi/rest/query/aggregate';
//ns1:category_level4</path><content>*</content><allowWildcards>true</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Summary075TopCategoriesLevel5"><con:settings/><con:config service="ARTSA  - Article Query" resourcePath="/ArticleQueryApi/rest/query/aggregate" methodName="POST - getAggregateData" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Summary075TopCategoriesLevel5" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="utoken" value="592423282898117332-6555896638205456861--1342692733501113202-12" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://10.200.0.124:8080</con:endpoint><con:request>{
  "topicIDs":[${#Global#topicid}],
  "limit":"20",
  "selectedFields":[
        {"field":"category_type"},
   	    {"field":"content_volume()", "sortDirection":"DESCENDING"},
        {"field":"category_level1"},
        {"field":"category_level2"},
        {"field":"category_level3"},
   	    {"field":"category_level4"},
   	    {"field":"category_level5" , "sortDirection":"ASCENDING"},
        {"field":"combined_topics"}
  ],
  "filters":[
      {"field":"category_level1","comparison":"EQ","values":["Dynamic Routing Category Set"]},
   	  {"field":"category_level4","comparison":"EQ","values":["Complaints"]}
  ],
  "dateRange":{"startDate":${#Global#queryepochstart},"endDate":${#Global#queryepochend}}
}</con:request><con:assertion type="XPath Match" name="assert_category_level1"><con:configuration><path>declare namespace soap='http://schemas.xmlsoap.org/soap/envelope/';
declare namespace ns1='http://10.200.0.124/ArticleQueryApi/rest/query/aggregate';
//ns1:category_level1</path><content>Dynamic Routing*</content><allowWildcards>true</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="assert_category_level2"><con:configuration><path>declare namespace soap='http://schemas.xmlsoap.org/soap/envelope/';
declare namespace ns1='http://10.200.0.124/ArticleQueryApi/rest/query/aggregate';
//ns1:category_level2</path><content>Sentiment</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="assert_category_level3"><con:configuration><path>declare namespace soap='http://schemas.xmlsoap.org/soap/envelope/';
declare namespace ns1='http://10.200.0.124/ArticleQueryApi/rest/query/aggregate';
//ns1:category_level3</path><content>Negative</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="assert_category_level4"><con:configuration><path>declare namespace soap='http://schemas.xmlsoap.org/soap/envelope/';
declare namespace ns1='http://10.200.0.124/ArticleQueryApi/rest/query/aggregate';
//ns1:category_level4</path><content>Complaints</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="assert_category_level5"><con:configuration><path>declare namespace soap='http://schemas.xmlsoap.org/soap/envelope/';
declare namespace ns1='http://10.200.0.124/ArticleQueryApi/rest/query/aggregate';
//ns1:category_level5</path><content>*</content><allowWildcards>true</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Summary08SentimentByEntity"><con:settings/><con:config service="ARTSA  - Article Query" resourcePath="/ArticleQueryApi/rest/query/aggregate" methodName="POST - getAggregateData" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Summary08SentimentByEntity" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="utoken" value="592423282898117332-6555896638205456861--1342692733501113202-12" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://10.200.0.124:8080</con:endpoint><con:request>{
  "topicIDs":[${#Global#topicid}],
  //"limit":25,
  'selectedFields':[
        //{'field':'entity_type'},
        {"field":"content_volume()","sortDirection":"DESCENDING"},
        {'field':'entity_sentiment'}
        //{"field":"combined_topics"}
  ],
  'filters':[
      {'field':'entity_type','comparison':'EQ','values':['','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','']}
  ],
  "dateRange":{"startDate":${#Global#queryepochstart},"endDate":${#Global#queryepochend}}
}</con:request><con:assertion type="XPath Match" name="assert_enttiy_type"><con:configuration><path>declare namespace soap='http://schemas.xmlsoap.org/soap/envelope/';
declare namespace ns1='http://10.200.0.124/ArticleQueryApi/rest/query/aggregate';
//ns1:entity_type</path><content>*</content><allowWildcards>true</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Summary081SentimentByEntityNegative"><con:settings/><con:config service="ARTSA  - Article Query" resourcePath="/ArticleQueryApi/rest/query/aggregate" methodName="POST - getAggregateData" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Summary081SentimentByEntityNegative" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="utoken" value="592423282898117332-6555896638205456861--1342692733501113202-12" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://10.200.0.124:8080</con:endpoint><con:request>{
  "topicIDs":[${#Global#topicid}],
  "limit":10,
  'selectedFields':[
        {"field":"content_volume()","sortDirection":"DESCENDING"},
        {'field':'entity_type'},
        {'field':'entity_sentiment'}
        //{"field":"combined_topics"}
  ],
  'filters':[
    {'field':'entity_sentiment','comparison':'EQ','values':['NEGATIVE']}
    //{'field':'entity_type','comparison':'EQ','values':['','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','']}
  ],
  "dateRange":{"startDate":${#Global#queryepochstart},"endDate":${#Global#queryepochend}}
}</con:request><con:assertion type="XPath Match" name="assert_entity_type"><con:configuration><path>declare namespace soap='http://schemas.xmlsoap.org/soap/envelope/';
declare namespace ns1='http://10.200.0.124/ArticleQueryApi/rest/query/aggregate';
//ns1:entity_type</path><content>*</content><allowWildcards>true</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="assert_entity_sentiment"><con:configuration><path>declare namespace soap='http://schemas.xmlsoap.org/soap/envelope/';
declare namespace ns1='http://10.200.0.124/ArticleQueryApi/rest/query/aggregate';
//ns1:entity_sentiment</path><content>NEGATIVE</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="jdbc" name="SummarySentimentByEntityNegativeVertica"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>com.vertica.Driver</con:driver><con:connectionString>jdbc:vertica://10.200.0.190:5433/artsa01?user=artsa01&amp;password=artsa2</con:connectionString><con:query>SELECT en.level1,en.sentiment,COUNT(DISTINCT ta.article_id) content_volume
FROM (
	SELECT pipeline_topic_id, article_id, publish_at, publish_at_week
	FROM topic_article ta
	WHERE pipeline_topic_id IN (${#Global#topicid})
	AND ta.publish_at BETWEEN '${#Global#querysqlstart}' AND '${#Global#querysqlend}'
	 ) ta
INNER JOIN multi_level_annotation en on en.article_id=ta.article_id
AND en.type='entity' AND en.sentiment = 'NEGATIVE'
WHERE  ta.pipeline_topic_id IN (${#Global#topicid})
AND en.account IN (0,${#Global#accountid})
GROUP BY en.sentiment,en.level1
ORDER BY COUNT(DISTINCT ta.article_id) DESC, en.level1 ASC,en.sentiment ASC  limit 10</con:query><con:properties/></con:config></con:testStep><con:testStep type="groovy" name="compareResultsSentimentByEntityNegative"><con:settings/><con:config><script>// create groovyUtils and XmlHolder for response of Request
def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
def alert = com.eviware.soapui.support.UISupport;
def response1 = context.expand( 'SummarySentimentByEntityNegativeVertica#ResponseAsXml' )
def response2 = context.expand( '${Summary081SentimentByEntityNegative#ResponseAsXml}' )
def holder1 = groovyUtils.getXmlHolder(response1)
def holder2 = groovyUtils.getXmlHolder(response2)

def jdbcStringList = []
def restStringList = []
def x = 0 as int
def y = 0 as int
def fail = 0 as int

// loop item nodes in response message
for( jdbcResults in holder1.getNodeValues( '//MULTI_LEVEL_ANNOTATION.LEVEL1, //CONTENT_VOLUME' ))
{  
  //log.info 'Item : [$jdbcResults]'
  jdbcStringList = jdbcStringList + jdbcResults
}

holder2.namespaces['ns'] = 'http://10.200.0.124/ArticleQueryApi/rest/query/aggregate'
for( restResponse in holder2.getNodeValues( '//ns:results/ns:e/ns:entity_type, //ns:results/ns:e/ns:content_volume'  ))
{
  //log.info 'Item : [$restResponse]' 
  restStringList = restStringList + restResponse
    if (restResponse in jdbcStringList ) assert true
    else {
    	   //alert.showInfoMessage(jdbcStringList[x] + " counts do not match","soapUI Warning !")
    	   //log.info 'Results from vertica do not match results from articleQueryApi '+ jdbcStringList[x] + " " + restResponse
    	   log.info 'Entity : ' + jdbcStringList[x]
        log.info 'Vertica: '+ jdbcStringList[y] + " HBase: " + restResponse
        verticount = jdbcStringList[y] as Integer
        hbasecount = restResponse as Integer
        //log.info verticount
        //log.info hbasecount
       if (verticount &lt; hbasecount)
          {
             f = ((1 - (verticount/hbasecount)) * 100 )
             f = f.abs()
             log.info 'Difference of: ' + new Double(f).round(2) + '%'
             log.info 'Vertica count is less than HBase count'
          }
          else
             {
                f = ((1 - (hbasecount/verticount)) * 100 )
                f = f.abs()
                log.info 'Difference of: ' + new Double(f).round(2) + '%'
                log.info 'HBase count is less than Vertica count'
             }
       if (f &lt; 2 )
          {
             log.info 'PASS'
          }
          else
             {
                log.info 'FAILED: Percentage is > 2%'
                fail = fail + 1
             }

    x = x + 1
    
    }
    y = y + 1
}
log.info "Fail count = " + fail
log.info "request  : >" + jdbcStringList
log.info "result     : >" + restStringList
if (fail>0)
    {
       assert false : "Percentage is greater than 2%"
    }</script></con:config></con:testStep><con:testStep type="restrequest" name="Summary082SentimentByEntityPositive"><con:settings/><con:config service="ARTSA  - Article Query" resourcePath="/ArticleQueryApi/rest/query/aggregate" methodName="POST - getAggregateData" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Summary082SentimentByEntityPositive" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="utoken" value="592423282898117332-6555896638205456861--1342692733501113202-12" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://10.200.0.124:8080</con:endpoint><con:request>{
  "topicIDs":[${#Global#topicid}],
  "limit":10,
  'selectedFields':[{"field":"content_volume()","sortDirection":"DESCENDING"},
        {'field':'entity_type'},
        {'field':'entity_sentiment'}
        //{"field":"combined_topics"}
  ],
  'filters':[
    {'field':'entity_sentiment','comparison':'EQ','values':['POSITIVE']}
    //{'field':'entity_type','comparison':'EQ','values':['','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','']}
  ],
  "dateRange":{"startDate":${#Global#queryepochstart},"endDate":${#Global#queryepochend}}
}</con:request><con:assertion type="XPath Match" name="assert_entity_type"><con:configuration><path>declare namespace soap='http://schemas.xmlsoap.org/soap/envelope/';
declare namespace ns1='http://10.200.0.124/ArticleQueryApi/rest/query/aggregate';
//ns1:entity_type</path><content>*</content><allowWildcards>true</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="assert_entity_sentiment"><con:configuration><path>declare namespace soap='http://schemas.xmlsoap.org/soap/envelope/';
declare namespace ns1='http://10.200.0.124/ArticleQueryApi/rest/query/aggregate';
//ns1:entity_sentiment</path><content>POSITIVE</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="jdbc" name="SummarySentimentByEntityPositiveVertica"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>com.vertica.Driver</con:driver><con:connectionString>jdbc:vertica://10.200.0.190:5433/artsa01?user=artsa01&amp;password=artsa2</con:connectionString><con:query>SELECT en.level1,en.sentiment,COUNT(DISTINCT ta.article_id) content_volume
FROM (
	SELECT pipeline_topic_id, article_id, publish_at, publish_at_week
	FROM topic_article ta
	WHERE pipeline_topic_id IN (${#Global#topicid})
	AND ta.publish_at BETWEEN '${#Global#querysqlstart}' AND '${#Global#querysqlend}'
	 ) ta
INNER JOIN multi_level_annotation en on en.article_id=ta.article_id
AND en.type='entity' AND en.sentiment = 'POSITIVE'
WHERE  ta.pipeline_topic_id IN (${#Global#topicid})
AND en.account IN (0,${#Global#accountid})
GROUP BY en.sentiment,en.level1
ORDER BY COUNT(DISTINCT ta.article_id) DESC, en.level1 ASC,en.sentiment ASC  limit 10</con:query><con:properties/></con:config></con:testStep><con:testStep type="groovy" name="compareResultsSentimentByEntityPositive"><con:settings/><con:config><script>// create groovyUtils and XmlHolder for response of Request
def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
def alert = com.eviware.soapui.support.UISupport;
def response1 = context.expand( 'SummarySentimentByEntityPositiveVertica#ResponseAsXml' )
def response2 = context.expand( '${Summary082SentimentByEntityPositive#ResponseAsXml}' )
def holder1 = groovyUtils.getXmlHolder(response1)
def holder2 = groovyUtils.getXmlHolder(response2)

def jdbcStringList = []
def restStringList = []
def x = 0 as int
def y = 0 as int
def fail = 0 as int

// loop item nodes in response message
for( jdbcResults in holder1.getNodeValues( '//MULTI_LEVEL_ANNOTATION.LEVEL1, //CONTENT_VOLUME' ))
{  
  //log.info 'Item : [$jdbcResults]'
  jdbcStringList = jdbcStringList + jdbcResults
}

holder2.namespaces['ns'] = 'http://10.200.0.124/ArticleQueryApi/rest/query/aggregate'
for( restResponse in holder2.getNodeValues( '//ns:results/ns:e/ns:entity_type, //ns:results/ns:e/ns:content_volume'  ))
{
  //log.info 'Item : [$restResponse]' 
  restStringList = restStringList + restResponse
    if (restResponse in jdbcStringList ) assert true
    else {
    	   //alert.showInfoMessage(jdbcStringList[x] + " counts do not match","soapUI Warning !")
    	   //log.info 'Results from vertica do not match results from articleQueryApi '+ jdbcStringList[x] + " " + restResponse
    	   log.info 'Entity : ' + jdbcStringList[x]
        log.info 'Vertica: '+ jdbcStringList[y] + " HBase: " + restResponse
        verticount = jdbcStringList[y] as Integer
        hbasecount = restResponse as Integer
        //log.info verticount
        //log.info hbasecount
       if (verticount &lt; hbasecount)
          {
             f = ((1 - (verticount/hbasecount)) * 100 )
             f = f.abs()
             log.info 'Difference of: ' + new Double(f).round(2) + '%'
             log.info 'Vertica count is less than HBase count'
          }
          else
             {
                f = ((1 - (hbasecount/verticount)) * 100 )
                f = f.abs()
                log.info 'Difference of: ' + new Double(f).round(2) + '%'
                log.info 'HBase count is less than Vertica count'
             }
       if (f &lt; 2 )
          {
             log.info 'PASS'
          }
          else
             {
                log.info 'FAILED: Percentage is > 2%'
                fail = fail + 1
             }

    x = x + 1
    
    }
    y = y + 1
}
log.info "Fail count = " + fail
log.info "request  : >" + jdbcStringList
log.info "result     : >" + restStringList
if (fail>0)
    {
       assert false : "Percentage is greater than 2%"
    }</script></con:config></con:testStep><con:testStep type="restrequest" name="Summary09TagCloud"><con:settings/><con:config service="ARTSA  - Article Query" resourcePath="/ArticleQueryApi/rest/query/aggregate" methodName="POST - getAggregateData" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Summary09TagCloud" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="utoken" value="592423282898117332-6555896638205456861--1342692733501113202-12" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://10.200.0.124:8080</con:endpoint><con:request>{
  "topicIDs":[${#Global#topicid}],
  "limit":10,
  "selectedFields":[{"field":"content_volume()","sortDirection":"DESCENDING"},
   	   {"field":"entity_value","sortDirection":"ASCENDING"}
        //{"field":"combined_topics"}
  ],
  "filters":[
      //{"field":"entity_value","comparison":"EQ","values":["ambiguous icon","positive icon","extreme positive icon","negative icon","mother"]}
  ],
  "dateRange":{"startDate":${#Global#queryepochstart},"endDate":${#Global#queryepochend}}
}</con:request><con:assertion type="XPath Match" name="XPath Match"><con:configuration><path>declare namespace soap='http://schemas.xmlsoap.org/soap/envelope/';
declare namespace ns1='http://10.200.0.124/ArticleQueryApi/rest/query/aggregate';
//ns1:entity_value</path><content>*</content><allowWildcards>true</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="jdbc" name="SummaryTagCloudVertica"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>com.vertica.Driver</con:driver><con:connectionString>jdbc:vertica://10.200.0.190:5433/artsa01?user=artsa01&amp;password=artsa2</con:connectionString><con:query>SELECT en.value,COUNT(DISTINCT ta.article_id) content_volume
FROM (
	SELECT pipeline_topic_id, article_id, publish_at, publish_at_week
	FROM topic_article ta
	WHERE pipeline_topic_id IN (${#Global#topicid})
	AND ta.publish_at BETWEEN '${#Global#querysqlstart}' AND '${#Global#querysqlend}'
	 ) ta
INNER JOIN multi_level_annotation en on en.article_id=ta.article_id
AND en.type='entity'
WHERE  ta.pipeline_topic_id IN (${#Global#topicid})
AND en.account IN (0,${#Global#accountid})
GROUP BY en.value
ORDER BY COUNT(DISTINCT ta.article_id) DESC, en.value ASC  limit 10</con:query><con:properties/></con:config></con:testStep><con:testStep type="groovy" name="compareResultsTagCloud"><con:settings/><con:config><script>// create groovyUtils and XmlHolder for response of Request
def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
def alert = com.eviware.soapui.support.UISupport;
def response1 = context.expand( 'SummaryTagCloudVertica#ResponseAsXml' )
def response2 = context.expand( '${Summary09TagCloud#ResponseAsXml}' )
def holder1 = groovyUtils.getXmlHolder(response1)
def holder2 = groovyUtils.getXmlHolder(response2)

def jdbcStringList = []
def restStringList = []
def x = 0 as int
def y = 0 as int
def fail = 0 as int

// loop item nodes in response message
for( jdbcResults in holder1.getNodeValues( '//MULTI_LEVEL_ANNOTATION.VALUE, //CONTENT_VOLUME' ))
{  
  //log.info 'Item : [$jdbcResults]'
  jdbcStringList = jdbcStringList + jdbcResults
}

holder2.namespaces['ns'] = 'http://10.200.0.124/ArticleQueryApi/rest/query/aggregate'
for( restResponse in holder2.getNodeValues( '//ns:results/ns:e/ns:entity_value, //ns:results/ns:e/ns:content_volume'  ))
{
  //log.info 'Item : [$restResponse]' 
  restStringList = restStringList + restResponse
    /*if (restResponse in jdbcStringList ) assert true
    else {
    	   //alert.showInfoMessage(jdbcStringList[x] + " counts do not match","soapUI Warning !")
    	   //log.info 'Results from vertica do not match results from articleQueryApi '+ jdbcStringList[x] + " " + restResponse
    	   log.info 'Entity : ' + jdbcStringList[x]
        log.info 'Vertica: '+ jdbcStringList[y] + " HBase: " + restResponse
        verticount = jdbcStringList[y] as Integer
        hbasecount = restResponse as Integer
        //log.info verticount
        //log.info hbasecount
       if (verticount &lt; hbasecount)
          {
             f = ((1 - (verticount/hbasecount)) * 100 )
             f = f.abs()
             log.info 'Difference of: ' + new Double(f).round(2) + '%'
             log.info 'Vertica count is less than HBase count'
          }
          else
             {
                f = ((1 - (hbasecount/verticount)) * 100 )
                f = f.abs()
                log.info 'Difference of: ' + new Double(f).round(2) + '%'
                log.info 'HBase count is less than Vertica count'
             }
       if (f &lt; 2 )
          {
             log.info 'PASS'
          }
          else
             {
                log.info 'FAILED: Percentage is > 2%'
                fail = fail + 1
             }

    x = x + 1
    
    }
    y = y + 1*/
}
log.info "Fail count = " + fail
log.info "request  : >" + jdbcStringList
log.info "result     : >" + restStringList
if (fail>0)
    {
       assert false : "Percentage is greater than 2%"
    }</script></con:config></con:testStep><con:testStep type="restrequest" name="Summary101Followers"><con:settings/><con:config service="ARTSA  - Article Query" resourcePath="/ArticleQueryApi/rest/query/aggregate" methodName="POST - getAggregateData" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Summary101Followers" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="utoken" value="592423282898117332-6555896638205456861--1342692733501113202-12" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://10.200.0.124:8080</con:endpoint><con:request>{
  "topicIDs":[${#Global#topicid}],
  "limit":10,
 "selectedFields":[
   {"field":"followers_max()","sortDirection":"DESCENDING"},
   {"field":"klout_max()"},
   {"field":"status_updates_max()"},
   {"field":"reach_max()"},
   {"field":"article_following"},
   {"field":"article_groups"},
   {"field":"article_published_at"},
   {"field":"article_publisher"},
   {"field":"article_screen_name"},
   {"field":"article_content_subtype"},
   {"field":"author_name"},
   {"field":"author_image_url"},
   {"field":"article_uri"}
 ],
 "filters":[
   {"field":"article_content_subtype","comparison":"EQ","values":["twitter"]}
 ],
  "dateRange":{"startDate":${#Global#queryepochstart},"endDate":${#Global#queryepochend}}
}</con:request><con:assertion type="XPath Match" name="assert_article_details"><con:configuration><path>declare namespace soap='http://schemas.xmlsoap.org/soap/envelope/';
declare namespace ns1='http://10.200.0.124/ArticleQueryApi/rest/query/aggregate';
//ns1:e</path><content>*</content><allowWildcards>true</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="jdbc" name="SummaryFollowersVertica"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>com.vertica.Driver</con:driver><con:connectionString>jdbc:vertica://10.200.0.190:5433/artsa01?user=artsa01&amp;password=artsa2</con:connectionString><con:query>SELECT DISTINCT(fa.author_name), max(fa.followers)
FROM fact_article fa
INNER JOIN (
	SELECT pipeline_topic_id, article_id, publish_at, publish_at_week
	FROM topic_article ta
	WHERE pipeline_topic_id IN (${#Global#topicid})
	AND ta.publish_at BETWEEN '${#Global#querysqlstart}' AND '${#Global#querysqlend}'
	  ) ta  ON ta.article_id=fa.id
AND ta.publish_at_week=fa.publish_at_week
WHERE  ta.pipeline_topic_id IN (${#Global#topicid})
GROUP BY fa.author_name
ORDER BY max(fa.followers) DESC LIMIT 10;</con:query><con:properties/></con:config></con:testStep><con:testStep type="groovy" name="compareResultsFollowers"><con:settings/><con:config><script>// create groovyUtils and XmlHolder for response of Request
def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
def alert = com.eviware.soapui.support.UISupport;
def response1 = context.expand( 'SummaryFollowersVertica#ResponseAsXml' )
def response2 = context.expand( '${Summary101Followers#ResponseAsXml}' )
def holder1 = groovyUtils.getXmlHolder(response1)
def holder2 = groovyUtils.getXmlHolder(response2)

def jdbcStringList = []
def restStringList = []
def x = 0 as int
def y = 0 as int
def fail = 0 as int

// loop item nodes in response message
for( jdbcResults in holder1.getNodeValues( '//FACT_ARTICLE.AUTHOR_NAME, //MAX' ))
{  
  //log.info 'Item : [$jdbcResults]'
  jdbcStringList = jdbcStringList + jdbcResults
}

holder2.namespaces['ns'] = 'http://10.200.0.124/ArticleQueryApi/rest/query/aggregate'
for( restResponse in holder2.getNodeValues( '//ns:results/ns:e/ns:author_name, //ns:results/ns:e/ns:followers_max'  ))
{
  //log.info 'Item : [$restResponse]' 
  restStringList = restStringList + restResponse
    if (restResponse in jdbcStringList ) assert true
    else {
    	   //alert.showInfoMessage(jdbcStringList[x] + " counts do not match","soapUI Warning !")
    	   //log.info 'Results from vertica do not match results from articleQueryApi '+ jdbcStringList[x] + " " + restResponse
    	   log.info 'Entity : ' + jdbcStringList[x]
        log.info 'Vertica: '+ jdbcStringList[y] + " HBase: " + restResponse
        verticount = jdbcStringList[y] as Integer
        hbasecount = restResponse as Integer
        //log.info verticount
        //log.info hbasecount
       if (verticount &lt; hbasecount)
          {
             f = ((1 - (verticount/hbasecount)) * 100 )
             f = f.abs()
             log.info 'Difference of: ' + new Double(f).round(2) + '%'
             log.info 'Vertica count is less than HBase count'
          }
          else
             {
                f = ((1 - (hbasecount/verticount)) * 100 )
                f = f.abs()
                log.info 'Difference of: ' + new Double(f).round(2) + '%'
                log.info 'HBase count is less than Vertica count'
             }
       if (f &lt; 2 )
          {
             log.info 'PASS'
          }
          else
             {
                log.info 'FAILED: Percentage is > 2%'
                fail = fail + 1
             }

    x = x + 1
    
    }
    y = y + 1
}
log.info "Fail count = " + fail
log.info "request  : >" + jdbcStringList
log.info "result     : >" + restStringList
if (fail>0)
    {
       assert false : "Percentage is greater than 2%"
    }</script></con:config></con:testStep><con:testStep type="restrequest" name="Summary102Klout"><con:settings/><con:config service="ARTSA  - Article Query" resourcePath="/ArticleQueryApi/rest/query/aggregate" methodName="POST - getAggregateData" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Summary102Klout" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="utoken" value="592423282898117332-6555896638205456861--1342692733501113202-12" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://10.200.0.124:8080</con:endpoint><con:request>{
  "topicIDs":[${#Global#topicid}],
  "limit":10,
 "selectedFields":[
   {"field":"klout_max()","sortDirection":"DESCENDING"},
   {"field":"followers_max()"},
   {"field":"status_updates_max()"},
   {"field":"reach_max()"},
   {"field":"article_following"},
   {"field":"article_groups"},
   {"field":"article_published_at"},
   {"field":"article_publisher"},
   {"field":"article_screen_name"},
   {"field":"article_content_subtype"},
   {"field":"author_name"},
   {"field":"author_image_url"},
   {"field":"article_uri"}
 ],
 "filters":[
   {"field":"article_content_subtype","comparison":"EQ","values":["twitter"]}
 ],
  "dateRange":{"startDate":${#Global#queryepochstart},"endDate":${#Global#queryepochend}}
}</con:request><con:assertion type="XPath Match" name="assert_article_details"><con:configuration><path>declare namespace soap='http://schemas.xmlsoap.org/soap/envelope/';
declare namespace ns1='http://10.200.0.124/ArticleQueryApi/rest/query/aggregate';
//ns1:e</path><content>*</content><allowWildcards>true</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="jdbc" name="SummaryKloutVertica"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>com.vertica.Driver</con:driver><con:connectionString>jdbc:vertica://10.200.0.190:5433/artsa01?user=artsa01&amp;password=artsa2</con:connectionString><con:query>SELECT DISTINCT(fa.author_name), max(fa.klout)
FROM fact_article fa
INNER JOIN (
	SELECT pipeline_topic_id, article_id, publish_at, publish_at_week
	FROM topic_article ta
	WHERE pipeline_topic_id IN (${#Global#topicid})
	AND ta.publish_at BETWEEN '${#Global#querysqlstart}' AND '${#Global#querysqlend}'
	  ) ta  ON ta.article_id=fa.id
AND ta.publish_at_week=fa.publish_at_week
WHERE  ta.pipeline_topic_id IN (${#Global#topicid})
GROUP BY fa.author_name
ORDER BY max(fa.klout) DESC LIMIT 10;</con:query><con:properties/></con:config></con:testStep><con:testStep type="groovy" name="compareResultsKlout"><con:settings/><con:config><script>// create groovyUtils and XmlHolder for response of Request
def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
def alert = com.eviware.soapui.support.UISupport;
def response1 = context.expand( 'SummaryKloutVertica#ResponseAsXml' )
def response2 = context.expand( '${Summary102Klout#ResponseAsXml}' )
def holder1 = groovyUtils.getXmlHolder(response1)
def holder2 = groovyUtils.getXmlHolder(response2)

def jdbcStringList = []
def restStringList = []
def x = 0 as int
def y = 0 as int
def fail = 0 as int

// loop item nodes in response message
for( jdbcResults in holder1.getNodeValues( '//FACT_ARTICLE.AUTHOR_NAME, //MAX' ))
{  
  //log.info 'Item : [$jdbcResults]'
  jdbcStringList = jdbcStringList + jdbcResults
}

holder2.namespaces['ns'] = 'http://10.200.0.124/ArticleQueryApi/rest/query/aggregate'
for( restResponse in holder2.getNodeValues( '//ns:results/ns:e/ns:author_name, //ns:results/ns:e/ns:klout_max'  ))
{
  //log.info 'Item : [$restResponse]' 
  restStringList = restStringList + restResponse
    if (restResponse in jdbcStringList ) assert true
    else {
    	   //alert.showInfoMessage(jdbcStringList[x] + " counts do not match","soapUI Warning !")
    	   //log.info 'Results from vertica do not match results from articleQueryApi '+ jdbcStringList[x] + " " + restResponse
    	   log.info 'Entity : ' + jdbcStringList[x]
        log.info 'Vertica: '+ jdbcStringList[y] + " HBase: " + restResponse
        verticount = jdbcStringList[y] as Integer
        hbasecount = restResponse as Integer
        //log.info verticount
        //log.info hbasecount
       if (verticount &lt; hbasecount)
          {
             f = ((1 - (verticount/hbasecount)) * 100 )
             f = f.abs()
             log.info 'Difference of: ' + new Double(f).round(2) + '%'
             log.info 'Vertica count is less than HBase count'
          }
          else
             {
                f = ((1 - (hbasecount/verticount)) * 100 )
                f = f.abs()
                log.info 'Difference of: ' + new Double(f).round(2) + '%'
                log.info 'HBase count is less than Vertica count'
             }
       if (f &lt; 2 )
          {
             log.info 'PASS'
          }
          else
             {
                log.info 'FAILED: Percentage is > 2%'
                fail = fail + 1
             }

    x = x + 1
    
    }
    y = y + 1
}
log.info "Fail count = " + fail
log.info "request  : >" + jdbcStringList
log.info "result     : >" + restStringList
if (fail>0)
    {
       assert false : "Percentage is greater than 2%"
    }</script></con:config></con:testStep><con:testStep type="restrequest" name="Summary103Tweets"><con:settings/><con:config service="ARTSA  - Article Query" resourcePath="/ArticleQueryApi/rest/query/aggregate" methodName="POST - getAggregateData" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Summary103Tweets" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="utoken" value="592423282898117332-6555896638205456861--1342692733501113202-12" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://10.200.0.124:8080</con:endpoint><con:request>{
  "topicIDs":[${#Global#topicid}],
  "limit":10,
 "selectedFields":[
   {"field":"status_updates_max()","sortDirection":"DESCENDING"},
   {"field":"klout_max()"},
   {"field":"followers_max()"},
   {"field":"reach_max()"},
   {"field":"article_following"},
   {"field":"article_groups"},
   {"field":"article_published_at"},
   {"field":"article_publisher"},
   {"field":"article_screen_name"},
   {"field":"article_content_subtype"},
   {"field":"author_name"},
   {"field":"author_image_url"},
   {"field":"article_uri"}
 ],
 "filters":[
   {"field":"article_content_subtype","comparison":"EQ","values":["twitter"]}
 ],
  "dateRange":{"startDate":${#Global#queryepochstart},"endDate":${#Global#queryepochend}}
}</con:request><con:assertion type="XPath Match" name="assert_article_details"><con:configuration><path>declare namespace soap='http://schemas.xmlsoap.org/soap/envelope/';
declare namespace ns1='http://10.200.0.124/ArticleQueryApi/rest/query/aggregate';
//ns1:e</path><content>*</content><allowWildcards>true</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="jdbc" name="SummaryTweetsVertica"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>com.vertica.Driver</con:driver><con:connectionString>jdbc:vertica://10.200.0.190:5433/artsa01?user=artsa01&amp;password=artsa2</con:connectionString><con:query>SELECT DISTINCT(fa.author_name), max(fa.status_updates)
FROM fact_article fa
INNER JOIN (
	SELECT pipeline_topic_id, article_id, publish_at, publish_at_week
	FROM topic_article ta
	WHERE pipeline_topic_id IN (${#Global#topicid})
	AND ta.publish_at BETWEEN '${#Global#querysqlstart}' AND '${#Global#querysqlend}'
	  ) ta  ON ta.article_id=fa.id
AND ta.publish_at_week=fa.publish_at_week
WHERE  ta.pipeline_topic_id IN (${#Global#topicid})
GROUP BY fa.author_name
ORDER BY max(fa.status_updates) DESC LIMIT 10;</con:query><con:properties/></con:config></con:testStep><con:testStep type="groovy" name="compareResultsTweets"><con:settings/><con:config><script>// create groovyUtils and XmlHolder for response of Request
def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
def alert = com.eviware.soapui.support.UISupport;
def response1 = context.expand( 'SummaryTweetsVertica#ResponseAsXml' )
def response2 = context.expand( '${Summary103Tweets#ResponseAsXml}' )
def holder1 = groovyUtils.getXmlHolder(response1)
def holder2 = groovyUtils.getXmlHolder(response2)

def jdbcStringList = []
def restStringList = []
def x = 0 as int
def y = 0 as int
def fail = 0 as int

// loop item nodes in response message
for( jdbcResults in holder1.getNodeValues( '//FACT_ARTICLE.AUTHOR_NAME, //MAX' ))
{  
  //log.info 'Item : [$jdbcResults]'
  jdbcStringList = jdbcStringList + jdbcResults
}

holder2.namespaces['ns'] = 'http://10.200.0.124/ArticleQueryApi/rest/query/aggregate'
for( restResponse in holder2.getNodeValues( '//ns:results/ns:e/ns:author_name, //ns:results/ns:e/ns:status_updates_max'  ))
{
  //log.info 'Item : [$restResponse]' 
  restStringList = restStringList + restResponse
    if (restResponse in jdbcStringList ) assert true
    else {
    	   //alert.showInfoMessage(jdbcStringList[x] + " counts do not match","soapUI Warning !")
    	   //log.info 'Results from vertica do not match results from articleQueryApi '+ jdbcStringList[x] + " " + restResponse
    	   log.info 'Entity : ' + jdbcStringList[x]
        log.info 'Vertica: '+ jdbcStringList[y] + " HBase: " + restResponse
        verticount = jdbcStringList[y] as Integer
        hbasecount = restResponse as Integer
        //log.info verticount
        //log.info hbasecount
       if (verticount &lt; hbasecount)
          {
             f = ((1 - (verticount/hbasecount)) * 100 )
             f = f.abs()
             log.info 'Difference of: ' + new Double(f).round(2) + '%'
             log.info 'Vertica count is less than HBase count'
          }
          else
             {
                f = ((1 - (hbasecount/verticount)) * 100 )
                f = f.abs()
                log.info 'Difference of: ' + new Double(f).round(2) + '%'
                log.info 'HBase count is less than Vertica count'
             }
       if (f &lt; 2 )
          {
             log.info 'PASS'
          }
          else
             {
                log.info 'FAILED: Percentage is > 2%'
                fail = fail + 1
             }

    x = x + 1
    
    }
    y = y + 1
}
log.info "Fail count = " + fail
log.info "request  : >" + jdbcStringList
log.info "result     : >" + restStringList
if (fail>0)
    {
       assert false : "Percentage is greater than 2%"
    }</script></con:config></con:testStep><con:testStep type="restrequest" name="Summary104Other"><con:settings/><con:config service="ARTSA  - Article Query" resourcePath="/ArticleQueryApi/rest/query/aggregate" methodName="POST - getAggregateData" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Summary104Other" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="utoken" value="592423282898117332-6555896638205456861--1342692733501113202-12" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://10.200.0.124:8080</con:endpoint><con:request>{
  "topicIDs":[${#Global#topicid}],
  "limit":10,
 "selectedFields":[
   {"field":"reach_max()","sortDirection":"DESCENDING"},
   {"field":"reach_max()"},
   {"field":"followers_max()"},
   {"field":"klout_max()"},
   {"field":"status_updates_max()"},
   {"field":"article_following"},
   {"field":"article_groups"},
   {"field":"article_published_at"},
   {"field":"article_publisher"},
   {"field":"article_screen_name"},
   {"field":"article_content_subtype"},
   {"field":"author_name"},
   {"field":"author_image_url"},
   {"field":"article_uri"}],
 "filters":[
   {"field":"article_content_subtype","comparison":"NE","values":["twitter"]}
 ],
  "dateRange":{"startDate":${#Global#queryepochstart},"endDate":${#Global#queryepochend}}
}</con:request><con:assertion type="XPath Match" name="assert_article_details"><con:configuration><path>declare namespace soap='http://schemas.xmlsoap.org/soap/envelope/';
declare namespace ns1='http://10.200.0.124/ArticleQueryApi/rest/query/aggregate';
//ns1:e</path><content>*</content><allowWildcards>true</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="jdbc" name="SummaryOtherVertica"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>com.vertica.Driver</con:driver><con:connectionString>jdbc:vertica://10.200.0.190:5433/artsa01?user=artsa01&amp;password=artsa2</con:connectionString><con:query>SELECT DISTINCT(fa.author_name), max(fa.reach)
FROM fact_article fa
INNER JOIN (
	SELECT pipeline_topic_id, article_id, publish_at, publish_at_week
	FROM topic_article ta
	WHERE pipeline_topic_id IN (${#Global#topicid})
	AND ta.publish_at BETWEEN '${#Global#querysqlstart}' AND '${#Global#querysqlend}'
	  ) ta  ON ta.article_id=fa.id
AND ta.publish_at_week=fa.publish_at_week
WHERE  ta.pipeline_topic_id IN (${#Global#topicid})
GROUP BY fa.author_name
ORDER BY max(fa.reach) DESC LIMIT 10;</con:query><con:properties/></con:config></con:testStep><con:testStep type="groovy" name="compareResultsOther"><con:settings/><con:config><script>// create groovyUtils and XmlHolder for response of Request
def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
def alert = com.eviware.soapui.support.UISupport;
def response1 = context.expand( 'SummaryOtherVertica#ResponseAsXml' )
def response2 = context.expand( '${Summary104Other#ResponseAsXml}' )
def holder1 = groovyUtils.getXmlHolder(response1)
def holder2 = groovyUtils.getXmlHolder(response2)

def jdbcStringList = []
def restStringList = []
def x = 0 as int
def y = 0 as int
def fail = 0 as int

// loop item nodes in response message
for( jdbcResults in holder1.getNodeValues( '//FACT_ARTICLE.AUTHOR_NAME, //MAX' ))
{  
  //log.info 'Item : [$jdbcResults]'
  jdbcStringList = jdbcStringList + jdbcResults
}

holder2.namespaces['ns'] = 'http://10.200.0.124/ArticleQueryApi/rest/query/aggregate'
for( restResponse in holder2.getNodeValues( '//ns:results/ns:e/ns:author_name, //ns:results/ns:e/ns:reach_max'  ))
{
  //log.info 'Item : [$restResponse]' 
  restStringList = restStringList + restResponse
    if (restResponse in jdbcStringList ) assert true
    else {
    	   //alert.showInfoMessage(jdbcStringList[x] + " counts do not match","soapUI Warning !")
    	   //log.info 'Results from vertica do not match results from articleQueryApi '+ jdbcStringList[x] + " " + restResponse
    	   log.info 'Entity : ' + jdbcStringList[x]
        log.info 'Vertica: '+ jdbcStringList[y] + " HBase: " + restResponse
        verticount = jdbcStringList[y] as Integer
        hbasecount = restResponse as Integer
        //log.info verticount
        //log.info hbasecount
       if (verticount &lt; hbasecount)
          {
             f = ((1 - (verticount/hbasecount)) * 100 )
             f = f.abs()
             log.info 'Difference of: ' + new Double(f).round(2) + '%'
             log.info 'Vertica count is less than HBase count'
          }
          else
             {
                f = ((1 - (hbasecount/verticount)) * 100 )
                f = f.abs()
                log.info 'Difference of: ' + new Double(f).round(2) + '%'
                log.info 'HBase count is less than Vertica count'
             }
       if (f &lt; 2 )
          {
             log.info 'PASS'
          }
          else
             {
                log.info 'FAILED: Percentage is > 2%'
                fail = fail + 1
             }

    x = x + 1
    
    }
    y = y + 1
}
log.info "Fail count = " + fail
log.info "request  : >" + jdbcStringList
log.info "result     : >" + restStringList
if (fail>0)
    {
       assert false : "Percentage is greater than 2%"
    }</script></con:config></con:testStep><con:properties/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="timeseries TestCase" searchProperties="true" id="074f6797-cec9-4ced-95e0-18445164ea83" disabled="true"><con:description>TestCase generated for REST Resource [timeseries] located at [/query/timeseries]</con:description><con:settings/><con:testStep type="groovy" name="settime"><con:settings/><con:config><script>Calendar sod = Calendar.instance
    sod.set(Calendar.AM_PM, 0)
    sod.set(Calendar.HOUR, 0)
    sod.set(Calendar.MINUTE, 0)
    sod.set(Calendar.SECOND, 0)
    sod.set(Calendar.MILLISECOND, 0)
start = sod.time 
sqlstart = start.format('MM-dd-yy HH:mm:ss')
//log.info "SQL Start Time:  " + sqlstart
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "querysqlstart", sqlstart )

Calendar eod = Calendar.instance
    eod.set(Calendar.AM_PM, 0)
    eod.set(Calendar.HOUR, 9)
    eod.set(Calendar.MINUTE, 59)
    eod.set(Calendar.SECOND, 59)
    eod.set(Calendar.MILLISECOND, 999)
end = eod.time 
sqlend = end.format('MM-dd-yy HH:mm:ss')
//log.info "SQL End Time:  " + sqlend
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "querysqlend", sqlend )

offset = sod.get(Calendar.ZONE_OFFSET) + sod.get(Calendar.DST_OFFSET) / (60 * 1000)

starttime = start.time
epochstart = starttime + offset
//log.info "Epoch Start Time:  " + epochstart
def epochstart = epochstart as String
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "queryepochstart", epochstart )
def timestampstart = epochstart as Long
Date tss = new Date(timestampstart)
//log.info "Time to select in local timezone:  "+ tss

endtime = end.time
epochend = endtime + offset
//log.info "Epoch End Time:  " + epochend
def epochend = epochend as String
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "queryepochend", epochend )
def timestampend = epochend as Long
Date tse = new Date(timestampend)
//log.info "Time to select in local timezone:  "+ tse

now = Calendar.instance
today = now.time
millis = today.time
//log.info "Current time in milli-seconds:  " + millis
def today = new Date (millis)
//log.info "Current Local Time:  "+ today
tf = today.format('MM dd yy HH mm ss')
//log.info "Current Local Time nicely formatted:  "+ tf
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "time", tf )</script></con:config></con:testStep><con:testStep type="restrequest" name="authuser"><con:settings/><con:config service="ARTSA - UserManager" resourcePath="/SaasCoreUserManager/rest/auth" methodName="POST - authenticate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="authuser" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="authkey" value="1189377229352574419-2213262129298445271-4936701685398756970-61" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://10.200.0.124:8080</con:endpoint><con:request>{
  "username":${#Global#username},
  "password":${#Global#original},
  "accountName":${#Global#accountname}
}</con:request><con:assertion type="XPath Match" name="XPath Match"><con:configuration><path>declare namespace soap='http://schemas.xmlsoap.org/soap/envelope/';
declare namespace ns1='http://10.200.0.124/SaasCoreUserManager/rest/auth';
//ns1:loginFailed</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="authResponse"><con:settings/><con:config><script>import groovy.json.JsonSlurper
import com.eviware.soapui.impl.wsdl.teststeps.*

responseContent = testRunner.testCase.getTestStepByName("authuser").getPropertyValue("response")
slurperresponse = new JsonSlurper().parseText(responseContent)

accountid = (slurperresponse.account)
def accountid = accountid as String
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "accountid", accountid )

accountname = (slurperresponse.accountName)
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "accountName", accountname )

authkey = (slurperresponse.authkey)
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "authkey", authkey )

userid = (slurperresponse.id)
def userid = userid as String
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "userid", userid )

username = (slurperresponse.username)
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "userName", username )

//log.info accountid
//log.info accountname
//log.info authkey
//log.info userid
//log.info username</script></con:config></con:testStep><con:testStep type="groovy" name="setutokenheader"><con:settings/><con:config><script>import com.eviware.soapui.impl.wsdl.teststeps.*
import com.eviware.soapui.support.types.StringToStringMap;

def authkey = com.eviware.soapui.SoapUI.globalProperties.getPropertyValue( "authkey")
def tc = testRunner.testCase.testSuite.getTestCaseByName("timeseries TestCase")
def ts1 = tc.getTestStepByName("Trending01VolumeMavg")
def ts2 = tc.getTestStepByName("Trending02VolumeProjections")
def ts3 = tc.getTestStepByName("Trending03Sentiment")
def ts41 = tc.getTestStepByName("Trending041TopEntitiesLevel1")
def ts42 = tc.getTestStepByName("Trending042TopEntitiesLevel2")
def ts51 = tc.getTestStepByName("Trending051TopCategoriesLevel1")
def ts52 = tc.getTestStepByName("Trending052TopCategoriesLevel2")
def ts53 = tc.getTestStepByName("Trending053TopCategoriesLevel3")
def ts54 = tc.getTestStepByName("Trending054TopCategoriesLevel4")
def ts55 = tc.getTestStepByName("Trending055TopCategoriesLevel5")

def headers = new StringToStringMap()
headers.putIfMissing("utoken",authkey)

ts1.getHttpRequest().setRequestHeaders(headers)
ts2.getHttpRequest().setRequestHeaders(headers)
ts3.getHttpRequest().setRequestHeaders(headers)
ts41.getHttpRequest().setRequestHeaders(headers)
ts42.getHttpRequest().setRequestHeaders(headers)
ts51.getHttpRequest().setRequestHeaders(headers)
ts52.getHttpRequest().setRequestHeaders(headers)
ts53.getHttpRequest().setRequestHeaders(headers)
ts54.getHttpRequest().setRequestHeaders(headers)
ts55.getHttpRequest().setRequestHeaders(headers)</script></con:config></con:testStep><con:testStep type="groovy" name="initialize_jdbc_driver"><con:settings/><con:config><script>com.eviware.soapui.support.GroovyUtils.registerJdbcDriver("vertica.jdbc.driver.vertica")</script></con:config></con:testStep><con:testStep type="restrequest" name="Trending01VolumeMavg"><con:settings/><con:config service="ARTSA  - Article Query" resourcePath="/ArticleQueryApi/rest/query/timeseries" methodName="POST - getTimeSeriesData" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Trending01VolumeMavg" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="utoken" value="-4742557622635996542--7879489892919411082--3037395183278957448-12" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://10.200.0.124:8080</con:endpoint><con:request>{
  "topicIDs":[${#Global#topicid}],
  //"limit":10,
  "selectedFields":[
    	{"field":"article_topic"},
        {"field":"content_volume()","sortDirection":"DESCENDING"},
        {"field":"ts_moving_average()","sortDirection":"ASCENDING"}
        //{"field":"combined_topics"}
  ],
  "filters":[
      //{"field":"article_title","comparison":"NOT_COOCCURS","values":["Scribd Feed"]}
  ],
  "dateRange":{"startDate":${#Global#queryepochstart},"endDate":${#Global#queryepochend}},
  "timeSlice":"HOUR"
}</con:request><con:assertion type="XPath Match" name="assert_content_volume"><con:configuration><path>declare namespace soap='http://schemas.xmlsoap.org/soap/envelope/';
declare namespace ns1='http://10.200.0.124/ArticleQueryApi/rest/query/timeseries';
//ns1:content_volume</path><content>*</content><allowWildcards>true</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="XPath Match"><con:configuration><path>declare namespace soap='http://schemas.xmlsoap.org/soap/envelope/';
declare namespace ns1='http://10.200.0.124/ArticleQueryApi/rest/query/timeseries';
//ns1:content_volume_mavg</path><content>*</content><allowWildcards>true</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="jdbc" name="TrendingVolumeVertica"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>com.vertica.Driver</con:driver><con:connectionString>jdbc:vertica://10.200.0.190:5433/artsa01?user=artsa01&amp;password=artsa2</con:connectionString><con:query>SELECT fa.publish_at_hour,COUNT(DISTINCT fa.id) content_volume
FROM fact_article fa
INNER JOIN (
	SELECT pipeline_topic_id, article_id, publish_at, publish_at_week
	FROM topic_article ta
	WHERE pipeline_topic_id IN (${#Global#topicid})
	AND ta.publish_at BETWEEN '${#Global#querysqlstart}' AND '${#Global#querysqlend}'
	   ) ta  ON ta.article_id=fa.id
AND ta.publish_at_week=fa.publish_at_week
WHERE  ta.pipeline_topic_id IN (${#Global#topicid})
GROUP BY fa.publish_at_hour
ORDER BY fa.publish_at_hour ASC  limit 100</con:query><con:properties/></con:config></con:testStep><con:testStep type="restrequest" name="Trending02VolumeProjections"><con:settings/><con:config service="ARTSA  - Article Query" resourcePath="/ArticleQueryApi/rest/query/timeseries" methodName="POST - getTimeSeriesData" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Trending02VolumeProjections" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="utoken" value="-4742557622635996542--7879489892919411082--3037395183278957448-12" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://10.200.0.124:8080</con:endpoint><con:request>{
  "topicIDs":[${#Global#topicid}],
  //"limit":10,
  "selectedFields":[
    	{"field":"article_topic"},
        {"field":"content_volume()","sortDirection":"DESCENDING"}
        //{"field":"ts_linr_mavg_dev()","sortDirection":"ASCENDING"},
        //{"field":"combined_topics"}
  ],
  "filters":[
      //{"field":"author_name","comparison":"NE","values":["geeves1279"]}
  ],
  "dateRange":{"startDate":${#Global#queryepochstart},"endDate":${#Global#queryepochend}},
  "timeSlice":"HOUR"
}</con:request><con:assertion type="XPath Match" name="assert_content_volume"><con:configuration><path>declare namespace soap='http://schemas.xmlsoap.org/soap/envelope/';
declare namespace ns1='http://10.200.0.124/ArticleQueryApi/rest/query/timeseries';
//ns1:content_volume</path><content>*</content><allowWildcards>true</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Trending03Sentiment"><con:settings/><con:config service="ARTSA  - Article Query" resourcePath="/ArticleQueryApi/rest/query/timeseries" methodName="POST - getTimeSeriesData" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Trending03Sentiment" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="utoken" value="-4742557622635996542--7879489892919411082--3037395183278957448-12" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://10.200.0.124:8080</con:endpoint><con:request>{
  "topicIDs":[${#Global#topicid}],
  //"limit":10,
  "selectedFields":[
    	{"field":"article_topic"},
        {"field":"article_sentiment","sortDirection":"ASCENDING"},
   		{"field":"content_volume()","sortDirection":"DESCENDING"}
        //{"field":"combined_topics"}
  ],
  "filters":[
      //{"field":"article_sentiment","comparison":"EQ","values":["MIXED","NEGATIVE","NEUTRAL","POSITIVE"]}
  ],
  "dateRange":{"startDate":${#Global#queryepochstart},"endDate":${#Global#queryepochend}},
  "timeSlice":"HOUR"
}</con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="jdbc" name="TrendingSentimentVertica"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>com.vertica.Driver</con:driver><con:connectionString>jdbc:vertica://10.200.0.190:5433/artsa01?user=artsa01&amp;password=artsa2</con:connectionString><con:query>SELECT fa.publish_at_hour,fa.sentiment,COUNT(DISTINCT fa.id) content_volume
FROM fact_article fa
INNER JOIN (
	SELECT pipeline_topic_id, article_id, publish_at, publish_at_week
	FROM topic_article ta
	WHERE pipeline_topic_id IN (${#Global#topicid})
	AND ta.publish_at BETWEEN '${#Global#querysqlstart}' AND '${#Global#querysqlend}'
	   ) ta  ON ta.article_id=fa.id
AND ta.publish_at_week=fa.publish_at_week
WHERE  ta.pipeline_topic_id IN (${#Global#topicid})
GROUP BY fa.sentiment, fa.publish_at_hour
ORDER BY fa.sentiment DESC, fa.publish_at_hour ASC  limit 100</con:query><con:properties/></con:config></con:testStep><con:testStep type="restrequest" name="Trending041TopEntitiesLevel1"><con:settings/><con:config service="ARTSA  - Article Query" resourcePath="/ArticleQueryApi/rest/query/timeseries" methodName="POST - getTimeSeriesData" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Trending041TopEntitiesLevel1" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="utoken" value="-4742557622635996542--7879489892919411082--3037395183278957448-12" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://10.200.0.124:8080</con:endpoint><con:request>{
  "topicIDs":[${#Global#topicid}],
  "limit":10,
  "selectedFields":[
    	//{"field":"article_topic"},
    	{"field":"entity_type"},
    	{"field":"content_volume()","sortDirection":"DESCENDING"}
        //{"field":"combined_topics"}
  ],
  "filters":[
       //{'field':'entity_type','comparison':'EQ','values':['@USERNAME','HASHTAG','PERSON','AMBIGUOUS_ICON','POSITIVE_ICON']}
  ],
  "dateRange":{"startDate":${#Global#queryepochstart},"endDate":${#Global#queryepochend}},
  "timeSlice":"HOUR"
}</con:request><con:assertion type="XPath Match" name="assert_content_volume"><con:configuration><path>declare namespace soap='http://schemas.xmlsoap.org/soap/envelope/';
declare namespace ns1='http://10.200.0.124/ArticleQueryApi/rest/query/timeseries';
//ns1:content_volume</path><content>*</content><allowWildcards>true</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="jdbc" name="TrendingTopEntitiesLevel1Vertica"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>com.vertica.Driver</con:driver><con:connectionString>jdbc:vertica://10.200.0.190:5433/artsa01?user=artsa01&amp;password=artsa2</con:connectionString><con:query>SELECT fa.publish_at_hour,en.level1,COUNT(DISTINCT fa.id) content_volume
FROM fact_article fa
INNER JOIN (
	SELECT pipeline_topic_id, article_id, publish_at, publish_at_week
	FROM topic_article ta
	WHERE pipeline_topic_id IN (${#Global#topicid})
	AND ta.publish_at BETWEEN '${#Global#querysqlstart}' AND '${#Global#querysqlend}'
	   ) ta on ta.article_id=fa.id
INNER JOIN multi_level_annotation en on en.article_id=ta.article_id
AND ta.publish_at_week=fa.publish_at_week
WHERE  ta.pipeline_topic_id IN (${#Global#topicid})
AND en.account IN (0,${#Global#accountid})
AND en.level1 IN
	(
	SELECT en.level1
	FROM topic_article ta, fact_article fa, multi_level_annotation en
	WHERE  ta.pipeline_topic_id IN (${#Global#topicid})
	AND ta.article_id = fa.id AND en.article_id = fa.id
	AND en.type = 'entity'
	AND ta.publish_at BETWEEN '${#Global#querysqlstart}' AND '${#Global#querysqlend}'
	GROUP BY en.level1
	ORDER BY COUNT(DISTINCT(fa.id)) DESC LIMIT 50
	)
GROUP BY en.level1, fa.publish_at_hour
ORDER BY en.level1 ASC, fa.publish_at_hour ASC  limit 500</con:query><con:properties/></con:config></con:testStep><con:testStep type="restrequest" name="Trending042TopEntitiesLevel2"><con:settings/><con:config service="ARTSA  - Article Query" resourcePath="/ArticleQueryApi/rest/query/timeseries" methodName="POST - getTimeSeriesData" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Trending042TopEntitiesLevel2" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="utoken" value="-4742557622635996542--7879489892919411082--3037395183278957448-12" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://10.200.0.124:8080</con:endpoint><con:request>{
  "topicIDs":[${#Global#topicid}],
  //"limit":10,
  "selectedFields":[
    	//{"field":"article_topic"},
    	{"field":"entity_value"},
    	{"field":"content_volume()","sortDirection":"DESCENDING"}
        //{"field":"combined_topics"}
  ],
  "filters":[
      {"field":"entity_type","comparison":"EQ","values":["NEGATIVE_ICON"]}
  ],
  "dateRange":{"startDate":${#Global#queryepochstart},"endDate":${#Global#queryepochend}},
  "timeSlice":"HOUR"
}</con:request><con:assertion type="XPath Match" name="assert_content_volume"><con:configuration><path>declare namespace soap='http://schemas.xmlsoap.org/soap/envelope/';
declare namespace ns1='http://10.200.0.124/ArticleQueryApi/rest/query/timeseries';
//ns1:content_volume</path><content>*</content><allowWildcards>true</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Trending051TopCategoriesLevel1"><con:settings/><con:config service="ARTSA  - Article Query" resourcePath="/ArticleQueryApi/rest/query/timeseries" methodName="POST - getTimeSeriesData" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Trending051TopCategoriesLevel1" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="utoken" value="-4742557622635996542--7879489892919411082--3037395183278957448-12" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://10.200.0.124:8080</con:endpoint><con:request>{
  "topicIDs":[${#Global#topicid}],
  "limit":"20",
  "selectedFields":[
        //{"field":"article_topic"},
	    {"field":"category_type"},
	    {"field":"content_volume()", "sortDirection":"DESCENDING"},
   	    {"field":"category_level1"}
        //{"field":"combined_topics"}
  ],
  "filters":[
	  //{"field":"category_level1","comparison":"EQ","values":["Emotions_Category_Set","Dynamic Routing Category Set","Consumer_Electronics_Master_Category_Set","Telco_Product_Promotion","Political_Category_Set"]}
  ],
  "dateRange":{"startDate":${#Global#queryepochstart},"endDate":${#Global#queryepochend}},
  "timeSlice":"HOUR"
}</con:request><con:assertion type="XPath Match" name="assert_content_volume"><con:configuration><path>declare namespace soap='http://schemas.xmlsoap.org/soap/envelope/';
declare namespace ns1='http://10.200.0.124/ArticleQueryApi/rest/query/timeseries';
//ns1:content_volume</path><content>*</content><allowWildcards>true</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="jdbc" name="TrendingTopCategoriesLevel1Vertica"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>com.vertica.Driver</con:driver><con:connectionString>jdbc:vertica://10.200.0.190:5433/artsa01?user=artsa01&amp;password=artsa2</con:connectionString><con:query>SELECT fa.publish_at_hour,en.level1,COUNT(DISTINCT fa.id) content_volume	
FROM fact_article fa	
INNER JOIN (	
	SELECT pipeline_topic_id, article_id, publish_at, publish_at_week
	FROM topic_article ta
	WHERE pipeline_topic_id IN (${#Global#topicid})
	AND ta.publish_at BETWEEN '${#Global#querysqlstart}' AND '${#Global#querysqlend}'
	   ) ta on ta.article_id=fa.id
INNER JOIN multi_level_annotation en on en.article_id=ta.article_id
AND ta.publish_at_week=fa.publish_at_week
WHERE  ta.pipeline_topic_id IN (${#Global#topicid})
AND en.account IN (0,${#Global#accountid})
AND en.level1 IN
	(
	SELECT en.level1
	FROM topic_article ta, fact_article fa, multi_level_annotation en
	WHERE  ta.pipeline_topic_id IN (${#Global#topicid})
	AND ta.article_id = fa.id AND en.article_id = fa.id
	AND en.type = 'category'
	AND ta.publish_at BETWEEN '${#Global#querysqlstart}' AND '${#Global#querysqlend}'
	GROUP BY en.level1
	ORDER BY COUNT(DISTINCT(fa.id)) DESC LIMIT 30
	)
GROUP BY en.level1, fa.publish_at_hour
ORDER BY en.level1 ASC, fa.publish_at_hour ASC  limit 300</con:query><con:properties/></con:config></con:testStep><con:testStep type="restrequest" name="Trending052TopCategoriesLevel2"><con:settings/><con:config service="ARTSA  - Article Query" resourcePath="/ArticleQueryApi/rest/query/timeseries" methodName="POST - getTimeSeriesData" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Trending052TopCategoriesLevel2" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="utoken" value="-4742557622635996542--7879489892919411082--3037395183278957448-12" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://10.200.0.124:8080</con:endpoint><con:request>{
  "topicIDs":[${#Global#topicid}],
  "limit":"20",  
  "selectedFields":[
        //{"field":"article_topic"},
        {"field":"category_level2" , "sortDirection":"ASCENDING"} , 
        {"field":"content_volume()", "sortDirection":"DESCENDING"}
        //{"field":"combined_topics"}
  ],  
  "filters":[  
      {"field":"category_level1","comparison":"EQ","values":["Dynamic Routing Category Set"]}  
  ],
  "dateRange":{"startDate":${#Global#queryepochstart},"endDate":${#Global#queryepochend}},
  "timeSlice":"HOUR"
}</con:request><con:assertion type="XPath Match" name="assert_content_volume"><con:configuration><path>declare namespace soap='http://schemas.xmlsoap.org/soap/envelope/';
declare namespace ns1='http://10.200.0.124/ArticleQueryApi/rest/query/timeseries';
//ns1:content_volume</path><content>*</content><allowWildcards>true</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Trending053TopCategoriesLevel3"><con:settings/><con:config service="ARTSA  - Article Query" resourcePath="/ArticleQueryApi/rest/query/timeseries" methodName="POST - getTimeSeriesData" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Trending053TopCategoriesLevel3" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="utoken" value="-4742557622635996542--7879489892919411082--3037395183278957448-12" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://10.200.0.124:8080</con:endpoint><con:request>{
  "topicIDs":[${#Global#topicid}],
  "limit":"20",
  "selectedFields":[
	    {"field":"category_level3" , "sortDirection":"ASCENDING"},
   	    {"field":"content_volume()", "sortDirection":"DESCENDING"}
        //{"field":"combined_topics"}
  ],
  "filters":[
	  {"field":"category_level1","comparison":"EQ","values":["Dynamic Routing Category Set"]},
	  {"field":"category_level2","comparison":"EQ","values":["Sentiment"]}
  ],
  "dateRange":{"startDate":${#Global#queryepochstart},"endDate":${#Global#queryepochend}},
  "timeSlice":"HOUR"
}</con:request><con:assertion type="XPath Match" name="assert_content_volume"><con:configuration><path>declare namespace soap='http://schemas.xmlsoap.org/soap/envelope/';
declare namespace ns1='http://10.200.0.124/ArticleQueryApi/rest/query/timeseries';
//ns1:content_volume</path><content>*</content><allowWildcards>true</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Trending054TopCategoriesLevel4"><con:settings/><con:config service="ARTSA  - Article Query" resourcePath="/ArticleQueryApi/rest/query/timeseries" methodName="POST - getTimeSeriesData" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Trending054TopCategoriesLevel4" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="utoken" value="-4742557622635996542--7879489892919411082--3037395183278957448-12" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://10.200.0.124:8080</con:endpoint><con:request>{
  "topicIDs":[${#Global#topicid}],
  "limit":"20",
  "selectedFields":[
        {"field":"category_level4" , "sortDirection":"ASCENDING"},
   	    {"field":"content_volume()", "sortDirection":"DESCENDING"}
        //{"field":"combined_topics"}
  ],
  "filters":[
      {"field":"category_level1","comparison":"EQ","values":["Dynamic Routing Category Set"]},
      {"field":"category_level3","comparison":"EQ","values":["Negative"]}
  ],
  "dateRange":{"startDate":${#Global#queryepochstart},"endDate":${#Global#queryepochend}},
  "timeSlice":"HOUR"
}</con:request><con:assertion type="XPath Match" name="assert_content_volume"><con:configuration><path>declare namespace soap='http://schemas.xmlsoap.org/soap/envelope/';
declare namespace ns1='http://10.200.0.124/ArticleQueryApi/rest/query/timeseries';
//ns1:content_volume</path><content>*</content><allowWildcards>true</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Trending055TopCategoriesLevel5"><con:settings/><con:config service="ARTSA  - Article Query" resourcePath="/ArticleQueryApi/rest/query/timeseries" methodName="POST - getTimeSeriesData" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Trending055TopCategoriesLevel5" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="utoken" value="-4742557622635996542--7879489892919411082--3037395183278957448-12" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://10.200.0.124:8080</con:endpoint><con:request>{
  "topicIDs":[${#Global#topicid}],
  "limit":"20",
  "selectedFields":[
        {"field":"category_level5" , "sortDirection":"ASCENDING"},
   	    {"field":"content_volume()", "sortDirection":"DESCENDING"}
        //{"field":"combined_topics"}
  ],
  "filters":[
      {"field":"category_level1","comparison":"EQ","values":["Dynamic Routing Category Set"]},
   	  {"field":"category_level4","comparison":"EQ","values":["Complaints"]}
  ],
  "dateRange":{"startDate":${#Global#queryepochstart},"endDate":${#Global#queryepochend}},
  "timeSlice":"HOUR"
}</con:request><con:assertion type="XPath Match" name="assert_content_volume"><con:configuration><path>declare namespace soap='http://schemas.xmlsoap.org/soap/envelope/';
declare namespace ns1='http://10.200.0.124/ArticleQueryApi/rest/query/timeseries';
//ns1:content_volume</path><content>*</content><allowWildcards>true</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:properties/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="details TestCase" searchProperties="true" id="9d37a32c-65ff-408f-969b-86ba2d4c72ef"><con:description>TestCase generated for REST Resource [details] located at [/query/details]</con:description><con:settings/><con:testStep type="restrequest" name="authuser"><con:settings/><con:config service="ARTSA - UserManager" resourcePath="/SaasCoreUserManager/rest/auth" methodName="POST - authenticate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="authuser" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="authkey" value="1189377229352574419-2213262129298445271-4936701685398756970-61" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://10.200.0.124:8080</con:endpoint><con:request>{
  "username":${#Global#username},
  "password":${#Global#original},
  "accountName":${#Global#accountname}
}</con:request><con:assertion type="XPath Match" name="XPath Match"><con:configuration><path>declare namespace soap='http://schemas.xmlsoap.org/soap/envelope/';
declare namespace ns1='http://10.200.0.124/SaasCoreUserManager/rest/auth';
//ns1:loginFailed</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="authResponse"><con:settings/><con:config><script>import groovy.json.JsonSlurper
import com.eviware.soapui.impl.wsdl.teststeps.*

responseContent = testRunner.testCase.getTestStepByName("authuser").getPropertyValue("response")
slurperresponse = new JsonSlurper().parseText(responseContent)

accountid = (slurperresponse.account)
def accountid = accountid as String
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "accountid", accountid )

accountname = (slurperresponse.accountName)
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "accountName", accountname )

authkey = (slurperresponse.authkey)
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "authkey", authkey )

userid = (slurperresponse.id)
def userid = userid as String
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "userid", userid )

username = (slurperresponse.username)
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "userName", username )

//log.info accountid
//log.info accountname
//log.info authkey
//log.info userid
//log.info username</script></con:config></con:testStep><con:testStep type="groovy" name="setutokenheader"><con:settings/><con:config><script>import com.eviware.soapui.impl.wsdl.teststeps.*
import com.eviware.soapui.support.types.StringToStringMap;

def authkey = com.eviware.soapui.SoapUI.globalProperties.getPropertyValue( "authkey")
def tc = testRunner.testCase.testSuite.getTestCaseByName("details TestCase")
def ts1 = tc.getTestStepByName("articleDetails")

def headers = new StringToStringMap()
headers.putIfMissing("utoken",authkey)

ts1.getHttpRequest().setRequestHeaders(headers)</script></con:config></con:testStep><con:testStep type="restrequest" name="articleDetails"><con:settings/><con:config service="ARTSA  - Article Query" resourcePath="/ArticleQueryApi/rest/query/details" methodName="POST - getArticleDetailsData" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="articleDetails" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="utoken" value="-5029637814563935897--1471838736362561957--8563156949535319522-12" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://10.200.0.124:8080</con:endpoint><con:request>{
  "topicIDs":[${#Global#topicid}],
  "limit":240,
  "selectedFields":[
    {"field":"article_published_at","sortDirection":"ASCENDING"},
    {"field":"article_publisher"},
    {"field":"article_screen_name"},
    {"field":"pipeline_article_id"},
     //{"field":"article_title"},
     //{"field":"article_topic"},
     //{"field":"article_uri"},
     {"field":"article_content_subtype"},
     {"field":"article_content_type"},
     {"field":"author_name"}
     //{"field":"author_image_url"}
     //{"field":"body"}
  ],

  "filters":[
      //{"field":"article_title","comparison":"EQ","values":["RT @DoubleDeckerSof: Nunca me ha dado tweetlimit. #confesiÃƒÂ³n"]}
  ],
  "dateRange":{"startDate":${#Global#queryepochstart},"endDate":${#Global#queryepochend}},
  "timeSlice":"HOUR"
}</con:request><con:assertion type="XPath Match" name="assert_pipline_article_id"><con:configuration><path>declare namespace soap='http://schemas.xmlsoap.org/soap/envelope/';
declare namespace ns1='http://10.200.0.124/ArticleQueryApi/rest/query/details';
//ns1:pipeline_article_id</path><content>*</content><allowWildcards>true</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:properties/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="fieldsmap TestCase" searchProperties="true" id="614b76dd-8c60-4906-93e6-57121c6f0d55"><con:description>TestCase generated for REST Resource [fieldsmap] located at [/query/fieldsmap]</con:description><con:settings/><con:testStep type="restrequest" name="authuser"><con:settings/><con:config service="ARTSA - UserManager" resourcePath="/SaasCoreUserManager/rest/auth" methodName="POST - authenticate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="authuser" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="authkey" value="1189377229352574419-2213262129298445271-4936701685398756970-61" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://10.200.0.124:8080</con:endpoint><con:request>{
  "username":${#Global#username},
  "password":${#Global#original},
  "accountName":${#Global#accountname}
}</con:request><con:assertion type="XPath Match" name="XPath Match"><con:configuration><path>declare namespace soap='http://schemas.xmlsoap.org/soap/envelope/';
declare namespace ns1='http://10.200.0.124/SaasCoreUserManager/rest/auth';
//ns1:loginFailed</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="authResponse"><con:settings/><con:config><script>import groovy.json.JsonSlurper
import com.eviware.soapui.impl.wsdl.teststeps.*

responseContent = testRunner.testCase.getTestStepByName("authuser").getPropertyValue("response")
slurperresponse = new JsonSlurper().parseText(responseContent)

accountid = (slurperresponse.account)
def accountid = accountid as String
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "accountid", accountid )

accountname = (slurperresponse.accountName)
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "accountName", accountname )

authkey = (slurperresponse.authkey)
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "authkey", authkey )

userid = (slurperresponse.id)
def userid = userid as String
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "userid", userid )

username = (slurperresponse.username)
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "userName", username )

//log.info accountid
//log.info accountname
//log.info authkey
//log.info userid
//log.info username</script></con:config></con:testStep><con:testStep type="groovy" name="setutokenheader"><con:settings/><con:config><script>import com.eviware.soapui.impl.wsdl.teststeps.*
import com.eviware.soapui.support.types.StringToStringMap;

def authkey = com.eviware.soapui.SoapUI.globalProperties.getPropertyValue( "authkey")
def tc = testRunner.testCase.testSuite.getTestCaseByName("fieldsmap TestCase")
def ts1 = tc.getTestStepByName("articleFieldsMap")

def headers = new StringToStringMap()
headers.putIfMissing("utoken",authkey)

ts1.getHttpRequest().setRequestHeaders(headers)</script></con:config></con:testStep><con:testStep type="restrequest" name="articleFieldsMap"><con:settings/><con:config service="ARTSA  - Article Query" resourcePath="/ArticleQueryApi/rest/query/fieldsmap" methodName="POST - getArticleFieldsMap" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="articleFieldsMap" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="utoken" value="-6809163478161665169--3236492388170376451-3272227922884086339-12" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://10.200.0.124:8080</con:endpoint><con:request/><con:assertion type="XPath Match" name="assert_aquired_at"><con:configuration><path>declare namespace soap='http://schemas.xmlsoap.org/soap/envelope/';
declare namespace ns1='http://10.200.0.124/ArticleQueryApi/rest/query/fieldsmap';
//ns1:acquired_at</path><content>*</content><allowWildcards>true</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:properties/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="population TestCase" searchProperties="true" id="88b0bea8-eede-4416-90ca-a8aebd0ee158"><con:description>TestCase generated for REST Resource [population] located at [/query/population]</con:description><con:settings/><con:testStep type="restrequest" name="authuser"><con:settings/><con:config service="ARTSA - UserManager" resourcePath="/SaasCoreUserManager/rest/auth" methodName="POST - authenticate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="authuser" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="authkey" value="1189377229352574419-2213262129298445271-4936701685398756970-61" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://10.200.0.124:8080</con:endpoint><con:request>{
  "username":${#Global#username},
  "password":${#Global#original},
  "accountName":${#Global#accountname}
}</con:request><con:assertion type="XPath Match" name="XPath Match"><con:configuration><path>declare namespace soap='http://schemas.xmlsoap.org/soap/envelope/';
declare namespace ns1='http://10.200.0.124/SaasCoreUserManager/rest/auth';
//ns1:loginFailed</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="authResponse"><con:settings/><con:config><script>import groovy.json.JsonSlurper
import com.eviware.soapui.impl.wsdl.teststeps.*

responseContent = testRunner.testCase.getTestStepByName("authuser").getPropertyValue("response")
slurperresponse = new JsonSlurper().parseText(responseContent)

accountid = (slurperresponse.account)
def accountid = accountid as String
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "accountid", accountid )

accountname = (slurperresponse.accountName)
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "accountName", accountname )

authkey = (slurperresponse.authkey)
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "authkey", authkey )

userid = (slurperresponse.id)
def userid = userid as String
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "userid", userid )

username = (slurperresponse.username)
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "userName", username )

//log.info accountid
//log.info accountname
//log.info authkey
//log.info userid
//log.info username</script></con:config></con:testStep><con:testStep type="groovy" name="setutokenheader"><con:settings/><con:config><script>import com.eviware.soapui.impl.wsdl.teststeps.*
import com.eviware.soapui.support.types.StringToStringMap;

def authkey = com.eviware.soapui.SoapUI.globalProperties.getPropertyValue( "authkey")
def tc = testRunner.testCase.testSuite.getTestCaseByName("population TestCase")
def ts1 = tc.getTestStepByName("populationData")

def headers = new StringToStringMap()
headers.putIfMissing("utoken",authkey)

ts1.getHttpRequest().setRequestHeaders(headers)</script></con:config></con:testStep><con:testStep type="restrequest" name="populationData"><con:settings/><con:config service="ARTSA  - Article Query" methodName="GET - getPopulation" resourcePath="/ArticleQueryApi/rest/query/population" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="populationData" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="utoken" value="-5403279992941583180--3068588693549796658-8793215771450706698-12" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://10.200.0.124:8080</con:endpoint><con:request/><con:assertion type="XPath Match" name="assert_us"><con:configuration><path>declare namespace soap='http://schemas.xmlsoap.org/soap/envelope/';
declare namespace ns1='http://10.200.0.124/ArticleQueryApi/rest/query/population';
//ns1:us</path><content>*</content><allowWildcards>true</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:properties/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="csvresults TestCase" searchProperties="true" id="a323425e-41b2-4241-8e3b-381b08066317" disabled="true"><con:description>TestCase generated for REST Resource [csvresults] located at [/query/csvresults]</con:description><con:settings/><con:testStep type="restrequest" name="Request 1"><con:settings/><con:config service="ARTSA  - Article Query" resourcePath="/ArticleQueryApi/rest/query/csvresults" methodName="OPTIONS - fixOptionsCSVResults" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Request 1" mediaType="application/json"><con:settings/><con:endpoint>http://10.200.0.124:8080</con:endpoint><con:request/><con:parameters/></con:restRequest></con:config></con:testStep><con:properties/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="/topicvolume/{id} TestCase" searchProperties="true" id="9ccf4b63-044a-48d0-8416-e337800569d8" disabled="true"><con:description>TestCase generated for REST Resource [/topicvolume/{id}] located at [/query/topicvolume/{id}]</con:description><con:settings/><con:testStep type="restrequest" name="Request 1"><con:settings/><con:config service="ARTSA  - Article Query" resourcePath="/ArticleQueryApi/rest/query/topicvolume/{id}" methodName="GET - getTopicAverage" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Request 1" mediaType="application/json"><con:settings/><con:endpoint>http://10.200.0.124:8080</con:endpoint><con:request/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Request 1 1"><con:settings/><con:config service="ARTSA  - Article Query" resourcePath="/ArticleQueryApi/rest/query/topicvolume/{id}" methodName="OPTIONS - fixOptionsTopicAverage" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Request 1 1" mediaType="application/json"><con:settings/><con:endpoint>http://10.200.0.124:8080</con:endpoint><con:request/><con:parameters/></con:restRequest></con:config></con:testStep><con:properties/></con:testCase><con:properties><con:property><con:name>Url</con:name><con:value>jdbc:vertica://10.200.0.190:5433/artsa01</con:value></con:property><con:property><con:name>User</con:name><con:value>artsa01</con:value></con:property><con:property><con:name>Pass</con:name><con:value>artsa2</con:value></con:property><con:property><con:name>Driver</con:name><con:value>com.vertica.Driver</con:value></con:property></con:properties></con:testSuite><con:testSuite name="AggregateTestSuite"><con:description>TestSuite generated for REST Service [ARTSA  - Article Query]</con:description><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="AggregateAuthorLocationByState" searchProperties="true" id="50f40f49-2c3c-4b77-a25c-ec558f990777" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword=""><con:settings/><con:testStep type="groovy" name="settime"><con:settings/><con:config><script>Calendar sod = Calendar.instance
    sod.set(Calendar.AM_PM, 0)
    sod.set(Calendar.HOUR, 0)
    sod.set(Calendar.MINUTE, 0)
    sod.set(Calendar.SECOND, 0)
    sod.set(Calendar.MILLISECOND, 0)
start = sod.time 
sqlstart = start.format('MM-dd-yy HH:mm:ss')
filestart = start.format('MM-dd-yy_HH-mm-ss')
//log.info "SQL Start Time:  " + sqlstart
//log.info "File Start Time:  " + filestart
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "querysqlstart", sqlstart )
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "filestart", filestart )

Calendar eod = Calendar.instance
    eod.set(Calendar.AM_PM, 0)
    eod.set(Calendar.HOUR, 9)
    eod.set(Calendar.MINUTE, 59)
    eod.set(Calendar.SECOND, 59)
    eod.set(Calendar.MILLISECOND, 999)
end = eod.time 
sqlend = end.format('MM-dd-yy HH:mm:ss')
fileend = end.format('MM-dd-yy_HH-mm-ss')
//log.info "SQL End Time:  " + sqlend
//log.info "File End Time:  " + fileend
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "querysqlend", sqlend )
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "fileend", fileend )

offset = sod.get(Calendar.ZONE_OFFSET) + sod.get(Calendar.DST_OFFSET) / (60 * 1000)

starttime = start.time
epochstart = starttime + offset
//log.info "Epoch Start Time:  " + epochstart
def epochstart = epochstart as String
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "queryepochstart", epochstart )
def timestampstart = epochstart as Long
Date tss = new Date(timestampstart)
//log.info "Time to select in local timezone:  "+ tss

endtime = end.time
epochend = endtime + offset
//log.info "Epoch End Time:  " + epochend
def epochend = epochend as String
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "queryepochend", epochend )
def timestampend = epochend as Long
Date tse = new Date(timestampend)
//log.info "Time to select in local timezone:  "+ tse

now = Calendar.instance
today = now.time
millis = today.time
//log.info "Current time in milli-seconds:  " + millis
def today = new Date (millis)
//log.info "Current Local Time:  "+ today
tf = today.format('MM dd yy HH mm ss')
//log.info "Current Local Time nicely formatted:  "+ tf
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "time", tf )</script></con:config></con:testStep><con:testStep type="restrequest" name="authuser"><con:settings/><con:config service="ARTSA - UserManager" resourcePath="/SaasCoreUserManager/rest/auth" methodName="POST - authenticate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="authuser" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="authkey" value="1189377229352574419-2213262129298445271-4936701685398756970-61" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://10.200.0.124:8080</con:endpoint><con:request>{
  "username":"admin",
  "password":"admin1",
  "accountName":"attensity"
}</con:request><con:assertion type="XPath Match" name="XPath Match"><con:configuration><path>declare namespace soap='http://schemas.xmlsoap.org/soap/envelope/';
declare namespace ns1='http://10.200.0.124/SaasCoreUserManager/rest/auth';
//ns1:loginFailed</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="authResponse"><con:settings/><con:config><script>import groovy.json.JsonSlurper
import com.eviware.soapui.impl.wsdl.teststeps.*

responseContent = testRunner.testCase.getTestStepByName("authuser").getPropertyValue("response")
slurperresponse = new JsonSlurper().parseText(responseContent)

accountid = (slurperresponse.account)
def accountid = accountid as String
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "accountid", accountid )

accountname = (slurperresponse.accountName)
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "accountName", accountname )

authkey = (slurperresponse.authkey)
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "authkey", authkey )

userid = (slurperresponse.id)
def userid = userid as String
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "userid", userid )

username = (slurperresponse.username)
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "userName", username )

username = (slurperresponse.username)
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "userName", username )

//log.info accountid
//log.info accountname
//log.info authkey
//log.info userid
//log.info username</script></con:config></con:testStep><con:testStep type="groovy" name="setutokenheader"><con:settings/><con:config><script>import com.eviware.soapui.impl.wsdl.teststeps.*
import com.eviware.soapui.support.types.StringToStringMap;

def authkey = com.eviware.soapui.SoapUI.globalProperties.getPropertyValue( "authkey")
def tc = testRunner.testCase.testSuite.getTestCaseByName("AggregateAuthorLocationByState")
def ts11 = tc.getTestStepByName("Summary011AuthorLocationState")


def headers = new StringToStringMap()
headers.putIfMissing("utoken",authkey)

ts11.getHttpRequest().setRequestHeaders(headers)</script></con:config></con:testStep><con:testStep type="groovy" name="initialize_jdbc_driver"><con:settings/><con:config><script>com.eviware.soapui.support.GroovyUtils.registerJdbcDriver("vertica.jdbc.driver.vertica")</script></con:config></con:testStep><con:testStep type="restrequest" name="Summary011AuthorLocationState"><con:settings/><con:config service="ARTSA  - Article Query" resourcePath="/ArticleQueryApi/rest/query/aggregate" methodName="POST - getAggregateData" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Summary011AuthorLocationState" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="utoken" value="-4251603406501097188-4978318917706716142--2895603715738162624-1001" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://10.200.0.124:8080</con:endpoint><con:request>{
  "topicIDs":[${#Global#topicid}],
  "limit":"100",
  "selectedFields":[
        {"field":"content_volume()","sortDirection":"DESCENDING"},
        {"field":"author_state"}
        //{"field":"article_topic"}
  ],
  "filters":[
      {"field":"author_country","comparison":EQ,"values":["us"]}    
  ],
  "dateRange":{"startDate":${#Global#queryepochstart},"endDate":${#Global#queryepochend}}
}</con:request><con:assertion type="XPath Match" name="assert_author_state" disabled="true"><con:configuration><path>declare namespace soap='http://schemas.xmlsoap.org/soap/envelope/';
declare namespace ns1='http://10.200.0.124/ArticleQueryApi/rest/query/aggregate';
//ns1:author_state</path><content>*</content><allowWildcards>true</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="jdbc" name="SummaryAuthorLocationStateVertica"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>com.vertica.Driver</con:driver><con:connectionString>jdbc:vertica://10.200.0.190:5433/artsa01?user=artsa01&amp;password=artsa2</con:connectionString><con:query>SELECT fa.author_state, COUNT(DISTINCT fa.id) content_volume
FROM fact_article fa
INNER JOIN (
	SELECT pipeline_topic_id, article_id, publish_at, publish_at_week
	FROM topic_article ta
	WHERE pipeline_topic_id IN (${#Global#topicid})
	AND ta.publish_at BETWEEN '${#Global#querysqlstart}' AND '${#Global#querysqlend}'
	  ) ta  ON ta.article_id=fa.id
AND ta.publish_at_week=fa.publish_at_week
WHERE  ta.pipeline_topic_id IN (${#Global#topicid})
AND fa.author_country IN ('us')
GROUP BY fa.author_state
ORDER BY COUNT(DISTINCT fa.id) DESC, fa.author_state ASC  limit 100</con:query><con:properties/></con:config></con:testStep><con:testStep type="jdbc" name="SummaryAuthorLocationStatePaviTest" disabled="true"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>com.vertica.Driver</con:driver><con:connectionString>jdbc:vertica://10.200.0.205:5433/attensity?user=pavi_test&amp;password=attensity</con:connectionString><con:query>SELECT fa.author_state, COUNT(DISTINCT fa.id) content_volume
FROM fact_article fa
INNER JOIN (
	SELECT pipeline_topic_id, article_id, publish_at, publish_at_week
	FROM topic_article ta
	WHERE pipeline_topic_id IN (${#Global#topicid})
	AND ta.publish_at BETWEEN '${#Global#querysqlstart}' AND '${#Global#querysqlend}'
	  ) ta  ON ta.article_id=fa.id
AND ta.publish_at_week=fa.publish_at_week
WHERE  ta.pipeline_topic_id IN (${#Global#topicid})
AND fa.author_country IN ('us')
GROUP BY fa.author_state
ORDER BY COUNT(DISTINCT fa.id) DESC, fa.author_state ASC  limit 100</con:query><con:properties/></con:config></con:testStep><con:testStep type="groovy" name="compareResultsAuthorLocationState"><con:settings/><con:config><script><![CDATA[// create groovyUtils and XmlHolder for response of Request
def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
def alert = com.eviware.soapui.support.UISupport;
def response1 = context.expand( 'SummaryAuthorLocationStateVertica#ResponseAsXml' )
def response2 = context.expand( '${Summary011AuthorLocationState#ResponseAsXml}' )
def holder1 = groovyUtils.getXmlHolder(response1)
def holder2 = groovyUtils.getXmlHolder(response2)

log.info "*************************************************************"
log.info "   Begin test for : " + context.getCurrentStep().getLabel()
log.info "*************************************************************"

// loop item nodes in Vertica response message
def jdbcMap = [:];
def jdbcEntityTypeArr = holder1.getNodeValues( '//FACT_ARTICLE.AUTHOR_STATE' )
def jdbcEntityVolumeArr = holder1.getNodeValues( '//CONTENT_VOLUME' )
for( int z=0; z<jdbcEntityTypeArr.length; z++) {  
	jdbcMap.put(jdbcEntityTypeArr[z],jdbcEntityVolumeArr[z]);
}
//log.info jdbcMap

// loop item nodes in REST response message
def restMap = [:];
holder2.namespaces['ns'] = 'http://10.200.0.124/ArticleQueryApi/rest/query/aggregate'
def restEntityTypeArr = holder2.getNodeValues( '//ns:results/ns:e/ns:author_state'  )
def restEntityVolumeArr = holder2.getNodeValues( '//ns:results/ns:e/ns:content_volume'  )
for( int z=0; z<restEntityTypeArr.length; z++) {  
	restMap.put(restEntityTypeArr[z],restEntityVolumeArr[z]);
}
//log.info restMap

class CompRes {
	def jdbcKey;
	def jdbcValue;
	def restValue;
  CompRes(jdbcKey1, jdbcValue1, restValue1) {
  	jdbcKey = jdbcKey1;
  	jdbcValue = jdbcValue1;
  	restValue = restValue1;
  }
  def fail() {
  	if(jdbcValue == null || restValue == null) {
  		return -1;
  	}
  	def f;
//  	if ((jdbcValue.toInteger() < 100 || restValue.toInteger() < 100) && (jdbcValue.toInteger()-restValue.toInteger() > 2 || restValue.toInteger()-jdbcValue.toInteger() > 2))
//  	{
//  		return -1;
//  	}
//  	else {
//  		return 0;
//  	}
     if (jdbcValue.toInteger() < restValue.toInteger())
     {
        f = ((1 - (jdbcValue.toInteger()/restValue.toInteger())) * 100 )
        f = f.abs()
     }
     else
     {
        f = ((1 - (restValue.toInteger()/jdbcValue.toInteger())) * 100 )
        f = f.abs()
     }
	if(f > 2) {
		return new Double(f).round(2);
	}
	return 0;
  }
}

def comparisonResults = [];
for(j in jdbcMap) {
	def jdbcKey = j.key;
	def jdbcValue = j.value;
	def restValue = restMap.get(jdbcKey);
	if(restValue == null || restValue != jdbcValue) {
		def comparisonResult = new CompRes(jdbcKey, jdbcValue, restValue);
		comparisonResults.add(comparisonResult);
	}
}
for(r in restMap) {
	def restKey = r.key;
	def restValue = r.value;
	def jdbcValue = jdbcMap.get(restKey);
	if(jdbcValue == null) {
		def comparisonResult = new CompRes(restKey, null, restValue);
		comparisonResults.add(comparisonResult);
	}
}
def failCount = 0;
for(item in comparisonResults) {
	def fail = item.fail();
	if(fail == -1) {
		log.info((++failCount) + ": " + item.jdbcKey + "-" + item.jdbcValue + "-" + item.restValue);
	} else if(fail > 0) {
		log.info((++failCount) + ": " + item.jdbcKey + "-" + item.jdbcValue + "-" + item.restValue + " --- PERCENT: " + fail);
	} else {
//		log.info(item.jdbcKey + "-" + item.jdbcValue + "-" + item.restValue);
	}
}

if (failCount>0)
    {
       log.info 'Vertica Results    : ' + jdbcMap
       log.info 'Pavi_Test Results: ' + restMap
       log.info 'FAILED : ' + failCount + '  tests failed'
       log.info "*************************************************************"
       log.info "   End test for : " + context.getCurrentStep().getLabel()
       log.info "*************************************************************"
       testStatus = "1"
       com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "testStatus", testStatus )
       assert false : "Test Suite FAILED"
    }
    else
    {
    	  log.info 'PASSED : ' + failCount + '  tests failed'
    	  log.info "*************************************************************"
    	  log.info "   End test for : " + context.getCurrentStep().getLabel()
       log.info "*************************************************************"
       
       assert true: "Test Suite Passed"
    }

//// create groovyUtils and XmlHolder for response of Request
//def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
//def alert = com.eviware.soapui.support.UISupport;
//def response1 = context.expand( 'SummaryAuthorLocationStateVertica#ResponseAsXml' )
//def response2 = context.expand( '${Summary011AuthorLocationState#ResponseAsXml}' )
//def holder1 = groovyUtils.getXmlHolder(response1)
//def holder2 = groovyUtils.getXmlHolder(response2)
//
//def jdbcStringList = []
//def restStringList = []
//def x = 0 as int
//def y = 0 as int
//def fail = 0 as int
//
//// loop item nodes in response message
//for( jdbcResults in holder1.getNodeValues( '//FACT_ARTICLE.AUTHOR_STATE, //CONTENT_VOLUME' ))
//{  
//  //log.info 'Item : [$jdbcResults]'
//  jdbcStringList = jdbcStringList + jdbcResults
//}
//log.info jdbcStringList
//
//holder2.namespaces['ns'] = 'http://10.200.0.124/ArticleQueryApi/rest/query/aggregate'
//for( restResponse in holder2.getNodeValues( '//ns:results/ns:e/ns:author_state, //ns:results/ns:e/ns:content_volume'  ))
//{
//  //log.info 'Item : [$restResponse]' 
//  restStringList = restStringList + restResponse
//}
//log.info restStringList
///*    if (restResponse in jdbcStringList ) assert true
//    else {
//    	   //alert.showInfoMessage(jdbcStringList[x] + " counts do not match","soapUI Warning !")
//    	   //log.info 'Results from vertica do not match results from articleQueryApi '+ jdbcStringList[x] + " " + restResponse
//    	   log.info 'Entity : ' + jdbcStringList[x]
//        log.info 'Vertica: '+ jdbcStringList[y] + " HBase: " + restResponse
//        verticount = jdbcStringList[y] as Integer
//        hbasecount = restResponse as Integer
//        //log.info verticount
//        //log.info hbasecount
//       if (verticount < hbasecount)
//          {
//             f = ((1 - (verticount/hbasecount)) * 100 )
//             f = f.abs()
//             log.info 'Difference of: ' + new Double(f).round(2) + '%'
//             log.info 'Vertica count is less than HBase count'
//          }
//          else
//             {
//                f = ((1 - (hbasecount/verticount)) * 100 )
//                f = f.abs()
//                log.info 'Difference of: ' + new Double(f).round(2) + '%'
//                log.info 'HBase count is less than Vertica count'
//             }
//       if (f < 2 )
//          {
//             log.info 'PASS'
//          }
//          else
//             {
//                log.info 'FAILED: Percentage is > 2%'
//                fail = fail + 1
//             }
//
//    x = x + 1
//    
//    }
//    y = y + 1
//}*/
//log.info "Fail count = " + fail
//log.info "request  : >" + jdbcStringList
//log.info "result     : >" + restStringList
//if (fail>0)
//    {
//       assert false : "Percentage is greater than 2%"
//    }]]></script></con:config></con:testStep><con:testStep type="groovy" name="logsToFile" disabled="true"><con:settings/><con:config><script>//The below groovy script step is to capture the soapUI log area.
// "soapUI log" can be replaced with http log, jetty log, script log, error log etc based on the need.
def logArea = com.eviware.soapui.SoapUI.logMonitor.getLogArea( "script log" );
//Below two lines of groovy script is to get the project directory, we will be saving the soapUI log contents on a file in that directory.
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def start = context.expand('${#Global#filestart}')
def end = context.expand('${#Global#fileend}')
def projectPath = groovyUtils.projectPath
def status = context.expand('${#Global#testStatus}') as Integer
if (status > 0)
   {
   	def fail = context.expand('${#Global#fail}') as String
   	//log.info fail
   	def logFile = new File(projectPath + "\\" + fail + "_soapUI-Logs-to-file_" + start +"_to_" + end + ".txt")
   	def accountName = ("Account Name: " + context.expand('${#Global#itcAccountName}') + "\r\n") as String
     def accountId = ("Account ID  : " + context.expand('${#Global#itcAccountId}') + "\r\n") as String
     def userName = ("Username    : " + context.expand('${#Global#itcUsername}')  + "\r\n") as String
     def password = ("Password    : " + context.expand('${#Global#itcPassword}')  + "\r\n") as String
     def topicId =  ("Topic ID    : " + context.expand('${#Global#itctopicid}') + "\r\n") as String
     def sqlStart =  ("Start Time  : " + context.expand('${#Global#querysqlstart}') + "\r\n") as String
     def sqlEnd =  ("End Time    : " + context.expand('${#Global#querysqlend}') + "\r\n") as String

     logFile.write("soapUI Logs In a file.\r\n" + accountName + accountId + userName + password + topicId + sqlStart + sqlEnd)
        if( logArea !=null )
        {
           def model = logArea.model
           if( model.size > 0 )            
              for( c in 0..(model.size-1) )         
                logFile.append(model.getElementAt( c ).toString() + "\r\n")
        }
   }
   else
      {
   	   def pass = context.expand('${#Global#pass}') as String
   	   //log.info pass
   	   def logFile = new File(projectPath + "\\" + pass + "_soapUI-Logs-to-file_" + start +"_to_" + end + ".txt")
   	   def accountName = ("Account Name: " + context.expand('${#Global#itcAccountName}') + "\r\n") as String
        def accountId = ("Account ID  : " + context.expand('${#Global#itcAccountId}') + "\r\n") as String
        def userName = ("Username    : " + context.expand('${#Global#itcUsername}')  + "\r\n") as String
        def password = ("Password    : " + context.expand('${#Global#itcPassword}')  + "\r\n") as String
        def topicId =  ("Topic ID    : " + context.expand('${#Global#itctopicid}') + "\r\n") as String
        def sqlStart =  ("Start Time  : " + context.expand('${#Global#querysqlstart}') + "\r\n") as String
        def sqlEnd =  ("End Time    : " + context.expand('${#Global#querysqlend}') + "\r\n") as String

        logFile.write("soapUI Logs In a file.\r\n" + accountName + accountId + userName + password + topicId + sqlStart + sqlEnd)
           if( logArea !=null )
           {
              def model = logArea.model
              if( model.size > 0 )            
                 for( c in 0..(model.size-1) )         
                   logFile.append(model.getElementAt( c ).toString() + "\r\n")       
           }
      }

////This is the first line in the soapUI log file.
//def accountName = ("Account Name: " + context.expand('${#Global#itcAccountName}') + "\r\n") as String
//def accountId = ("Account ID  : " + context.expand('${#Global#itcAccountId}') + "\r\n") as String
//def userName = ("Username    : " + context.expand('${#Global#itcUsername}')  + "\r\n") as String
//def password = ("Password    : " + context.expand('${#Global#itcPassword}')  + "\r\n") as String
//def topicId =  ("Topic ID    : " + context.expand('${#Global#itctopicid}') + "\r\n") as String
//def sqlStart =  ("Start Time  : " + context.expand('${#Global#querysqlstart}') + "\r\n") as String
//def sqlEnd =  ("End Time    : " + context.expand('${#Global#querysqlend}') + "\r\n") as String
//
//logFile.write("soapUI Logs In a file.\r\n" + accountName + accountId + userName + password + topicId + sqlStart + sqlEnd)
//   if( logArea !=null )
//   {
//      def model = logArea.model
//      if( model.size > 0 )            
//         for( c in 0..(model.size-1) )         
//           logFile.append(model.getElementAt( c ).toString() + "\r\n")       
//      
//   }</script></con:config></con:testStep><con:loadTest name="LoadTest 1"><con:settings><con:setting id="HttpSettings@close-connections">false</con:setting></con:settings><con:threadCount>1000</con:threadCount><con:startDelay>0</con:startDelay><con:sampleInterval>250</con:sampleInterval><con:calculateTPSOnTimePassed>true</con:calculateTPSOnTimePassed><con:resetStatisticsOnThreadCountChange>true</con:resetStatisticsOnThreadCountChange><con:historyLimit>-1</con:historyLimit><con:testLimit>60</con:testLimit><con:limitType>TIME</con:limitType><con:loadStrategy><con:type>Simple</con:type></con:loadStrategy><con:assertion type="Step Status" name="Step Status"/><con:maxAssertionErrors>100</con:maxAssertionErrors><con:cancelExcessiveThreads>true</con:cancelExcessiveThreads><con:strategyInterval>500</con:strategyInterval></con:loadTest><con:properties/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="AggregateAuthorLocationByCountry" searchProperties="true" id="40f6df89-e50e-473c-9275-6ea7facbf5e0" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword=""><con:settings/><con:testStep type="groovy" name="settime" disabled="true"><con:settings/><con:config><script>Calendar sod = Calendar.instance
    sod.set(Calendar.AM_PM, 0)
    sod.set(Calendar.HOUR, 0)
    sod.set(Calendar.MINUTE, 0)
    sod.set(Calendar.SECOND, 0)
    sod.set(Calendar.MILLISECOND, 0)
start = sod.time 
sqlstart = start.format('MM-dd-yy HH:mm:ss')
//log.info "SQL Start Time:  " + sqlstart
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "querysqlstart", sqlstart )

Calendar eod = Calendar.instance
    eod.set(Calendar.AM_PM, 0)
    eod.set(Calendar.HOUR, 9)
    eod.set(Calendar.MINUTE, 59)
    eod.set(Calendar.SECOND, 59)
    eod.set(Calendar.MILLISECOND, 999)
end = eod.time 
sqlend = end.format('MM-dd-yy HH:mm:ss')
//log.info "SQL End Time:  " + sqlend
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "querysqlend", sqlend )

offset = sod.get(Calendar.ZONE_OFFSET) + sod.get(Calendar.DST_OFFSET) / (60 * 1000)

starttime = start.time
epochstart = starttime + offset
//log.info "Epoch Start Time:  " + epochstart
def epochstart = epochstart as String
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "queryepochstart", epochstart )
def timestampstart = epochstart as Long
Date tss = new Date(timestampstart)
//log.info "Time to select in local timezone:  "+ tss

endtime = end.time
epochend = endtime + offset
//log.info "Epoch End Time:  " + epochend
def epochend = epochend as String
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "queryepochend", epochend )
def timestampend = epochend as Long
Date tse = new Date(timestampend)
//log.info "Time to select in local timezone:  "+ tse

now = Calendar.instance
today = now.time
millis = today.time
//log.info "Current time in milli-seconds:  " + millis
def today = new Date (millis)
//log.info "Current Local Time:  "+ today
tf = today.format('MM dd yy HH mm ss')
//log.info "Current Local Time nicely formatted:  "+ tf
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "time", tf )</script></con:config></con:testStep><con:testStep type="restrequest" name="authuser"><con:settings/><con:config service="ARTSA - UserManager" resourcePath="/SaasCoreUserManager/rest/auth" methodName="POST - authenticate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="authuser" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="authkey" value="1189377229352574419-2213262129298445271-4936701685398756970-61" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://10.200.0.124:8080</con:endpoint><con:request>{
  "username":${#Global#userUsername},
  "password":${#Global#useroriginalpassword},
  "accountName":${#Global#userAccountName}
}</con:request><con:assertion type="XPath Match" name="XPath Match"><con:configuration><path>declare namespace soap='http://schemas.xmlsoap.org/soap/envelope/';
declare namespace ns1='http://10.200.0.124/SaasCoreUserManager/rest/auth';
//ns1:loginFailed</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="authResponse"><con:settings/><con:config><script>import groovy.json.JsonSlurper
import com.eviware.soapui.impl.wsdl.teststeps.*

responseContent = testRunner.testCase.getTestStepByName("authuser").getPropertyValue("response")
slurperresponse = new JsonSlurper().parseText(responseContent)

accountid = (slurperresponse.account)
def accountid = accountid as String
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "accountid", accountid )

accountname = (slurperresponse.accountName)
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "accountName", accountname )

authkey = (slurperresponse.authkey)
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "authkey", authkey )

userid = (slurperresponse.id)
def userid = userid as String
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "userid", userid )

username = (slurperresponse.username)
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "userName", username )

//log.info accountid
//log.info accountname
//log.info authkey
//log.info userid
//log.info username</script></con:config></con:testStep><con:testStep type="groovy" name="setutokenheader"><con:settings/><con:config><script>import com.eviware.soapui.impl.wsdl.teststeps.*
import com.eviware.soapui.support.types.StringToStringMap;

def authkey = com.eviware.soapui.SoapUI.globalProperties.getPropertyValue( "authkey")
def tc = testRunner.testCase.testSuite.getTestCaseByName("AggregateAuthorLocationByCountry")
def ts11 = tc.getTestStepByName("Summary012AuthorLocationCountry")


def headers = new StringToStringMap()
headers.putIfMissing("utoken",authkey)

ts11.getHttpRequest().setRequestHeaders(headers)</script></con:config></con:testStep><con:testStep type="groovy" name="initialize_jdbc_driver"><con:settings/><con:config><script>com.eviware.soapui.support.GroovyUtils.registerJdbcDriver("vertica.jdbc.driver.vertica")</script></con:config></con:testStep><con:testStep type="restrequest" name="Summary012AuthorLocationCountry"><con:settings/><con:config service="ARTSA  - Article Query" resourcePath="/ArticleQueryApi/rest/query/aggregate" methodName="POST - getAggregateData" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Summary012AuthorLocationCountry" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="utoken" value="8599513077731549610-590895019658257183-5585802548239906007-1001" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://10.200.0.124:8080</con:endpoint><con:request>{
  "topicIDs":[${#Global#topicid}],
  //"limit":"20",
  "selectedFields":[
        {"field":"author_country"},
        {"field":"content_volume()","sortDirection":"DESCENDING"}
        //{"field":"combined_topics"}
  ],
  "filters":[
      //{"field":"author_country","comparison":"NE","values":["us"]}
  ],
  "dateRange":{"startDate":${#Global#queryepochstart},"endDate":${#Global#queryepochend}}
}</con:request><con:assertion type="XPath Match" name="assert_author_country"><con:configuration><path>declare namespace soap='http://schemas.xmlsoap.org/soap/envelope/';
declare namespace ns1='http://10.200.0.124/ArticleQueryApi/rest/query/aggregate';
//ns1:author_country</path><content>*</content><allowWildcards>true</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="jdbc" name="SummaryAuthorLocationCountryVertica"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>com.vertica.Driver</con:driver><con:connectionString>jdbc:vertica://10.200.0.190:5433/artsa01?user=artsa01&amp;password=artsa2</con:connectionString><con:query>SELECT fa.author_country, COUNT(DISTINCT fa.id) content_volume
FROM fact_article fa
INNER JOIN (
	SELECT pipeline_topic_id, article_id, publish_at, publish_at_week
	FROM topic_article ta
	WHERE pipeline_topic_id IN (${#Global#topicid})
	AND ta.publish_at BETWEEN '${#Global#querysqlstart}' AND '${#Global#querysqlend}'
	  ) ta  ON ta.article_id=fa.id
AND ta.publish_at_week=fa.publish_at_week
WHERE  ta.pipeline_topic_id IN (${#Global#topicid})
GROUP BY fa.author_country
ORDER BY COUNT(DISTINCT fa.id) DESC, fa.author_country ASC  limit 100</con:query><con:properties/></con:config></con:testStep><con:testStep type="groovy" name="compareResultsAuthorLocationCountry"><con:settings/><con:config><script><![CDATA[// create groovyUtils and XmlHolder for response of Request
def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
def alert = com.eviware.soapui.support.UISupport;
def response1 = context.expand( 'SummaryAuthorLocationCountryVertica#ResponseAsXml' )
def response2 = context.expand( '${Summary012AuthorLocationCountry#ResponseAsXml}' )
def holder1 = groovyUtils.getXmlHolder(response1)
def holder2 = groovyUtils.getXmlHolder(response2)

log.info "*************************************************************"
log.info "   Begin test for : " + context.getCurrentStep().getLabel()
log.info "*************************************************************"

// loop item nodes in Vertica response message
def jdbcMap = [:];
def jdbcEntityTypeArr = holder1.getNodeValues( '//FACT_ARTICLE.AUTHOR_COUNTRY' )
def jdbcEntityVolumeArr = holder1.getNodeValues( '//CONTENT_VOLUME' )
for( int z=0; z<jdbcEntityTypeArr.length; z++) {  
	jdbcMap.put(jdbcEntityTypeArr[z],jdbcEntityVolumeArr[z]);
}
//log.info jdbcMap

// loop item nodes in REST response message
def restMap = [:];
holder2.namespaces['ns'] = 'http://10.200.0.124/ArticleQueryApi/rest/query/aggregate'
def restEntityTypeArr = holder2.getNodeValues( '//ns:results/ns:e/ns:author_country'  )
def restEntityVolumeArr = holder2.getNodeValues( '//ns:results/ns:e/ns:content_volume'  )
for( int z=0; z<restEntityTypeArr.length; z++) {  
	restMap.put(restEntityTypeArr[z],restEntityVolumeArr[z]);
}
//log.info restMap

class CompRes {
	def jdbcKey;
	def jdbcValue;
	def restValue;
  CompRes(jdbcKey1, jdbcValue1, restValue1) {
  	jdbcKey = jdbcKey1;
  	jdbcValue = jdbcValue1;
  	restValue = restValue1;
  }
  def fail() {
  	if(jdbcValue == null || restValue == null) {
  		return -1;
  	}
  	def f;
//  	if ((jdbcValue.toInteger() < 100 || restValue.toInteger() < 100) && (jdbcValue.toInteger()-restValue.toInteger() > 2 || restValue.toInteger()-jdbcValue.toInteger() > 2))
//  	{
//  		return -1;
//  	}
//  	else {
//  		return 0;
//  	}
     if (jdbcValue.toInteger() < restValue.toInteger())
     {
        f = ((1 - (jdbcValue.toInteger()/restValue.toInteger())) * 100 )
        f = f.abs()
     }
     else
     {
        f = ((1 - (restValue.toInteger()/jdbcValue.toInteger())) * 100 )
        f = f.abs()
     }
	if(f > 2) {
		return new Double(f).round(2);
	}
	return 0;
  }
}

def comparisonResults = [];
for(j in jdbcMap) {
	def jdbcKey = j.key;
	def jdbcValue = j.value;
	def restValue = restMap.get(jdbcKey);
	if(restValue == null || restValue != jdbcValue) {
		def comparisonResult = new CompRes(jdbcKey, jdbcValue, restValue);
		comparisonResults.add(comparisonResult);
	}
}
for(r in restMap) {
	def restKey = r.key;
	def restValue = r.value;
	def jdbcValue = jdbcMap.get(restKey);
	if(jdbcValue == null) {
		def comparisonResult = new CompRes(restKey, null, restValue);
		comparisonResults.add(comparisonResult);
	}
}
def failCount = 0;
for(item in comparisonResults) {
	def fail = item.fail();
	if(fail == -1) {
		log.info((++failCount) + ": " + item.jdbcKey + "-" + item.jdbcValue + "-" + item.restValue);
	} else if(fail > 0) {
		log.info((++failCount) + ": " + item.jdbcKey + "-" + item.jdbcValue + "-" + item.restValue + " --- PERCENT: " + fail);
	} else {
//		log.info(item.jdbcKey + "-" + item.jdbcValue + "-" + item.restValue);
	}
}

if (failCount>0)
    {
       log.info 'Vertica Results    : ' + jdbcMap
       log.info 'Pavi_Test Results: ' + restMap
       log.info 'FAILED : ' + failCount + '  tests failed'
       log.info "*************************************************************"
       log.info "   End test for : " + context.getCurrentStep().getLabel()
       log.info "*************************************************************"
       testStatus = "1"
       com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "testStatus", testStatus )
       assert false : "Test Suite FAILED"
    }
    else
    {
    	  log.info 'PASSED : ' + failCount + '  tests failed'
    	  log.info "*************************************************************"
    	  log.info "   End test for : " + context.getCurrentStep().getLabel()
       log.info "*************************************************************"
       
       assert true: "Test Suite Passed"
    }

//// create groovyUtils and XmlHolder for response of Request
//def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
//def alert = com.eviware.soapui.support.UISupport;
//def response1 = context.expand( 'SummaryAuthorLocationCountryVertica#ResponseAsXml' )
//def response2 = context.expand( '${Summary012AuthorLocationCountry#ResponseAsXml}' )
//def holder1 = groovyUtils.getXmlHolder(response1)
//def holder2 = groovyUtils.getXmlHolder(response2)
//
//def jdbcStringList = []
//def restStringList = []
//def x = 0 as int
//def y = 0 as int
//def fail = 0 as int
//
//// loop item nodes in response message
//for( jdbcResults in holder1.getNodeValues( '//FACT_ARTICLE.AUTHOR_COUNTRY, //CONTENT_VOLUME' ))
//{  
//  //log.info 'Item : [$jdbcResults]'
//  jdbcStringList = jdbcStringList + jdbcResults
//}
//
//holder2.namespaces['ns'] = 'http://10.200.0.124/ArticleQueryApi/rest/query/aggregate'
//for( restResponse in holder2.getNodeValues( '//ns:results/ns:e/ns:author_country, //ns:results/ns:e/ns:content_volume'  ))
//{
//  //log.info 'Item : ' + restResponse
//  restStringList = restStringList + restResponse
//    if (restResponse in jdbcStringList ) assert true
//   else {
//    	   //alert.showInfoMessage(jdbcStringList[x] + " counts do not match","soapUI Warning !")
//    	   //log.info 'Results from vertica do not match results from articleQueryApi '+ jdbcStringList[x] + " " + restResponse
//    	   log.info 'Entity : ' + jdbcStringList[x]
//        log.info 'Vertica: '+ jdbcStringList[y] + " HBase: " + restResponse
//        verticount = jdbcStringList[y] as Integer
//        hbasecount = restResponse as Integer
//        //log.info verticount
//        //log.info hbasecount
//       if (verticount < hbasecount)
//          {
//             f = ((1 - (verticount/hbasecount)) * 100 )
//             f = f.abs()
//             log.info 'Difference of: ' + new Double(f).round(2) + '%'
//             log.info 'Vertica count is less than HBase count'
//          }
//          else
//             {
//                f = ((1 - (hbasecount/verticount)) * 100 )
//                f = f.abs()
//                log.info 'Difference of: ' + new Double(f).round(2) + '%'
//                log.info 'HBase count is less than Vertica count'
//             }
//       if (f < 2 )
//          {
//             log.info 'PASS'
//          }
//          else
//             {
//                log.info 'FAILED: Percentage is > 2%'
//                fail = fail + 1
//             }
//
//    x = x + 1
//    
//    }
//    y = y + 1
//}
//log.info "Fail count = " + fail
//log.info "request  : >" + jdbcStringList
//log.info "result     : >" + restStringList
//if (fail>0)
//    {
//       assert false : "Percentage is greater than 2%"
//    }]]></script></con:config></con:testStep><con:testStep type="groovy" name="logsToFile" disabled="true"><con:settings/><con:config><script>//The below groovy script step is to capture the soapUI log area.
// "soapUI log" can be replaced with http log, jetty log, script log, error log etc based on the need.
def logArea = com.eviware.soapui.SoapUI.logMonitor.getLogArea( "script log" );
//Below two lines of groovy script is to get the project directory, we will be saving the soapUI log contents on a file in that directory.
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def start = context.expand('${#Global#filestart}')
def end = context.expand('${#Global#fileend}')
def projectPath = groovyUtils.projectPath
def status = context.expand('${#Global#testStatus}') as Integer
if (status > 0)
   {
   	def fail = context.expand('${#Global#fail}') as String
   	//log.info fail
   	def logFile = new File(projectPath + "\\" + fail + "_soapUI-Logs-to-file_" + start +"_to_" + end + ".txt")
   	def accountName = ("Account Name: " + context.expand('${#Global#itcAccountName}') + "\r\n") as String
     def accountId = ("Account ID  : " + context.expand('${#Global#itcAccountId}') + "\r\n") as String
     def userName = ("Username    : " + context.expand('${#Global#itcUsername}')  + "\r\n") as String
     def password = ("Password    : " + context.expand('${#Global#itcPassword}')  + "\r\n") as String
     def topicId =  ("Topic ID    : " + context.expand('${#Global#itctopicid}') + "\r\n") as String
     def sqlStart =  ("Start Time  : " + context.expand('${#Global#querysqlstart}') + "\r\n") as String
     def sqlEnd =  ("End Time    : " + context.expand('${#Global#querysqlend}') + "\r\n") as String

     logFile.write("soapUI Logs In a file.\r\n" + accountName + accountId + userName + password + topicId + sqlStart + sqlEnd)
        if( logArea !=null )
        {
           def model = logArea.model
           if( model.size > 0 )            
              for( c in 0..(model.size-1) )         
                logFile.append(model.getElementAt( c ).toString() + "\r\n")
        }
   }
   else
      {
   	   def pass = context.expand('${#Global#pass}') as String
   	   //log.info pass
   	   def logFile = new File(projectPath + "\\" + pass + "_soapUI-Logs-to-file_" + start +"_to_" + end + ".txt")
   	   def accountName = ("Account Name: " + context.expand('${#Global#itcAccountName}') + "\r\n") as String
        def accountId = ("Account ID  : " + context.expand('${#Global#itcAccountId}') + "\r\n") as String
        def userName = ("Username    : " + context.expand('${#Global#itcUsername}')  + "\r\n") as String
        def password = ("Password    : " + context.expand('${#Global#itcPassword}')  + "\r\n") as String
        def topicId =  ("Topic ID    : " + context.expand('${#Global#itctopicid}') + "\r\n") as String
        def sqlStart =  ("Start Time  : " + context.expand('${#Global#querysqlstart}') + "\r\n") as String
        def sqlEnd =  ("End Time    : " + context.expand('${#Global#querysqlend}') + "\r\n") as String

        logFile.write("soapUI Logs In a file.\r\n" + accountName + accountId + userName + password + topicId + sqlStart + sqlEnd)
           if( logArea !=null )
           {
              def model = logArea.model
              if( model.size > 0 )            
                 for( c in 0..(model.size-1) )         
                   logFile.append(model.getElementAt( c ).toString() + "\r\n")       
           }
      }

////This is the first line in the soapUI log file.
//def accountName = ("Account Name: " + context.expand('${#Global#itcAccountName}') + "\r\n") as String
//def accountId = ("Account ID  : " + context.expand('${#Global#itcAccountId}') + "\r\n") as String
//def userName = ("Username    : " + context.expand('${#Global#itcUsername}')  + "\r\n") as String
//def password = ("Password    : " + context.expand('${#Global#itcPassword}')  + "\r\n") as String
//def topicId =  ("Topic ID    : " + context.expand('${#Global#itctopicid}') + "\r\n") as String
//def sqlStart =  ("Start Time  : " + context.expand('${#Global#querysqlstart}') + "\r\n") as String
//def sqlEnd =  ("End Time    : " + context.expand('${#Global#querysqlend}') + "\r\n") as String
//
//logFile.write("soapUI Logs In a file.\r\n" + accountName + accountId + userName + password + topicId + sqlStart + sqlEnd)
//   if( logArea !=null )
//   {
//      def model = logArea.model
//      if( model.size > 0 )            
//         for( c in 0..(model.size-1) )         
//           logFile.append(model.getElementAt( c ).toString() + "\r\n")       
//      
//   }</script></con:config></con:testStep><con:properties/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="AggregateSentimentArticleLevel" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="c4d2b85f-2fc8-46bc-aa4c-8709dd321df6"><con:settings/><con:testStep type="groovy" name="settime" disabled="true"><con:settings/><con:config><script>Calendar sod = Calendar.instance
    sod.set(Calendar.AM_PM, 0)
    sod.set(Calendar.HOUR, 0)
    sod.set(Calendar.MINUTE, 0)
    sod.set(Calendar.SECOND, 0)
    sod.set(Calendar.MILLISECOND, 0)
start = sod.time 
sqlstart = start.format('MM-dd-yy HH:mm:ss')
//log.info "SQL Start Time:  " + sqlstart
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "querysqlstart", sqlstart )

Calendar eod = Calendar.instance
    eod.set(Calendar.AM_PM, 0)
    eod.set(Calendar.HOUR, 9)
    eod.set(Calendar.MINUTE, 59)
    eod.set(Calendar.SECOND, 59)
    eod.set(Calendar.MILLISECOND, 999)
end = eod.time 
sqlend = end.format('MM-dd-yy HH:mm:ss')
//log.info "SQL End Time:  " + sqlend
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "querysqlend", sqlend )

offset = sod.get(Calendar.ZONE_OFFSET) + sod.get(Calendar.DST_OFFSET) / (60 * 1000)

starttime = start.time
epochstart = starttime + offset
//log.info "Epoch Start Time:  " + epochstart
def epochstart = epochstart as String
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "queryepochstart", epochstart )
def timestampstart = epochstart as Long
Date tss = new Date(timestampstart)
//log.info "Time to select in local timezone:  "+ tss

endtime = end.time
epochend = endtime + offset
//log.info "Epoch End Time:  " + epochend
def epochend = epochend as String
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "queryepochend", epochend )
def timestampend = epochend as Long
Date tse = new Date(timestampend)
//log.info "Time to select in local timezone:  "+ tse

now = Calendar.instance
today = now.time
millis = today.time
//log.info "Current time in milli-seconds:  " + millis
def today = new Date (millis)
//log.info "Current Local Time:  "+ today
tf = today.format('MM dd yy HH mm ss')
//log.info "Current Local Time nicely formatted:  "+ tf
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "time", tf )</script></con:config></con:testStep><con:testStep type="restrequest" name="authuser"><con:settings/><con:config service="ARTSA - UserManager" resourcePath="/SaasCoreUserManager/rest/auth" methodName="POST - authenticate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="authuser" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="authkey" value="1189377229352574419-2213262129298445271-4936701685398756970-61" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://10.200.0.124:8080</con:endpoint><con:request>{
  "username":${#Global#userUsername},
  "password":${#Global#useroriginalpassword},
  "accountName":${#Global#userAccountName}
}</con:request><con:assertion type="XPath Match" name="XPath Match"><con:configuration><path>declare namespace soap='http://schemas.xmlsoap.org/soap/envelope/';
declare namespace ns1='http://10.200.0.124/SaasCoreUserManager/rest/auth';
//ns1:loginFailed</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="authResponse"><con:settings/><con:config><script>import groovy.json.JsonSlurper
import com.eviware.soapui.impl.wsdl.teststeps.*

responseContent = testRunner.testCase.getTestStepByName("authuser").getPropertyValue("response")
slurperresponse = new JsonSlurper().parseText(responseContent)

accountid = (slurperresponse.account)
def accountid = accountid as String
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "accountid", accountid )

accountname = (slurperresponse.accountName)
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "accountName", accountname )

authkey = (slurperresponse.authkey)
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "authkey", authkey )

userid = (slurperresponse.id)
def userid = userid as String
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "userid", userid )

username = (slurperresponse.username)
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "userName", username )

//log.info accountid
//log.info accountname
//log.info authkey
//log.info userid
//log.info username</script></con:config></con:testStep><con:testStep type="groovy" name="setutokenheader"><con:settings/><con:config><script>import com.eviware.soapui.impl.wsdl.teststeps.*
import com.eviware.soapui.support.types.StringToStringMap;

def authkey = com.eviware.soapui.SoapUI.globalProperties.getPropertyValue( "authkey")
def tc = testRunner.testCase.testSuite.getTestCaseByName("AggregateSentimentArticleLevel")
def ts11 = tc.getTestStepByName("Summary02SentimentArticleLevel")


def headers = new StringToStringMap()
headers.putIfMissing("utoken",authkey)

ts11.getHttpRequest().setRequestHeaders(headers)</script></con:config></con:testStep><con:testStep type="groovy" name="initialize_jdbc_driver"><con:settings/><con:config><script>com.eviware.soapui.support.GroovyUtils.registerJdbcDriver("vertica.jdbc.driver.vertica")</script></con:config></con:testStep><con:testStep type="restrequest" name="Summary02SentimentArticleLevel"><con:settings/><con:config service="ARTSA  - Article Query" resourcePath="/ArticleQueryApi/rest/query/aggregate" methodName="POST - getAggregateData" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Summary02SentimentArticleLevel" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="utoken" value="-7252128841248328573-1717426400229654123--3835535702903694043-1001" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://10.200.0.124:8080</con:endpoint><con:request>{
  "topicIDs":[${#Global#topicid}],
  //"limit":"20",
  "selectedFields":[
        {"field":"article_sentiment","sortDirection":"DESCENDING"},
   		{"field":"content_volume()"}
        //{"field":"combined_topics"}
  ],
  "filters":[
      //{"field":"article_sentiment","comparison":"EQ","values":["MIXED","NEGATIVE","NEUTRAL","POSITIVE"]}
      //{"field":"article_content_subtype","comparison":"EQ","values":["twitter"]}
  ],
  "dateRange":{"startDate":${#Global#queryepochstart},"endDate":${#Global#queryepochend}}
}</con:request><con:assertion type="XPath Match" name="assert_article_sentiment"><con:configuration><path>declare namespace soap='http://schemas.xmlsoap.org/soap/envelope/';
declare namespace ns1='http://10.200.0.124/ArticleQueryApi/rest/query/aggregate';
//ns1:article_sentiment</path><content>*</content><allowWildcards>true</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="jdbc" name="SummarySentimentArticleLevelVertica"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>com.vertica.Driver</con:driver><con:connectionString>jdbc:vertica://10.200.0.190:5433/artsa01?user=artsa01&amp;password=artsa2</con:connectionString><con:query>SELECT fa.sentiment, COUNT(DISTINCT fa.id) content_volume
FROM fact_article fa
INNER JOIN (
	SELECT pipeline_topic_id, article_id, publish_at, publish_at_week
	FROM topic_article ta
	WHERE pipeline_topic_id IN (${#Global#topicid})
	AND ta.publish_at BETWEEN '${#Global#querysqlstart}' AND '${#Global#querysqlend}'
	  ) ta  ON ta.article_id=fa.id
AND ta.publish_at_week=fa.publish_at_week
WHERE  ta.pipeline_topic_id IN (${#Global#topicid})
GROUP BY fa.sentiment
ORDER BY COUNT(DISTINCT fa.id) DESC</con:query><con:properties/></con:config></con:testStep><con:testStep type="groovy" name="compareResultsSentimentByArticleLevel"><con:settings/><con:config><script><![CDATA[// create groovyUtils and XmlHolder for response of Request
def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
def alert = com.eviware.soapui.support.UISupport;
def response1 = context.expand( 'SummarySentimentArticleLevelVertica#ResponseAsXml' )
def response2 = context.expand( '${Summary02SentimentArticleLevel#ResponseAsXml}' )
def holder1 = groovyUtils.getXmlHolder(response1)
def holder2 = groovyUtils.getXmlHolder(response2)

log.info "*************************************************************"
log.info "   Begin test for : " + context.getCurrentStep().getLabel()
log.info "*************************************************************"

// loop item nodes in Vertica response message
def jdbcMap = [:];
def jdbcEntityTypeArr = holder1.getNodeValues( '//FACT_ARTICLE.SENTIMENT' )
def jdbcEntityVolumeArr = holder1.getNodeValues( '//CONTENT_VOLUME' )
for( int z=0; z<jdbcEntityTypeArr.length; z++) {  
	jdbcMap.put(jdbcEntityTypeArr[z],jdbcEntityVolumeArr[z]);
}
//log.info jdbcMap

// loop item nodes in REST response message
def restMap = [:];
holder2.namespaces['ns'] = 'http://10.200.0.124/ArticleQueryApi/rest/query/aggregate'
def restEntityTypeArr = holder2.getNodeValues( '//ns:results/ns:e/ns:article_sentiment'  )
def restEntityVolumeArr = holder2.getNodeValues( '//ns:results/ns:e/ns:content_volume'  )
for( int z=0; z<restEntityTypeArr.length; z++) {  
	restMap.put(restEntityTypeArr[z],restEntityVolumeArr[z]);
}
//log.info restMap

class CompRes {
	def jdbcKey;
	def jdbcValue;
	def restValue;
  CompRes(jdbcKey1, jdbcValue1, restValue1) {
  	jdbcKey = jdbcKey1;
  	jdbcValue = jdbcValue1;
  	restValue = restValue1;
  }
  def fail() {
  	if(jdbcValue == null || restValue == null) {
  		return -1;
  	}
  	def f;
//  	if ((jdbcValue.toInteger() < 100 || restValue.toInteger() < 100) && (jdbcValue.toInteger()-restValue.toInteger() > 2 || restValue.toInteger()-jdbcValue.toInteger() > 2))
//  	{
//  		return -1;
//  	}
//  	else {
//  		return 0;
//  	}
     if (jdbcValue.toInteger() < restValue.toInteger())
     {
        f = ((1 - (jdbcValue.toInteger()/restValue.toInteger())) * 100 )
        f = f.abs()
     }
     else
     {
        f = ((1 - (restValue.toInteger()/jdbcValue.toInteger())) * 100 )
        f = f.abs()
     }
	if(f > 2) {
		return new Double(f).round(2);
	}
	return 0;
  }
}

def comparisonResults = [];
for(j in jdbcMap) {
	def jdbcKey = j.key;
	def jdbcValue = j.value;
	def restValue = restMap.get(jdbcKey);
	if(restValue == null || restValue != jdbcValue) {
		def comparisonResult = new CompRes(jdbcKey, jdbcValue, restValue);
		comparisonResults.add(comparisonResult);
	}
}
for(r in restMap) {
	def restKey = r.key;
	def restValue = r.value;
	def jdbcValue = jdbcMap.get(restKey);
	if(jdbcValue == null) {
		def comparisonResult = new CompRes(restKey, null, restValue);
		comparisonResults.add(comparisonResult);
	}
}
def failCount = 0;
for(item in comparisonResults) {
	def fail = item.fail();
	if(fail == -1) {
		log.info((++failCount) + ": " + item.jdbcKey + "-" + item.jdbcValue + "-" + item.restValue);
	} else if(fail > 0) {
		log.info((++failCount) + ": " + item.jdbcKey + "-" + item.jdbcValue + "-" + item.restValue + " --- PERCENT: " + fail);
	} else {
//		log.info(item.jdbcKey + "-" + item.jdbcValue + "-" + item.restValue);
	}
}

if (failCount>0)
    {
       log.info 'Vertica Results    : ' + jdbcMap
       log.info 'Pavi_Test Results: ' + restMap
       log.info 'FAILED : ' + failCount + '  tests failed'
       log.info "*************************************************************"
       log.info "   End test for : " + context.getCurrentStep().getLabel()
       log.info "*************************************************************"
       testStatus = "1"
       com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "testStatus", testStatus )
       assert false : "Test Suite FAILED"
    }
    else
    {
    	  log.info 'PASSED : ' + failCount + '  tests failed'
    	  log.info "*************************************************************"
    	  log.info "   End test for : " + context.getCurrentStep().getLabel()
       log.info "*************************************************************"
       
       assert true: "Test Suite Passed"
    }

//// create groovyUtils and XmlHolder for response of Request
//def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
//def alert = com.eviware.soapui.support.UISupport;
//def response1 = context.expand( 'SummarySentimentArticleLevelVertica#ResponseAsXml' )
//def response2 = context.expand( '${Summary02SentimentArticleLevel#ResponseAsXml}' )
//def holder1 = groovyUtils.getXmlHolder(response1)
//def holder2 = groovyUtils.getXmlHolder(response2)
//
//def jdbcStringList = []
//def restStringList = []
//def x = 0 as int
//def y = 0 as int
//def fail = 0 as int
//
//// loop item nodes in response message
//for( jdbcResults in holder1.getNodeValues( '//FACT_ARTICLE.SENTIMENT, //CONTENT_VOLUME' ))
//{  
//  //log.info 'Item : [$jdbcResults]'
//  jdbcStringList = jdbcStringList + jdbcResults
//}
//
//holder2.namespaces['ns'] = 'http://10.200.0.124/ArticleQueryApi/rest/query/aggregate'
//for( restResponse in holder2.getNodeValues( '//ns:results/ns:e/ns:article_sentiment, //ns:results/ns:e/ns:content_volume'  ))
//{
//  //log.info 'Item : ' + restResponse
//  restStringList = restStringList + restResponse
//    if (restResponse in jdbcStringList ) assert true
//    else {
//    	   //alert.showInfoMessage(jdbcStringList[x] + " counts do not match","soapUI Warning !")
//    	   //log.info 'Results from vertica do not match results from articleQueryApi '+ jdbcStringList[x] + " " + restResponse
//    	   log.info 'Entity : ' + jdbcStringList[x]
//        log.info 'Vertica: '+ jdbcStringList[y] + " HBase: " + restResponse
//        verticount = jdbcStringList[y] as Integer
//        hbasecount = restResponse as Integer
//        //log.info verticount
//        //log.info hbasecount
//       if (verticount < hbasecount)
//          {
//             f = ((1 - (verticount/hbasecount)) * 100 )
//             f = f.abs()
//             log.info 'Difference of: ' + new Double(f).round(2) + '%'
//             log.info 'Vertica count is less than HBase count'
//          }
//          else
//             {
//                f = ((1 - (hbasecount/verticount)) * 100 )
//                f = f.abs()
//                log.info 'Difference of: ' + new Double(f).round(2) + '%'
//                log.info 'HBase count is less than Vertica count'
//             }
//       if (f < 2 )
//          {
//             log.info 'PASS'
//          }
//          else
//             {
//                log.info 'FAILED: Percentage is > 2%'
//                fail = fail + 1
//             }
//
//    x = x + 1
//    
//    }
//    y = y + 1
//}
//log.info "Fail count = " + fail
//log.info "request  : >" + jdbcStringList
//log.info "result     : >" + restStringList
//if (fail>0)
//    {
//       assert false : "Percentage is greater than 2%"
//    }]]></script></con:config></con:testStep><con:testStep type="groovy" name="logsToFile" disabled="true"><con:settings/><con:config><script>//The below groovy script step is to capture the soapUI log area.
// "soapUI log" can be replaced with http log, jetty log, script log, error log etc based on the need.
def logArea = com.eviware.soapui.SoapUI.logMonitor.getLogArea( "script log" );
//Below two lines of groovy script is to get the project directory, we will be saving the soapUI log contents on a file in that directory.
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def start = context.expand('${#Global#filestart}')
def end = context.expand('${#Global#fileend}')
def projectPath = groovyUtils.projectPath
def status = context.expand('${#Global#testStatus}') as Integer
if (status > 0)
   {
   	def fail = context.expand('${#Global#fail}') as String
   	//log.info fail
   	def logFile = new File(projectPath + "\\" + fail + "_soapUI-Logs-to-file_" + start +"_to_" + end + ".txt")
   	def accountName = ("Account Name: " + context.expand('${#Global#itcAccountName}') + "\r\n") as String
     def accountId = ("Account ID  : " + context.expand('${#Global#itcAccountId}') + "\r\n") as String
     def userName = ("Username    : " + context.expand('${#Global#itcUsername}')  + "\r\n") as String
     def password = ("Password    : " + context.expand('${#Global#itcPassword}')  + "\r\n") as String
     def topicId =  ("Topic ID    : " + context.expand('${#Global#itctopicid}') + "\r\n") as String
     def sqlStart =  ("Start Time  : " + context.expand('${#Global#querysqlstart}') + "\r\n") as String
     def sqlEnd =  ("End Time    : " + context.expand('${#Global#querysqlend}') + "\r\n") as String

     logFile.write("soapUI Logs In a file.\r\n" + accountName + accountId + userName + password + topicId + sqlStart + sqlEnd)
        if( logArea !=null )
        {
           def model = logArea.model
           if( model.size > 0 )            
              for( c in 0..(model.size-1) )         
                logFile.append(model.getElementAt( c ).toString() + "\r\n")
        }
   }
   else
      {
   	   def pass = context.expand('${#Global#pass}') as String
   	   //log.info pass
   	   def logFile = new File(projectPath + "\\" + pass + "_soapUI-Logs-to-file_" + start +"_to_" + end + ".txt")
   	   def accountName = ("Account Name: " + context.expand('${#Global#itcAccountName}') + "\r\n") as String
        def accountId = ("Account ID  : " + context.expand('${#Global#itcAccountId}') + "\r\n") as String
        def userName = ("Username    : " + context.expand('${#Global#itcUsername}')  + "\r\n") as String
        def password = ("Password    : " + context.expand('${#Global#itcPassword}')  + "\r\n") as String
        def topicId =  ("Topic ID    : " + context.expand('${#Global#itctopicid}') + "\r\n") as String
        def sqlStart =  ("Start Time  : " + context.expand('${#Global#querysqlstart}') + "\r\n") as String
        def sqlEnd =  ("End Time    : " + context.expand('${#Global#querysqlend}') + "\r\n") as String

        logFile.write("soapUI Logs In a file.\r\n" + accountName + accountId + userName + password + topicId + sqlStart + sqlEnd)
           if( logArea !=null )
           {
              def model = logArea.model
              if( model.size > 0 )            
                 for( c in 0..(model.size-1) )         
                   logFile.append(model.getElementAt( c ).toString() + "\r\n")       
           }
      }

////This is the first line in the soapUI log file.
//def accountName = ("Account Name: " + context.expand('${#Global#itcAccountName}') + "\r\n") as String
//def accountId = ("Account ID  : " + context.expand('${#Global#itcAccountId}') + "\r\n") as String
//def userName = ("Username    : " + context.expand('${#Global#itcUsername}')  + "\r\n") as String
//def password = ("Password    : " + context.expand('${#Global#itcPassword}')  + "\r\n") as String
//def topicId =  ("Topic ID    : " + context.expand('${#Global#itctopicid}') + "\r\n") as String
//def sqlStart =  ("Start Time  : " + context.expand('${#Global#querysqlstart}') + "\r\n") as String
//def sqlEnd =  ("End Time    : " + context.expand('${#Global#querysqlend}') + "\r\n") as String
//
//logFile.write("soapUI Logs In a file.\r\n" + accountName + accountId + userName + password + topicId + sqlStart + sqlEnd)
//   if( logArea !=null )
//   {
//      def model = logArea.model
//      if( model.size > 0 )            
//         for( c in 0..(model.size-1) )         
//           logFile.append(model.getElementAt( c ).toString() + "\r\n")       
//      
//   }</script></con:config></con:testStep><con:properties/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="AggregateTopEntities" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="72b855e2-1e03-4b1e-8efc-0571f5140526"><con:settings/><con:testStep type="groovy" name="settime" disabled="true"><con:settings/><con:config><script>Calendar sod = Calendar.instance
    sod.set(Calendar.AM_PM, 0)
    sod.set(Calendar.HOUR, 0)
    sod.set(Calendar.MINUTE, 0)
    sod.set(Calendar.SECOND, 0)
    sod.set(Calendar.MILLISECOND, 0)
start = sod.time 
sqlstart = start.format('MM-dd-yy HH:mm:ss')
//log.info "SQL Start Time:  " + sqlstart
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "querysqlstart", sqlstart )

Calendar eod = Calendar.instance
    eod.set(Calendar.AM_PM, 0)
    eod.set(Calendar.HOUR, 9)
    eod.set(Calendar.MINUTE, 59)
    eod.set(Calendar.SECOND, 59)
    eod.set(Calendar.MILLISECOND, 999)
end = eod.time 
sqlend = end.format('MM-dd-yy HH:mm:ss')
//log.info "SQL End Time:  " + sqlend
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "querysqlend", sqlend )

offset = sod.get(Calendar.ZONE_OFFSET) + sod.get(Calendar.DST_OFFSET) / (60 * 1000)

starttime = start.time
epochstart = starttime + offset
//log.info "Epoch Start Time:  " + epochstart
def epochstart = epochstart as String
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "queryepochstart", epochstart )
def timestampstart = epochstart as Long
Date tss = new Date(timestampstart)
//log.info "Time to select in local timezone:  "+ tss

endtime = end.time
epochend = endtime + offset
//log.info "Epoch End Time:  " + epochend
def epochend = epochend as String
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "queryepochend", epochend )
def timestampend = epochend as Long
Date tse = new Date(timestampend)
//log.info "Time to select in local timezone:  "+ tse

now = Calendar.instance
today = now.time
millis = today.time
//log.info "Current time in milli-seconds:  " + millis
def today = new Date (millis)
//log.info "Current Local Time:  "+ today
tf = today.format('MM dd yy HH mm ss')
//log.info "Current Local Time nicely formatted:  "+ tf
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "time", tf )</script></con:config></con:testStep><con:testStep type="restrequest" name="authuser"><con:settings/><con:config service="ARTSA - UserManager" resourcePath="/SaasCoreUserManager/rest/auth" methodName="POST - authenticate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="authuser" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="authkey" value="1189377229352574419-2213262129298445271-4936701685398756970-61" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://10.200.0.124:8080</con:endpoint><con:request>{
  "username":${#Global#userUsername},
  "password":${#Global#useroriginalpassword},
  "accountName":${#Global#userAccountName}
}</con:request><con:assertion type="XPath Match" name="XPath Match"><con:configuration><path>declare namespace soap='http://schemas.xmlsoap.org/soap/envelope/';
declare namespace ns1='http://10.200.0.124/SaasCoreUserManager/rest/auth';
//ns1:loginFailed</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="authResponse"><con:settings/><con:config><script>import groovy.json.JsonSlurper
import com.eviware.soapui.impl.wsdl.teststeps.*

responseContent = testRunner.testCase.getTestStepByName("authuser").getPropertyValue("response")
slurperresponse = new JsonSlurper().parseText(responseContent)

accountid = (slurperresponse.account)
def accountid = accountid as String
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "accountid", accountid )

accountname = (slurperresponse.accountName)
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "accountName", accountname )

authkey = (slurperresponse.authkey)
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "authkey", authkey )

userid = (slurperresponse.id)
def userid = userid as String
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "userid", userid )

username = (slurperresponse.username)
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "userName", username )

//log.info accountid
//log.info accountname
//log.info authkey
//log.info userid
//log.info username</script></con:config></con:testStep><con:testStep type="groovy" name="setutokenheader"><con:settings/><con:config><script>import com.eviware.soapui.impl.wsdl.teststeps.*
import com.eviware.soapui.support.types.StringToStringMap;

def authkey = com.eviware.soapui.SoapUI.globalProperties.getPropertyValue( "authkey")
def tc = testRunner.testCase.testSuite.getTestCaseByName("AggregateTopEntities")
def ts11 = tc.getTestStepByName("Summary03TopEntities")


def headers = new StringToStringMap()
headers.putIfMissing("utoken",authkey)

ts11.getHttpRequest().setRequestHeaders(headers)</script></con:config></con:testStep><con:testStep type="groovy" name="initialize_jdbc_driver"><con:settings/><con:config><script>com.eviware.soapui.support.GroovyUtils.registerJdbcDriver("vertica.jdbc.driver.vertica")</script></con:config></con:testStep><con:testStep type="restrequest" name="Summary03TopEntities"><con:settings/><con:config service="ARTSA  - Article Query" resourcePath="/ArticleQueryApi/rest/query/aggregate" methodName="POST - getAggregateData" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Summary03TopEntities" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="utoken" value="1603681614045542144--3617536308939896478-5358034697883512739-1001" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://10.200.0.124:8080</con:endpoint><con:request>{
  "topicIDs":[${#Global#topicid}],
  "limit":10,
  "selectedFields":[
        {"field":"entity_type","sortDirection":"ASCENDING"},
   		{"field":"content_volume()","sortDirection":"DESCENDING"}
        //{"field":"combined_topics"}
  ],
  "filters":[
      //{'field':'entity_type','comparison':'EQ','values':['@USERNAME','HASHTAG','PERSON','AMBIGUOUS_ICON','POSITIVE_ICON']}
  ],
  "dateRange":{"startDate":${#Global#queryepochstart},"endDate":${#Global#queryepochend}}
}</con:request><con:assertion type="XPath Match" name="assert_entity_type"><con:configuration><path>declare namespace soap='http://schemas.xmlsoap.org/soap/envelope/';
declare namespace ns1='http://10.200.0.124/ArticleQueryApi/rest/query/aggregate';
//ns1:entity_type</path><content>*</content><allowWildcards>true</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="jdbc" name="SummaryTopEntitiesVertica"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>com.vertica.Driver</con:driver><con:connectionString>jdbc:vertica://10.200.0.190:5433/artsa01?user=artsa01&amp;password=artsa2</con:connectionString><con:query>SELECT en.level1,COUNT(DISTINCT ta.article_id) content_volume
FROM (
	SELECT pipeline_topic_id, article_id, publish_at, publish_at_week
	FROM topic_article ta
	WHERE pipeline_topic_id IN (${#Global#topicid})
	AND ta.publish_at BETWEEN '${#Global#querysqlstart}' AND '${#Global#querysqlend}'
	 ) ta
INNER JOIN multi_level_annotation en on en.article_id=ta.article_id
AND en.type='entity'
WHERE  ta.pipeline_topic_id IN (${#Global#topicid})
AND en.account IN (0,${#Global#accountid})
GROUP BY en.level1
ORDER BY COUNT(DISTINCT ta.article_id) DESC, en.level1 ASC  limit 10</con:query><con:properties/></con:config></con:testStep><con:testStep type="groovy" name="compareResultsTopEntities"><con:settings/><con:config><script><![CDATA[// create groovyUtils and XmlHolder for response of Request
def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
def alert = com.eviware.soapui.support.UISupport;
def response1 = context.expand( 'SummaryTopEntitiesVertica#ResponseAsXml' )
def response2 = context.expand( '${Summary03TopEntities#ResponseAsXml}' )
def holder1 = groovyUtils.getXmlHolder(response1)
def holder2 = groovyUtils.getXmlHolder(response2)

log.info "*************************************************************"
log.info "   Begin test for : " + context.getCurrentStep().getLabel()
log.info "*************************************************************"

// loop item nodes in Vertica response message
def jdbcMap = [:];
def jdbcEntityTypeArr = holder1.getNodeValues( '//MULTI_LEVEL_ANNOTATION.LEVEL1' )
def jdbcEntityVolumeArr = holder1.getNodeValues( '//CONTENT_VOLUME' )
for( int z=0; z<jdbcEntityTypeArr.length; z++) {  
	jdbcMap.put(jdbcEntityTypeArr[z],jdbcEntityVolumeArr[z]);
}
//log.info jdbcMap

// loop item nodes in REST response message
def restMap = [:];
holder2.namespaces['ns'] = 'http://10.200.0.124/ArticleQueryApi/rest/query/aggregate'
def restEntityTypeArr = holder2.getNodeValues( '//ns:results/ns:e/ns:entity_type'  )
def restEntityVolumeArr = holder2.getNodeValues( '//ns:results/ns:e/ns:content_volume'  )
for( int z=0; z<restEntityTypeArr.length; z++) {  
	restMap.put(restEntityTypeArr[z],restEntityVolumeArr[z]);
}
//log.info restMap

class CompRes {
	def jdbcKey;
	def jdbcValue;
	def restValue;
  CompRes(jdbcKey1, jdbcValue1, restValue1) {
  	jdbcKey = jdbcKey1;
  	jdbcValue = jdbcValue1;
  	restValue = restValue1;
  }
  def fail() {
  	if(jdbcValue == null || restValue == null) {
  		return -1;
  	}
  	def f;
//  	if ((jdbcValue.toInteger() < 100 || restValue.toInteger() < 100) && (jdbcValue.toInteger()-restValue.toInteger() > 2 || restValue.toInteger()-jdbcValue.toInteger() > 2))
//  	{
//  		return -1;
//  	}
//  	else {
//  		return 0;
//  	}
     if (jdbcValue.toInteger() < restValue.toInteger())
     {
        f = ((1 - (jdbcValue.toInteger()/restValue.toInteger())) * 100 )
        f = f.abs()
     }
     else
     {
        f = ((1 - (restValue.toInteger()/jdbcValue.toInteger())) * 100 )
        f = f.abs()
     }
	if(f > 2) {
		return new Double(f).round(2);
	}
	return 0;
  }
}

def comparisonResults = [];
for(j in jdbcMap) {
	def jdbcKey = j.key;
	def jdbcValue = j.value;
	def restValue = restMap.get(jdbcKey);
	if(restValue == null || restValue != jdbcValue) {
		def comparisonResult = new CompRes(jdbcKey, jdbcValue, restValue);
		comparisonResults.add(comparisonResult);
	}
}
for(r in restMap) {
	def restKey = r.key;
	def restValue = r.value;
	def jdbcValue = jdbcMap.get(restKey);
	if(jdbcValue == null) {
		def comparisonResult = new CompRes(restKey, null, restValue);
		comparisonResults.add(comparisonResult);
	}
}
def failCount = 0;
for(item in comparisonResults) {
	def fail = item.fail();
	if(fail == -1) {
		log.info((++failCount) + ": " + item.jdbcKey + "-" + item.jdbcValue + "-" + item.restValue);
	} else if(fail > 0) {
		log.info((++failCount) + ": " + item.jdbcKey + "-" + item.jdbcValue + "-" + item.restValue + " --- PERCENT: " + fail);
	} else {
//		log.info(item.jdbcKey + "-" + item.jdbcValue + "-" + item.restValue);
	}
}

if (failCount>0)
    {
       log.info 'Vertica Results    : ' + jdbcMap
       log.info 'Pavi_Test Results: ' + restMap
       log.info 'FAILED : ' + failCount + '  tests failed'
       log.info "*************************************************************"
       log.info "   End test for : " + context.getCurrentStep().getLabel()
       log.info "*************************************************************"
       testStatus = "1"
       com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "testStatus", testStatus )
       assert false : "Test Suite FAILED"
    }
    else
    {
    	  log.info 'PASSED : ' + failCount + '  tests failed'
    	  log.info "*************************************************************"
    	  log.info "   End test for : " + context.getCurrentStep().getLabel()
       log.info "*************************************************************"
       
       assert true: "Test Suite Passed"
    }

//// create groovyUtils and XmlHolder for response of Request
//def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
//def alert = com.eviware.soapui.support.UISupport;
//def response1 = context.expand( 'SummaryTopEntitiesVertica#ResponseAsXml' )
//def response2 = context.expand( '${Summary03TopEntities#ResponseAsXml}' )
//def holder1 = groovyUtils.getXmlHolder(response1)
//def holder2 = groovyUtils.getXmlHolder(response2)
//
//def jdbcStringList = []
//def restStringList = []
//def x = 0 as int
//def y = 0 as int
//def fail = 0 as int
//
//// loop item nodes in response message
//for( jdbcResults in holder1.getNodeValues( '//MULTI_LEVEL_ANNOTATION.LEVEL1, //CONTENT_VOLUME' ))
//{  
//  jdbcStringList = jdbcStringList + jdbcResults
//}
////log.info jdbcStringList.size()
//holder2.namespaces['ns'] = 'http://10.200.0.124/ArticleQueryApi/rest/query/aggregate'
//for( restResponse in holder2.getNodeValues( '//ns:results/ns:e/ns:entity_type, //ns:results/ns:e/ns:content_volume'  ))
//{
//  restStringList = restStringList + restResponse
//    if (restResponse in jdbcStringList ) assert true : "Pass"
//    else {
//    	   //alert.showInfoMessage(jdbcStringList[x] + " counts do not match","soapUI Warning !")
//    	   //log.info 'Results from vertica do not match results from articleQueryApi '+ jdbcStringList[x] + " " + restResponse
//    	   log.info 'Entity : ' + jdbcStringList[x]
//        log.info 'Vertica: '+ jdbcStringList[y] + " HBase: " + restResponse
//        verticount = jdbcStringList[y] as Integer
//        hbasecount = restResponse as Integer
//        //log.info verticount
//        //log.info hbasecount
//       if (verticount < hbasecount)
//          {
//             f = ((1 - (verticount/hbasecount)) * 100 )
//             f = f.abs()
//             log.info 'Difference of: ' + new Double(f).round(2) + '%'
//             log.info 'Vertica count is less than HBase count'
//          }
//          else
//             {
//                f = ((1 - (hbasecount/verticount)) * 100 )
//                f = f.abs()
//                log.info 'Difference of: ' + new Double(f).round(2) + '%'
//                log.info 'HBase count is less than Vertica count'
//             }
//       if (f < 2 )
//          {
//             log.info 'PASS'
//          }
//          else
//             {
//                log.info 'FAILED: Percentage is > 2%'
//                fail = fail + 1
//             }
//
//    x = x + 1
//    
//    }
//    y = y + 1
//}
//log.info "Fail count = " + fail
//log.info "request  : >" + jdbcStringList
//log.info "result     : >" + restStringList
//if (fail>0)
//    {
//       assert false : "Percentage is greater than 2%"
//    }]]></script></con:config></con:testStep><con:testStep type="groovy" name="logsToFile" disabled="true"><con:settings/><con:config><script>//The below groovy script step is to capture the soapUI log area.
// "soapUI log" can be replaced with http log, jetty log, script log, error log etc based on the need.
def logArea = com.eviware.soapui.SoapUI.logMonitor.getLogArea( "script log" );
//Below two lines of groovy script is to get the project directory, we will be saving the soapUI log contents on a file in that directory.
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def start = context.expand('${#Global#filestart}')
def end = context.expand('${#Global#fileend}')
def projectPath = groovyUtils.projectPath
def status = context.expand('${#Global#testStatus}') as Integer
if (status > 0)
   {
   	def fail = context.expand('${#Global#fail}') as String
   	//log.info fail
   	def logFile = new File(projectPath + "\\" + fail + "_soapUI-Logs-to-file_" + start +"_to_" + end + ".txt")
   	def accountName = ("Account Name: " + context.expand('${#Global#itcAccountName}') + "\r\n") as String
     def accountId = ("Account ID  : " + context.expand('${#Global#itcAccountId}') + "\r\n") as String
     def userName = ("Username    : " + context.expand('${#Global#itcUsername}')  + "\r\n") as String
     def password = ("Password    : " + context.expand('${#Global#itcPassword}')  + "\r\n") as String
     def topicId =  ("Topic ID    : " + context.expand('${#Global#itctopicid}') + "\r\n") as String
     def sqlStart =  ("Start Time  : " + context.expand('${#Global#querysqlstart}') + "\r\n") as String
     def sqlEnd =  ("End Time    : " + context.expand('${#Global#querysqlend}') + "\r\n") as String

     logFile.write("soapUI Logs In a file.\r\n" + accountName + accountId + userName + password + topicId + sqlStart + sqlEnd)
        if( logArea !=null )
        {
           def model = logArea.model
           if( model.size > 0 )            
              for( c in 0..(model.size-1) )         
                logFile.append(model.getElementAt( c ).toString() + "\r\n")
        }
   }
   else
      {
   	   def pass = context.expand('${#Global#pass}') as String
   	   //log.info pass
   	   def logFile = new File(projectPath + "\\" + pass + "_soapUI-Logs-to-file_" + start +"_to_" + end + ".txt")
   	   def accountName = ("Account Name: " + context.expand('${#Global#itcAccountName}') + "\r\n") as String
        def accountId = ("Account ID  : " + context.expand('${#Global#itcAccountId}') + "\r\n") as String
        def userName = ("Username    : " + context.expand('${#Global#itcUsername}')  + "\r\n") as String
        def password = ("Password    : " + context.expand('${#Global#itcPassword}')  + "\r\n") as String
        def topicId =  ("Topic ID    : " + context.expand('${#Global#itctopicid}') + "\r\n") as String
        def sqlStart =  ("Start Time  : " + context.expand('${#Global#querysqlstart}') + "\r\n") as String
        def sqlEnd =  ("End Time    : " + context.expand('${#Global#querysqlend}') + "\r\n") as String

        logFile.write("soapUI Logs In a file.\r\n" + accountName + accountId + userName + password + topicId + sqlStart + sqlEnd)
           if( logArea !=null )
           {
              def model = logArea.model
              if( model.size > 0 )            
                 for( c in 0..(model.size-1) )         
                   logFile.append(model.getElementAt( c ).toString() + "\r\n")       
           }
      }

////This is the first line in the soapUI log file.
//def accountName = ("Account Name: " + context.expand('${#Global#itcAccountName}') + "\r\n") as String
//def accountId = ("Account ID  : " + context.expand('${#Global#itcAccountId}') + "\r\n") as String
//def userName = ("Username    : " + context.expand('${#Global#itcUsername}')  + "\r\n") as String
//def password = ("Password    : " + context.expand('${#Global#itcPassword}')  + "\r\n") as String
//def topicId =  ("Topic ID    : " + context.expand('${#Global#itctopicid}') + "\r\n") as String
//def sqlStart =  ("Start Time  : " + context.expand('${#Global#querysqlstart}') + "\r\n") as String
//def sqlEnd =  ("End Time    : " + context.expand('${#Global#querysqlend}') + "\r\n") as String
//
//logFile.write("soapUI Logs In a file.\r\n" + accountName + accountId + userName + password + topicId + sqlStart + sqlEnd)
//   if( logArea !=null )
//   {
//      def model = logArea.model
//      if( model.size > 0 )            
//         for( c in 0..(model.size-1) )         
//           logFile.append(model.getElementAt( c ).toString() + "\r\n")       
//      
//   }</script></con:config></con:testStep><con:properties/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="AggregateTopStateMentions" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="d00a9c56-ece0-410b-ae6d-f22e0417618c"><con:settings/><con:testStep type="groovy" name="settime" disabled="true"><con:settings/><con:config><script>Calendar sod = Calendar.instance
    sod.set(Calendar.AM_PM, 0)
    sod.set(Calendar.HOUR, 0)
    sod.set(Calendar.MINUTE, 0)
    sod.set(Calendar.SECOND, 0)
    sod.set(Calendar.MILLISECOND, 0)
start = sod.time 
sqlstart = start.format('MM-dd-yy HH:mm:ss')
//log.info "SQL Start Time:  " + sqlstart
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "querysqlstart", sqlstart )

Calendar eod = Calendar.instance
    eod.set(Calendar.AM_PM, 0)
    eod.set(Calendar.HOUR, 9)
    eod.set(Calendar.MINUTE, 59)
    eod.set(Calendar.SECOND, 59)
    eod.set(Calendar.MILLISECOND, 999)
end = eod.time 
sqlend = end.format('MM-dd-yy HH:mm:ss')
//log.info "SQL End Time:  " + sqlend
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "querysqlend", sqlend )

offset = sod.get(Calendar.ZONE_OFFSET) + sod.get(Calendar.DST_OFFSET) / (60 * 1000)

starttime = start.time
epochstart = starttime + offset
//log.info "Epoch Start Time:  " + epochstart
def epochstart = epochstart as String
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "queryepochstart", epochstart )
def timestampstart = epochstart as Long
Date tss = new Date(timestampstart)
//log.info "Time to select in local timezone:  "+ tss

endtime = end.time
epochend = endtime + offset
//log.info "Epoch End Time:  " + epochend
def epochend = epochend as String
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "queryepochend", epochend )
def timestampend = epochend as Long
Date tse = new Date(timestampend)
//log.info "Time to select in local timezone:  "+ tse

now = Calendar.instance
today = now.time
millis = today.time
//log.info "Current time in milli-seconds:  " + millis
def today = new Date (millis)
//log.info "Current Local Time:  "+ today
tf = today.format('MM dd yy HH mm ss')
//log.info "Current Local Time nicely formatted:  "+ tf
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "time", tf )</script></con:config></con:testStep><con:testStep type="restrequest" name="authuser"><con:settings/><con:config service="ARTSA - UserManager" resourcePath="/SaasCoreUserManager/rest/auth" methodName="POST - authenticate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="authuser" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="authkey" value="1189377229352574419-2213262129298445271-4936701685398756970-61" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://10.200.0.124:8080</con:endpoint><con:request>{
  "username":${#Global#userUsername},
  "password":${#Global#useroriginalpassword},
  "accountName":${#Global#userAccountName}
}</con:request><con:assertion type="XPath Match" name="XPath Match"><con:configuration><path>declare namespace soap='http://schemas.xmlsoap.org/soap/envelope/';
declare namespace ns1='http://10.200.0.124/SaasCoreUserManager/rest/auth';
//ns1:loginFailed</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="authResponse"><con:settings/><con:config><script>import groovy.json.JsonSlurper
import com.eviware.soapui.impl.wsdl.teststeps.*

responseContent = testRunner.testCase.getTestStepByName("authuser").getPropertyValue("response")
slurperresponse = new JsonSlurper().parseText(responseContent)

accountid = (slurperresponse.account)
def accountid = accountid as String
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "accountid", accountid )

accountname = (slurperresponse.accountName)
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "accountName", accountname )

authkey = (slurperresponse.authkey)
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "authkey", authkey )

userid = (slurperresponse.id)
def userid = userid as String
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "userid", userid )

username = (slurperresponse.username)
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "userName", username )

//log.info accountid
//log.info accountname
//log.info authkey
//log.info userid
//log.info username</script></con:config></con:testStep><con:testStep type="groovy" name="setutokenheader"><con:settings/><con:config><script>import com.eviware.soapui.impl.wsdl.teststeps.*
import com.eviware.soapui.support.types.StringToStringMap;

def authkey = com.eviware.soapui.SoapUI.globalProperties.getPropertyValue( "authkey")
def tc = testRunner.testCase.testSuite.getTestCaseByName("AggregateTopStateMentions")
def ts11 = tc.getTestStepByName("Summary06TopStateMentions")


def headers = new StringToStringMap()
headers.putIfMissing("utoken",authkey)

ts11.getHttpRequest().setRequestHeaders(headers)</script></con:config></con:testStep><con:testStep type="groovy" name="initialize_jdbc_driver"><con:settings/><con:config><script>com.eviware.soapui.support.GroovyUtils.registerJdbcDriver("vertica.jdbc.driver.vertica")</script></con:config></con:testStep><con:testStep type="restrequest" name="Summary06TopStateMentions"><con:settings/><con:config service="ARTSA  - Article Query" resourcePath="/ArticleQueryApi/rest/query/aggregate" methodName="POST - getAggregateData" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Summary06TopStateMentions" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="utoken" value="-5875198073973390803--7830035699646800917-7999476679051876167-1001" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://10.200.0.124:8080</con:endpoint><con:request>{
  "topicIDs":[${#Global#topicid}],
  "limit":10,
  "selectedFields":[
   	   {"field":"content_volume()","sortDirection":"DESCENDING"},
        {"field":"entity_value","sortDirection":"ASCENDING"}
        //{"field":"combined_topics"}
  ],
  "filters":[
      //{"field":"entity_value","comparison":"EQ","values":["hawaii","kentucky","tennessee"]},
      {"field":"entity_type","comparison":"EQ","values":["STATE"]}
      
  ],
  "dateRange":{"startDate":${#Global#queryepochstart},"endDate":${#Global#queryepochend}}
}</con:request><con:assertion type="XPath Match" name="assert_entity_type_state"><con:configuration><path>declare namespace soap='http://schemas.xmlsoap.org/soap/envelope/';
declare namespace ns1='http://10.200.0.124/ArticleQueryApi/rest/query/aggregate';
//ns1:entity_type</path><content>STATE</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="jdbc" name="SummaryTopStateMentionsVertica"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>com.vertica.Driver</con:driver><con:connectionString>jdbc:vertica://10.200.0.190:5433/artsa01?user=artsa01&amp;password=artsa2</con:connectionString><con:query>SELECT en.value,COUNT(DISTINCT ta.article_id) content_volume
FROM (
	SELECT pipeline_topic_id, article_id, publish_at, publish_at_week
	FROM topic_article ta
	WHERE pipeline_topic_id IN (${#Global#topicid})
	AND ta.publish_at BETWEEN '${#Global#querysqlstart}' AND '${#Global#querysqlend}'
	 ) ta
INNER JOIN multi_level_annotation en on en.article_id=ta.article_id
AND en.type='entity'
WHERE  ta.pipeline_topic_id IN (${#Global#topicid})
AND en.account IN (0,${#Global#accountid})
AND en.level1 = 'STATE'
GROUP BY en.value
ORDER BY COUNT(DISTINCT ta.article_id) DESC, en.value ASC  limit 10</con:query><con:properties/></con:config></con:testStep><con:testStep type="groovy" name="compareResultsTopStateMentions"><con:settings/><con:config><script><![CDATA[// create groovyUtils and XmlHolder for response of Request
def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
def alert = com.eviware.soapui.support.UISupport;
def response1 = context.expand( 'SummaryTopStateMentionsVertica#ResponseAsXml' )
def response2 = context.expand( '${Summary06TopStateMentions#ResponseAsXml}' )
def holder1 = groovyUtils.getXmlHolder(response1)
def holder2 = groovyUtils.getXmlHolder(response2)

log.info "*************************************************************"
log.info "   Begin test for : " + context.getCurrentStep().getLabel()
log.info "*************************************************************"

// loop item nodes in Vertica response message
def jdbcMap = [:];
def jdbcEntityTypeArr = holder1.getNodeValues( '//MULTI_LEVEL_ANNOTATION.VALUE' )
def jdbcEntityVolumeArr = holder1.getNodeValues( '//CONTENT_VOLUME' )
for( int z=0; z<jdbcEntityTypeArr.length; z++) {  
	jdbcMap.put(jdbcEntityTypeArr[z],jdbcEntityVolumeArr[z]);
}
//log.info jdbcMap

// loop item nodes in REST response message
def restMap = [:];
holder2.namespaces['ns'] = 'http://10.200.0.124/ArticleQueryApi/rest/query/aggregate'
def restEntityTypeArr = holder2.getNodeValues( '//ns:results/ns:e/ns:entity_value'  )
def restEntityVolumeArr = holder2.getNodeValues( '//ns:results/ns:e/ns:content_volume'  )
for( int z=0; z<restEntityTypeArr.length; z++) {  
	restMap.put(restEntityTypeArr[z],restEntityVolumeArr[z]);
}
//log.info restMap

class CompRes {
	def jdbcKey;
	def jdbcValue;
	def restValue;
  CompRes(jdbcKey1, jdbcValue1, restValue1) {
  	jdbcKey = jdbcKey1;
  	jdbcValue = jdbcValue1;
  	restValue = restValue1;
  }
  def fail() {
  	if(jdbcValue == null || restValue == null) {
  		return -1;
  	}
  	def f;
//  	if ((jdbcValue.toInteger() < 100 || restValue.toInteger() < 100) && (jdbcValue.toInteger()-restValue.toInteger() > 2 || restValue.toInteger()-jdbcValue.toInteger() > 2))
//  	{
//  		return -1;
//  	}
//  	else {
//  		return 0;
//  	}
     if (jdbcValue.toInteger() < restValue.toInteger())
     {
        f = ((1 - (jdbcValue.toInteger()/restValue.toInteger())) * 100 )
        f = f.abs()
     }
     else
     {
        f = ((1 - (restValue.toInteger()/jdbcValue.toInteger())) * 100 )
        f = f.abs()
     }
	if(f > 2) {
		return new Double(f).round(2);
	}
	return 0;
  }
}

def comparisonResults = [];
for(j in jdbcMap) {
	def jdbcKey = j.key;
	def jdbcValue = j.value;
	def restValue = restMap.get(jdbcKey);
	if(restValue == null || restValue != jdbcValue) {
		def comparisonResult = new CompRes(jdbcKey, jdbcValue, restValue);
		comparisonResults.add(comparisonResult);
	}
}
for(r in restMap) {
	def restKey = r.key;
	def restValue = r.value;
	def jdbcValue = jdbcMap.get(restKey);
	if(jdbcValue == null) {
		def comparisonResult = new CompRes(restKey, null, restValue);
		comparisonResults.add(comparisonResult);
	}
}
def failCount = 0;
for(item in comparisonResults) {
	def fail = item.fail();
	if(fail == -1) {
		log.info((++failCount) + ": " + item.jdbcKey + "-" + item.jdbcValue + "-" + item.restValue);
	} else if(fail > 0) {
		log.info((++failCount) + ": " + item.jdbcKey + "-" + item.jdbcValue + "-" + item.restValue + " --- PERCENT: " + fail);
	} else {
//		log.info(item.jdbcKey + "-" + item.jdbcValue + "-" + item.restValue);
	}
}

if (failCount>0)
    {
       log.info 'Vertica Results    : ' + jdbcMap
       log.info 'Pavi_Test Results: ' + restMap
       log.info 'FAILED : ' + failCount + '  tests failed'
       log.info "*************************************************************"
       log.info "   End test for : " + context.getCurrentStep().getLabel()
       log.info "*************************************************************"
       testStatus = "1"
       com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "testStatus", testStatus )
       assert false : "Test Suite FAILED"
    }
    else
    {
    	  log.info 'PASSED : ' + failCount + '  tests failed'
    	  log.info "*************************************************************"
    	  log.info "   End test for : " + context.getCurrentStep().getLabel()
       log.info "*************************************************************"
       
       assert true: "Test Suite Passed"
    }

//// create groovyUtils and XmlHolder for response of Request
//def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
//def alert = com.eviware.soapui.support.UISupport;
//def response1 = context.expand( 'SummaryTopStateMentionsVertica#ResponseAsXml' )
//def response2 = context.expand( '${Summary06TopStateMentions#ResponseAsXml}' )
//def holder1 = groovyUtils.getXmlHolder(response1)
//def holder2 = groovyUtils.getXmlHolder(response2)
//
//def jdbcStringList = []
//def restStringList = []
//def x = 0 as int
//def y = 0 as int
//def fail = 0 as int
//
//// loop item nodes in response message
//for( jdbcResults in holder1.getNodeValues( '//MULTI_LEVEL_ANNOTATION.VALUE, //CONTENT_VOLUME' ))
//{  
//  //log.info 'Item : [$jdbcResults]'
//  jdbcStringList = jdbcStringList + jdbcResults
//}
//
//holder2.namespaces['ns'] = 'http://10.200.0.124/ArticleQueryApi/rest/query/aggregate'
//for( restResponse in holder2.getNodeValues( '//ns:results/ns:e/ns:entity_value, //ns:results/ns:e/ns:content_volume'  ))
//{
//  //log.info 'Item : [$restResponse]' 
//  restStringList = restStringList + restResponse
//    if (restResponse in jdbcStringList ) assert true
//    else {
//    	   //alert.showInfoMessage(jdbcStringList[x] + " counts do not match","soapUI Warning !")
//    	   //log.info 'Results from vertica do not match results from articleQueryApi '+ jdbcStringList[x] + " " + restResponse
//    	   log.info 'Entity : ' + jdbcStringList[x]
//        log.info 'Vertica: '+ jdbcStringList[y] + " HBase: " + restResponse
//        verticount = jdbcStringList[y] as Integer
//        hbasecount = restResponse as Integer
//        //log.info verticount
//        //log.info hbasecount
//       if (verticount < hbasecount)
//          {
//             f = ((1 - (verticount/hbasecount)) * 100 )
//             f = f.abs()
//             log.info 'Difference of: ' + new Double(f).round(2) + '%'
//             log.info 'Vertica count is less than HBase count'
//          }
//          else
//             {
//                f = ((1 - (hbasecount/verticount)) * 100 )
//                f = f.abs()
//                log.info 'Difference of: ' + new Double(f).round(2) + '%'
//                log.info 'HBase count is less than Vertica count'
//             }
//       if (f < 2 )
//          {
//             log.info 'PASS'
//          }
//          else
//             {
//                log.info 'FAILED: Percentage is > 2%'
//                fail = fail + 1
//             }
//
//    x = x + 1
//    
//    }
//    y = y + 1
//}
//log.info "Fail count = " + fail
//log.info "request  : >" + jdbcStringList
//log.info "result     : >" + restStringList
//if (fail>0)
//    {
//       assert false : "Percentage is greater than 2%"
//    }]]></script></con:config></con:testStep><con:testStep type="groovy" name="logsToFile" disabled="true"><con:settings/><con:config><script>//The below groovy script step is to capture the soapUI log area.
// "soapUI log" can be replaced with http log, jetty log, script log, error log etc based on the need.
def logArea = com.eviware.soapui.SoapUI.logMonitor.getLogArea( "script log" );
//Below two lines of groovy script is to get the project directory, we will be saving the soapUI log contents on a file in that directory.
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def start = context.expand('${#Global#filestart}')
def end = context.expand('${#Global#fileend}')
def projectPath = groovyUtils.projectPath
def status = context.expand('${#Global#testStatus}') as Integer
if (status > 0)
   {
   	def fail = context.expand('${#Global#fail}') as String
   	//log.info fail
   	def logFile = new File(projectPath + "\\" + fail + "_soapUI-Logs-to-file_" + start +"_to_" + end + ".txt")
   	def accountName = ("Account Name: " + context.expand('${#Global#itcAccountName}') + "\r\n") as String
     def accountId = ("Account ID  : " + context.expand('${#Global#itcAccountId}') + "\r\n") as String
     def userName = ("Username    : " + context.expand('${#Global#itcUsername}')  + "\r\n") as String
     def password = ("Password    : " + context.expand('${#Global#itcPassword}')  + "\r\n") as String
     def topicId =  ("Topic ID    : " + context.expand('${#Global#itctopicid}') + "\r\n") as String
     def sqlStart =  ("Start Time  : " + context.expand('${#Global#querysqlstart}') + "\r\n") as String
     def sqlEnd =  ("End Time    : " + context.expand('${#Global#querysqlend}') + "\r\n") as String

     logFile.write("soapUI Logs In a file.\r\n" + accountName + accountId + userName + password + topicId + sqlStart + sqlEnd)
        if( logArea !=null )
        {
           def model = logArea.model
           if( model.size > 0 )            
              for( c in 0..(model.size-1) )         
                logFile.append(model.getElementAt( c ).toString() + "\r\n")
        }
   }
   else
      {
   	   def pass = context.expand('${#Global#pass}') as String
   	   //log.info pass
   	   def logFile = new File(projectPath + "\\" + pass + "_soapUI-Logs-to-file_" + start +"_to_" + end + ".txt")
   	   def accountName = ("Account Name: " + context.expand('${#Global#itcAccountName}') + "\r\n") as String
        def accountId = ("Account ID  : " + context.expand('${#Global#itcAccountId}') + "\r\n") as String
        def userName = ("Username    : " + context.expand('${#Global#itcUsername}')  + "\r\n") as String
        def password = ("Password    : " + context.expand('${#Global#itcPassword}')  + "\r\n") as String
        def topicId =  ("Topic ID    : " + context.expand('${#Global#itctopicid}') + "\r\n") as String
        def sqlStart =  ("Start Time  : " + context.expand('${#Global#querysqlstart}') + "\r\n") as String
        def sqlEnd =  ("End Time    : " + context.expand('${#Global#querysqlend}') + "\r\n") as String

        logFile.write("soapUI Logs In a file.\r\n" + accountName + accountId + userName + password + topicId + sqlStart + sqlEnd)
           if( logArea !=null )
           {
              def model = logArea.model
              if( model.size > 0 )            
                 for( c in 0..(model.size-1) )         
                   logFile.append(model.getElementAt( c ).toString() + "\r\n")       
           }
      }

////This is the first line in the soapUI log file.
//def accountName = ("Account Name: " + context.expand('${#Global#itcAccountName}') + "\r\n") as String
//def accountId = ("Account ID  : " + context.expand('${#Global#itcAccountId}') + "\r\n") as String
//def userName = ("Username    : " + context.expand('${#Global#itcUsername}')  + "\r\n") as String
//def password = ("Password    : " + context.expand('${#Global#itcPassword}')  + "\r\n") as String
//def topicId =  ("Topic ID    : " + context.expand('${#Global#itctopicid}') + "\r\n") as String
//def sqlStart =  ("Start Time  : " + context.expand('${#Global#querysqlstart}') + "\r\n") as String
//def sqlEnd =  ("End Time    : " + context.expand('${#Global#querysqlend}') + "\r\n") as String
//
//logFile.write("soapUI Logs In a file.\r\n" + accountName + accountId + userName + password + topicId + sqlStart + sqlEnd)
//   if( logArea !=null )
//   {
//      def model = logArea.model
//      if( model.size > 0 )            
//         for( c in 0..(model.size-1) )         
//           logFile.append(model.getElementAt( c ).toString() + "\r\n")       
//      
//   }</script></con:config></con:testStep><con:properties/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="AggregateTopPeople" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="a20a68f5-dfb7-45d0-ac1e-f4c5c4136754"><con:settings/><con:testStep type="groovy" name="settime" disabled="true"><con:settings/><con:config><script>Calendar sod = Calendar.instance
    sod.set(Calendar.AM_PM, 0)
    sod.set(Calendar.HOUR, 0)
    sod.set(Calendar.MINUTE, 0)
    sod.set(Calendar.SECOND, 0)
    sod.set(Calendar.MILLISECOND, 0)
start = sod.time 
sqlstart = start.format('MM-dd-yy HH:mm:ss')
//log.info "SQL Start Time:  " + sqlstart
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "querysqlstart", sqlstart )

Calendar eod = Calendar.instance
    eod.set(Calendar.AM_PM, 0)
    eod.set(Calendar.HOUR, 9)
    eod.set(Calendar.MINUTE, 59)
    eod.set(Calendar.SECOND, 59)
    eod.set(Calendar.MILLISECOND, 999)
end = eod.time 
sqlend = end.format('MM-dd-yy HH:mm:ss')
//log.info "SQL End Time:  " + sqlend
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "querysqlend", sqlend )

offset = sod.get(Calendar.ZONE_OFFSET) + sod.get(Calendar.DST_OFFSET) / (60 * 1000)

starttime = start.time
epochstart = starttime + offset
//log.info "Epoch Start Time:  " + epochstart
def epochstart = epochstart as String
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "queryepochstart", epochstart )
def timestampstart = epochstart as Long
Date tss = new Date(timestampstart)
//log.info "Time to select in local timezone:  "+ tss

endtime = end.time
epochend = endtime + offset
//log.info "Epoch End Time:  " + epochend
def epochend = epochend as String
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "queryepochend", epochend )
def timestampend = epochend as Long
Date tse = new Date(timestampend)
//log.info "Time to select in local timezone:  "+ tse

now = Calendar.instance
today = now.time
millis = today.time
//log.info "Current time in milli-seconds:  " + millis
def today = new Date (millis)
//log.info "Current Local Time:  "+ today
tf = today.format('MM dd yy HH mm ss')
//log.info "Current Local Time nicely formatted:  "+ tf
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "time", tf )</script></con:config></con:testStep><con:testStep type="restrequest" name="authuser"><con:settings/><con:config service="ARTSA - UserManager" resourcePath="/SaasCoreUserManager/rest/auth" methodName="POST - authenticate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="authuser" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="authkey" value="1189377229352574419-2213262129298445271-4936701685398756970-61" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://10.200.0.124:8080</con:endpoint><con:request>{
  "username":${#Global#userUsername},
  "password":${#Global#useroriginalpassword},
  "accountName":${#Global#userAccountName}
}</con:request><con:assertion type="XPath Match" name="XPath Match"><con:configuration><path>declare namespace soap='http://schemas.xmlsoap.org/soap/envelope/';
declare namespace ns1='http://10.200.0.124/SaasCoreUserManager/rest/auth';
//ns1:loginFailed</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="authResponse"><con:settings/><con:config><script>import groovy.json.JsonSlurper
import com.eviware.soapui.impl.wsdl.teststeps.*

responseContent = testRunner.testCase.getTestStepByName("authuser").getPropertyValue("response")
slurperresponse = new JsonSlurper().parseText(responseContent)

accountid = (slurperresponse.account)
def accountid = accountid as String
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "accountid", accountid )

accountname = (slurperresponse.accountName)
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "accountName", accountname )

authkey = (slurperresponse.authkey)
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "authkey", authkey )

userid = (slurperresponse.id)
def userid = userid as String
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "userid", userid )

username = (slurperresponse.username)
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "userName", username )

//log.info accountid
//log.info accountname
//log.info authkey
//log.info userid
//log.info username</script></con:config></con:testStep><con:testStep type="groovy" name="setutokenheader"><con:settings/><con:config><script>import com.eviware.soapui.impl.wsdl.teststeps.*
import com.eviware.soapui.support.types.StringToStringMap;

def authkey = com.eviware.soapui.SoapUI.globalProperties.getPropertyValue( "authkey")
def tc = testRunner.testCase.testSuite.getTestCaseByName("AggregateTopPeople")
def ts11 = tc.getTestStepByName("Summary04TopPeople")


def headers = new StringToStringMap()
headers.putIfMissing("utoken",authkey)

ts11.getHttpRequest().setRequestHeaders(headers)</script></con:config></con:testStep><con:testStep type="groovy" name="initialize_jdbc_driver"><con:settings/><con:config><script>com.eviware.soapui.support.GroovyUtils.registerJdbcDriver("vertica.jdbc.driver.vertica")</script></con:config></con:testStep><con:testStep type="restrequest" name="Summary04TopPeople"><con:settings/><con:config service="ARTSA  - Article Query" resourcePath="/ArticleQueryApi/rest/query/aggregate" methodName="POST - getAggregateData" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Summary04TopPeople" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="utoken" value="1309642155367688525-2678790112332085422--7907329747187976274-1001" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://10.200.0.124:8080</con:endpoint><con:request>{
  "topicIDs":[${#Global#topicid}],
  "limit":5,
  "selectedFields":[
        {"field":"content_volume()","sortDirection":"DESCENDING"},
        {"field":"entity_value","sortDirection":"ASCENDING"}
        //{"field":"combined_topics"}
  ],
  "filters":[
      //{"field":"entity_value","comparison":"EQ","values":["alex","daniel","doe","josh","lady gaga","paul"]},
      {"field":"entity_type","comparison":"EQ","values":["PERSON"]}
      
  ],
  "dateRange":{"startDate":${#Global#queryepochstart},"endDate":${#Global#queryepochend}}
}</con:request><con:assertion type="XPath Match" name="assert_entity_type_person"><con:configuration><path>declare namespace soap='http://schemas.xmlsoap.org/soap/envelope/';
declare namespace ns1='http://10.200.0.124/ArticleQueryApi/rest/query/aggregate';
//ns1:entity_type</path><content>PERSON</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="jdbc" name="SummaryTopPeopleVertica"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>com.vertica.Driver</con:driver><con:connectionString>jdbc:vertica://10.200.0.190:5433/artsa01?user=artsa01&amp;password=artsa2</con:connectionString><con:query>SELECT en.value,COUNT(DISTINCT ta.article_id) content_volume
FROM (
	SELECT pipeline_topic_id, article_id, publish_at, publish_at_week
	FROM topic_article ta
	WHERE pipeline_topic_id IN (${#Global#topicid})
	AND ta.publish_at BETWEEN '${#Global#querysqlstart}' AND '${#Global#querysqlend}'
	 ) ta
INNER JOIN multi_level_annotation en on en.article_id=ta.article_id
AND en.type='entity'
WHERE  ta.pipeline_topic_id IN (${#Global#topicid})
AND en.account IN (0,${#Global#accountid})
AND en.level1 = 'PERSON'
GROUP BY en.value
ORDER BY COUNT(DISTINCT ta.article_id) DESC, en.value ASC  limit 5</con:query><con:properties/></con:config></con:testStep><con:testStep type="groovy" name="compareResultsTopPeople"><con:settings/><con:config><script><![CDATA[// create groovyUtils and XmlHolder for response of Request
def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
def alert = com.eviware.soapui.support.UISupport;
def response1 = context.expand( 'SummaryTopPeopleVertica#ResponseAsXml' )
def response2 = context.expand( '${Summary04TopPeople#ResponseAsXml}' )
def holder1 = groovyUtils.getXmlHolder(response1)
def holder2 = groovyUtils.getXmlHolder(response2)

log.info "*************************************************************"
log.info "   Begin test for : " + context.getCurrentStep().getLabel()
log.info "*************************************************************"

// loop item nodes in Vertica response message
def jdbcMap = [:];
def jdbcEntityTypeArr = holder1.getNodeValues( '//MULTI_LEVEL_ANNOTATION.VALUE' )
def jdbcEntityVolumeArr = holder1.getNodeValues( '//CONTENT_VOLUME' )
for( int z=0; z<jdbcEntityTypeArr.length; z++) {  
	jdbcMap.put(jdbcEntityTypeArr[z],jdbcEntityVolumeArr[z]);
}
//log.info jdbcMap

// loop item nodes in REST response message
def restMap = [:];
holder2.namespaces['ns'] = 'http://10.200.0.124/ArticleQueryApi/rest/query/aggregate'
def restEntityTypeArr = holder2.getNodeValues( '//ns:results/ns:e/ns:entity_value'  )
def restEntityVolumeArr = holder2.getNodeValues( '//ns:results/ns:e/ns:content_volume'  )
for( int z=0; z<restEntityTypeArr.length; z++) {  
	restMap.put(restEntityTypeArr[z],restEntityVolumeArr[z]);
}
//log.info restMap

class CompRes {
	def jdbcKey;
	def jdbcValue;
	def restValue;
  CompRes(jdbcKey1, jdbcValue1, restValue1) {
  	jdbcKey = jdbcKey1;
  	jdbcValue = jdbcValue1;
  	restValue = restValue1;
  }
  def fail() {
  	if(jdbcValue == null || restValue == null) {
  		return -1;
  	}
  	def f;
//  	if ((jdbcValue.toInteger() < 100 || restValue.toInteger() < 100) && (jdbcValue.toInteger()-restValue.toInteger() > 2 || restValue.toInteger()-jdbcValue.toInteger() > 2))
//  	{
//  		return -1;
//  	}
//  	else {
//  		return 0;
//  	}
     if (jdbcValue.toInteger() < restValue.toInteger())
     {
        f = ((1 - (jdbcValue.toInteger()/restValue.toInteger())) * 100 )
        f = f.abs()
     }
     else
     {
        f = ((1 - (restValue.toInteger()/jdbcValue.toInteger())) * 100 )
        f = f.abs()
     }
	if(f > 2) {
		return new Double(f).round(2);
	}
	return 0;
  }
}

def comparisonResults = [];
for(j in jdbcMap) {
	def jdbcKey = j.key;
	def jdbcValue = j.value;
	def restValue = restMap.get(jdbcKey);
	if(restValue == null || restValue != jdbcValue) {
		def comparisonResult = new CompRes(jdbcKey, jdbcValue, restValue);
		comparisonResults.add(comparisonResult);
	}
}
for(r in restMap) {
	def restKey = r.key;
	def restValue = r.value;
	def jdbcValue = jdbcMap.get(restKey);
	if(jdbcValue == null) {
		def comparisonResult = new CompRes(restKey, null, restValue);
		comparisonResults.add(comparisonResult);
	}
}
def failCount = 0;
for(item in comparisonResults) {
	def fail = item.fail();
	if(fail == -1) {
		log.info((++failCount) + ": " + item.jdbcKey + "-" + item.jdbcValue + "-" + item.restValue);
	} else if(fail > 0) {
		log.info((++failCount) + ": " + item.jdbcKey + "-" + item.jdbcValue + "-" + item.restValue + " --- PERCENT: " + fail);
	} else {
//		log.info(item.jdbcKey + "-" + item.jdbcValue + "-" + item.restValue);
	}
}

if (failCount>0)
    {
       log.info 'Vertica Results    : ' + jdbcMap
       log.info 'Pavi_Test Results: ' + restMap
       log.info 'FAILED : ' + failCount + '  tests failed'
       log.info "*************************************************************"
       log.info "   End test for : " + context.getCurrentStep().getLabel()
       log.info "*************************************************************"
       testStatus = "1"
       com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "testStatus", testStatus )
       assert false : "Test Suite FAILED"
    }
    else
    {
    	  log.info 'PASSED : ' + failCount + '  tests failed'
    	  log.info "*************************************************************"
    	  log.info "   End test for : " + context.getCurrentStep().getLabel()
       log.info "*************************************************************"
       
       assert true: "Test Suite Passed"
    }

//// create groovyUtils and XmlHolder for response of Request
//def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
//def alert = com.eviware.soapui.support.UISupport;
//def response1 = context.expand( 'SummaryTopPeopleVertica#ResponseAsXml' )
//def response2 = context.expand( '${Summary04TopPeople#ResponseAsXml}' )
//def holder1 = groovyUtils.getXmlHolder(response1)
//def holder2 = groovyUtils.getXmlHolder(response2)
//
//def jdbcStringList = []
//def restStringList = []
//def x = 0 as int
//def y = 0 as int
//def fail = 0 as int
//
//// loop item nodes in response message
//for( jdbcResults in holder1.getNodeValues( '//MULTI_LEVEL_ANNOTATION.VALUE, //CONTENT_VOLUME' ))
//{  
//  //log.info 'Item : [$jdbcResults]'
//  jdbcStringList = jdbcStringList + jdbcResults
//}
//
//holder2.namespaces['ns'] = 'http://10.200.0.124/ArticleQueryApi/rest/query/aggregate'
//for( restResponse in holder2.getNodeValues( '//ns:results/ns:e/ns:entity_value, //ns:results/ns:e/ns:content_volume'  ))
//{
//  //log.info 'Item : [$restResponse]' 
//  restStringList = restStringList + restResponse
///*if (restResponse in jdbcStringList ) assert true
//    else {
//    	   //alert.showInfoMessage(jdbcStringList[x] + " counts do not match","soapUI Warning !")
//    	   //log.info 'Results from vertica do not match results from articleQueryApi '+ jdbcStringList[x] + " " + restResponse
//    	   log.info 'Entity : ' + jdbcStringList[x]
//        log.info 'Vertica: '+ jdbcStringList[y] + " HBase: " + restResponse
//        verticount = jdbcStringList[y] as Integer
//        hbasecount = restResponse as Integer
//        //log.info verticount
//        //log.info hbasecount
//       if (verticount < hbasecount)
//          {
//             f = ((1 - (verticount/hbasecount)) * 100 )
//             f = f.abs()
//             log.info 'Difference of: ' + new Double(f).round(2) + '%'
//             log.info 'Vertica count is less than HBase count'
//          }
//          else
//             {
//                f = ((1 - (hbasecount/verticount)) * 100 )
//                f = f.abs()
//                log.info 'Difference of: ' + new Double(f).round(2) + '%'
//                log.info 'HBase count is less than Vertica count'
//             }
//       if (f < 2 )
//          {
//             log.info 'PASS'
//          }
//          else
//             {
//                log.info 'FAILED: Percentage is > 2%'
//                fail = fail + 1
//             }
//
//    x = x + 1
//    
//    }
//    y = y + 1*/
//}
//log.info "Fail count = " + fail
//log.info "request  : >" + jdbcStringList
//log.info "result     : >" + restStringList
//if (fail>0)
//    {
//       assert false : "Percentage is greater than 2%"
//    }]]></script></con:config></con:testStep><con:testStep type="groovy" name="logsToFile" disabled="true"><con:settings/><con:config><script>//The below groovy script step is to capture the soapUI log area.
// "soapUI log" can be replaced with http log, jetty log, script log, error log etc based on the need.
def logArea = com.eviware.soapui.SoapUI.logMonitor.getLogArea( "script log" );
//Below two lines of groovy script is to get the project directory, we will be saving the soapUI log contents on a file in that directory.
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def start = context.expand('${#Global#filestart}')
def end = context.expand('${#Global#fileend}')
def projectPath = groovyUtils.projectPath
def status = context.expand('${#Global#testStatus}') as Integer
if (status > 0)
   {
   	def fail = context.expand('${#Global#fail}') as String
   	//log.info fail
   	def logFile = new File(projectPath + "\\" + fail + "_soapUI-Logs-to-file_" + start +"_to_" + end + ".txt")
   	def accountName = ("Account Name: " + context.expand('${#Global#itcAccountName}') + "\r\n") as String
     def accountId = ("Account ID  : " + context.expand('${#Global#itcAccountId}') + "\r\n") as String
     def userName = ("Username    : " + context.expand('${#Global#itcUsername}')  + "\r\n") as String
     def password = ("Password    : " + context.expand('${#Global#itcPassword}')  + "\r\n") as String
     def topicId =  ("Topic ID    : " + context.expand('${#Global#itctopicid}') + "\r\n") as String
     def sqlStart =  ("Start Time  : " + context.expand('${#Global#querysqlstart}') + "\r\n") as String
     def sqlEnd =  ("End Time    : " + context.expand('${#Global#querysqlend}') + "\r\n") as String

     logFile.write("soapUI Logs In a file.\r\n" + accountName + accountId + userName + password + topicId + sqlStart + sqlEnd)
        if( logArea !=null )
        {
           def model = logArea.model
           if( model.size > 0 )            
              for( c in 0..(model.size-1) )         
                logFile.append(model.getElementAt( c ).toString() + "\r\n")
        }
   }
   else
      {
   	   def pass = context.expand('${#Global#pass}') as String
   	   //log.info pass
   	   def logFile = new File(projectPath + "\\" + pass + "_soapUI-Logs-to-file_" + start +"_to_" + end + ".txt")
   	   def accountName = ("Account Name: " + context.expand('${#Global#itcAccountName}') + "\r\n") as String
        def accountId = ("Account ID  : " + context.expand('${#Global#itcAccountId}') + "\r\n") as String
        def userName = ("Username    : " + context.expand('${#Global#itcUsername}')  + "\r\n") as String
        def password = ("Password    : " + context.expand('${#Global#itcPassword}')  + "\r\n") as String
        def topicId =  ("Topic ID    : " + context.expand('${#Global#itctopicid}') + "\r\n") as String
        def sqlStart =  ("Start Time  : " + context.expand('${#Global#querysqlstart}') + "\r\n") as String
        def sqlEnd =  ("End Time    : " + context.expand('${#Global#querysqlend}') + "\r\n") as String

        logFile.write("soapUI Logs In a file.\r\n" + accountName + accountId + userName + password + topicId + sqlStart + sqlEnd)
           if( logArea !=null )
           {
              def model = logArea.model
              if( model.size > 0 )            
                 for( c in 0..(model.size-1) )         
                   logFile.append(model.getElementAt( c ).toString() + "\r\n")       
           }
      }

////This is the first line in the soapUI log file.
//def accountName = ("Account Name: " + context.expand('${#Global#itcAccountName}') + "\r\n") as String
//def accountId = ("Account ID  : " + context.expand('${#Global#itcAccountId}') + "\r\n") as String
//def userName = ("Username    : " + context.expand('${#Global#itcUsername}')  + "\r\n") as String
//def password = ("Password    : " + context.expand('${#Global#itcPassword}')  + "\r\n") as String
//def topicId =  ("Topic ID    : " + context.expand('${#Global#itctopicid}') + "\r\n") as String
//def sqlStart =  ("Start Time  : " + context.expand('${#Global#querysqlstart}') + "\r\n") as String
//def sqlEnd =  ("End Time    : " + context.expand('${#Global#querysqlend}') + "\r\n") as String
//
//logFile.write("soapUI Logs In a file.\r\n" + accountName + accountId + userName + password + topicId + sqlStart + sqlEnd)
//   if( logArea !=null )
//   {
//      def model = logArea.model
//      if( model.size > 0 )            
//         for( c in 0..(model.size-1) )         
//           logFile.append(model.getElementAt( c ).toString() + "\r\n")       
//      
//   }</script></con:config></con:testStep><con:properties/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="AggregateTopHashtags" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="d77dcacb-f662-486b-944a-747a44796de5"><con:settings/><con:testStep type="groovy" name="settime" disabled="true"><con:settings/><con:config><script>Calendar sod = Calendar.instance
    sod.set(Calendar.AM_PM, 0)
    sod.set(Calendar.HOUR, 0)
    sod.set(Calendar.MINUTE, 0)
    sod.set(Calendar.SECOND, 0)
    sod.set(Calendar.MILLISECOND, 0)
start = sod.time 
sqlstart = start.format('MM-dd-yy HH:mm:ss')
//log.info "SQL Start Time:  " + sqlstart
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "querysqlstart", sqlstart )

Calendar eod = Calendar.instance
    eod.set(Calendar.AM_PM, 0)
    eod.set(Calendar.HOUR, 9)
    eod.set(Calendar.MINUTE, 59)
    eod.set(Calendar.SECOND, 59)
    eod.set(Calendar.MILLISECOND, 999)
end = eod.time 
sqlend = end.format('MM-dd-yy HH:mm:ss')
//log.info "SQL End Time:  " + sqlend
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "querysqlend", sqlend )

offset = sod.get(Calendar.ZONE_OFFSET) + sod.get(Calendar.DST_OFFSET) / (60 * 1000)

starttime = start.time
epochstart = starttime + offset
//log.info "Epoch Start Time:  " + epochstart
def epochstart = epochstart as String
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "queryepochstart", epochstart )
def timestampstart = epochstart as Long
Date tss = new Date(timestampstart)
//log.info "Time to select in local timezone:  "+ tss

endtime = end.time
epochend = endtime + offset
//log.info "Epoch End Time:  " + epochend
def epochend = epochend as String
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "queryepochend", epochend )
def timestampend = epochend as Long
Date tse = new Date(timestampend)
//log.info "Time to select in local timezone:  "+ tse

now = Calendar.instance
today = now.time
millis = today.time
//log.info "Current time in milli-seconds:  " + millis
def today = new Date (millis)
//log.info "Current Local Time:  "+ today
tf = today.format('MM dd yy HH mm ss')
//log.info "Current Local Time nicely formatted:  "+ tf
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "time", tf )</script></con:config></con:testStep><con:testStep type="restrequest" name="authuser"><con:settings/><con:config service="ARTSA - UserManager" resourcePath="/SaasCoreUserManager/rest/auth" methodName="POST - authenticate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="authuser" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="authkey" value="1189377229352574419-2213262129298445271-4936701685398756970-61" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://10.200.0.124:8080</con:endpoint><con:request>{
  "username":${#Global#userUsername},
  "password":${#Global#useroriginalpassword},
  "accountName":${#Global#userAccountName}
}</con:request><con:assertion type="XPath Match" name="XPath Match"><con:configuration><path>declare namespace soap='http://schemas.xmlsoap.org/soap/envelope/';
declare namespace ns1='http://10.200.0.124/SaasCoreUserManager/rest/auth';
//ns1:loginFailed</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="authResponse"><con:settings/><con:config><script>import groovy.json.JsonSlurper
import com.eviware.soapui.impl.wsdl.teststeps.*

responseContent = testRunner.testCase.getTestStepByName("authuser").getPropertyValue("response")
slurperresponse = new JsonSlurper().parseText(responseContent)

accountid = (slurperresponse.account)
def accountid = accountid as String
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "accountid", accountid )

accountname = (slurperresponse.accountName)
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "accountName", accountname )

authkey = (slurperresponse.authkey)
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "authkey", authkey )

userid = (slurperresponse.id)
def userid = userid as String
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "userid", userid )

username = (slurperresponse.username)
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "userName", username )

//log.info accountid
//log.info accountname
//log.info authkey
//log.info userid
//log.info username</script></con:config></con:testStep><con:testStep type="groovy" name="setutokenheader"><con:settings/><con:config><script>import com.eviware.soapui.impl.wsdl.teststeps.*
import com.eviware.soapui.support.types.StringToStringMap;

def authkey = com.eviware.soapui.SoapUI.globalProperties.getPropertyValue( "authkey")
def tc = testRunner.testCase.testSuite.getTestCaseByName("AggregateTopHashtags")
def ts11 = tc.getTestStepByName("Summary05TopHashtags")


def headers = new StringToStringMap()
headers.putIfMissing("utoken",authkey)

ts11.getHttpRequest().setRequestHeaders(headers)</script></con:config></con:testStep><con:testStep type="groovy" name="initialize_jdbc_driver"><con:settings/><con:config><script>com.eviware.soapui.support.GroovyUtils.registerJdbcDriver("vertica.jdbc.driver.vertica")</script></con:config></con:testStep><con:testStep type="restrequest" name="Summary05TopHashtags"><con:settings/><con:config service="ARTSA  - Article Query" resourcePath="/ArticleQueryApi/rest/query/aggregate" methodName="POST - getAggregateData" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Summary05TopHashtags" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="utoken" value="-3684576185105878190-6897668882682677050--445875540352826098-1001" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://10.200.0.124:8080</con:endpoint><con:request>{
  "topicIDs":[${#Global#topicid}],
  "limit":25,
  "selectedFields":[
   	   {"field":"content_volume()","sortDirection":"DESCENDING"},
   	   {"field":"entity_value","sortDirection":"ASCENDING"}
        //{"field":"combined_topics"}
  ],
  "filters":[
      //{"field":"entity_value","comparison":"EQ","values":["#followella","#igetannoyedwhenpeople","#mamamaliksfirstfollowspree","#path","#thepersonalnetwork"]},
      {"field":"entity_type","comparison":"EQ","values":["HASHTAG"]}
    
  ],
  "dateRange":{"startDate":${#Global#queryepochstart},"endDate":${#Global#queryepochend}}
}</con:request><con:assertion type="XPath Match" name="assert_entity_type_hashtag"><con:configuration><path>declare namespace soap='http://schemas.xmlsoap.org/soap/envelope/';
declare namespace ns1='http://10.200.0.124/ArticleQueryApi/rest/query/aggregate';
//ns1:entity_type</path><content>HASHTAG</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="jdbc" name="SummaryTopHashtagsVertica"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>com.vertica.Driver</con:driver><con:connectionString>jdbc:vertica://10.200.0.190:5433/artsa01?user=artsa01&amp;password=artsa2</con:connectionString><con:query>SELECT en.value,COUNT(DISTINCT ta.article_id) content_volume
FROM (
	SELECT pipeline_topic_id, article_id, publish_at, publish_at_week
	FROM topic_article ta
	WHERE pipeline_topic_id IN (${#Global#topicid})
	AND ta.publish_at BETWEEN '${#Global#querysqlstart}' AND '${#Global#querysqlend}'
	 ) ta
INNER JOIN multi_level_annotation en on en.article_id=ta.article_id
AND en.type='entity'
WHERE  ta.pipeline_topic_id IN (${#Global#topicid})
AND en.account IN (0,${#Global#accountid})
AND en.level1 = 'HASHTAG'
GROUP BY en.value
ORDER BY COUNT(DISTINCT ta.article_id) DESC, en.value ASC  limit 25</con:query><con:properties/></con:config></con:testStep><con:testStep type="groovy" name="compareResultsTopHashtags"><con:settings/><con:config><script><![CDATA[// create groovyUtils and XmlHolder for response of Request
def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
def alert = com.eviware.soapui.support.UISupport;
def response1 = context.expand( 'SummaryTopHashtagsVertica#ResponseAsXml' )
def response2 = context.expand( '${Summary05TopHashtags#ResponseAsXml}' )
def holder1 = groovyUtils.getXmlHolder(response1)
def holder2 = groovyUtils.getXmlHolder(response2)

log.info "*************************************************************"
log.info "   Begin test for : " + context.getCurrentStep().getLabel()
log.info "*************************************************************"

// loop item nodes in Vertica response message
def jdbcMap = [:];
def jdbcEntityTypeArr = holder1.getNodeValues( '//MULTI_LEVEL_ANNOTATION.VALUE' )
def jdbcEntityVolumeArr = holder1.getNodeValues( '//CONTENT_VOLUME' )
for( int z=0; z<jdbcEntityTypeArr.length; z++) {  
	jdbcMap.put(jdbcEntityTypeArr[z],jdbcEntityVolumeArr[z]);
}
//log.info jdbcMap

// loop item nodes in REST response message
def restMap = [:];
holder2.namespaces['ns'] = 'http://10.200.0.124/ArticleQueryApi/rest/query/aggregate'
def restEntityTypeArr = holder2.getNodeValues( '//ns:results/ns:e/ns:entity_value'  )
def restEntityVolumeArr = holder2.getNodeValues( '//ns:results/ns:e/ns:content_volume'  )
for( int z=0; z<restEntityTypeArr.length; z++) {  
	restMap.put(restEntityTypeArr[z],restEntityVolumeArr[z]);
}
//log.info restMap

class CompRes {
	def jdbcKey;
	def jdbcValue;
	def restValue;
  CompRes(jdbcKey1, jdbcValue1, restValue1) {
  	jdbcKey = jdbcKey1;
  	jdbcValue = jdbcValue1;
  	restValue = restValue1;
  }
  def fail() {
  	if(jdbcValue == null || restValue == null) {
  		return -1;
  	}
  	def f;
//  	if ((jdbcValue.toInteger() < 100 || restValue.toInteger() < 100) && (jdbcValue.toInteger()-restValue.toInteger() > 2 || restValue.toInteger()-jdbcValue.toInteger() > 2))
//  	{
//  		return -1;
//  	}
//  	else {
//  		return 0;
//  	}
     if (jdbcValue.toInteger() < restValue.toInteger())
     {
        f = ((1 - (jdbcValue.toInteger()/restValue.toInteger())) * 100 )
        f = f.abs()
     }
     else
     {
        f = ((1 - (restValue.toInteger()/jdbcValue.toInteger())) * 100 )
        f = f.abs()
     }
	if(f > 2) {
		return new Double(f).round(2);
	}
	return 0;
  }
}

def comparisonResults = [];
for(j in jdbcMap) {
	def jdbcKey = j.key;
	def jdbcValue = j.value;
	def restValue = restMap.get(jdbcKey);
	if(restValue == null || restValue != jdbcValue) {
		def comparisonResult = new CompRes(jdbcKey, jdbcValue, restValue);
		comparisonResults.add(comparisonResult);
	}
}
for(r in restMap) {
	def restKey = r.key;
	def restValue = r.value;
	def jdbcValue = jdbcMap.get(restKey);
	if(jdbcValue == null) {
		def comparisonResult = new CompRes(restKey, null, restValue);
		comparisonResults.add(comparisonResult);
	}
}
def failCount = 0;
for(item in comparisonResults) {
	def fail = item.fail();
	if(fail == -1) {
		log.info((++failCount) + ": " + item.jdbcKey + "-" + item.jdbcValue + "-" + item.restValue);
	} else if(fail > 0) {
		log.info((++failCount) + ": " + item.jdbcKey + "-" + item.jdbcValue + "-" + item.restValue + " --- PERCENT: " + fail);
	} else {
//		log.info(item.jdbcKey + "-" + item.jdbcValue + "-" + item.restValue);
	}
}

if (failCount>0)
    {
       log.info 'Vertica Results    : ' + jdbcMap
       log.info 'Pavi_Test Results: ' + restMap
       log.info 'FAILED : ' + failCount + '  tests failed'
       log.info "*************************************************************"
       log.info "   End test for : " + context.getCurrentStep().getLabel()
       log.info "*************************************************************"
       testStatus = "1"
       com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "testStatus", testStatus )
       assert false : "Test Suite FAILED"
    }
    else
    {
    	  log.info 'PASSED : ' + failCount + '  tests failed'
    	  log.info "*************************************************************"
    	  log.info "   End test for : " + context.getCurrentStep().getLabel()
       log.info "*************************************************************"
       
       assert true: "Test Suite Passed"
    }

//// create groovyUtils and XmlHolder for response of Request
//def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
//def alert = com.eviware.soapui.support.UISupport;
//def response1 = context.expand( 'SummaryTopHashtagsVertica#ResponseAsXml' )
//def response2 = context.expand( '${Summary05TopHashtags#ResponseAsXml}' )
//def holder1 = groovyUtils.getXmlHolder(response1)
//def holder2 = groovyUtils.getXmlHolder(response2)
//
//def jdbcStringList = []
//def restStringList = []
//def x = 0 as int
//def y = 0 as int
//def fail = 0 as int
//
//// loop item nodes in response message
//for( jdbcResults in holder1.getNodeValues( '//MULTI_LEVEL_ANNOTATION.VALUE, //CONTENT_VOLUME' ))
//{  
//  //log.info 'Item : [$jdbcResults]'
//  jdbcStringList = jdbcStringList + jdbcResults
//}
//
//holder2.namespaces['ns'] = 'http://10.200.0.124/ArticleQueryApi/rest/query/aggregate'
//for( restResponse in holder2.getNodeValues( '//ns:results/ns:e/ns:entity_value, //ns:results/ns:e/ns:content_volume'  ))
//{
//  //log.info 'Item : [$restResponse]' 
//  restStringList = restStringList + restResponse
//    if (restResponse in jdbcStringList ) assert true
//    else {
//    	   //alert.showInfoMessage(jdbcStringList[x] + " counts do not match","soapUI Warning !")
//    	   //log.info 'Results from vertica do not match results from articleQueryApi '+ jdbcStringList[x] + " " + restResponse
//    	   log.info 'Entity : ' + jdbcStringList[x]
//        log.info 'Vertica: '+ jdbcStringList[y] + " HBase: " + restResponse
//        verticount = jdbcStringList[y] as Integer
//        hbasecount = restResponse as Integer
//        //log.info verticount
//        //log.info hbasecount
//       if (verticount < hbasecount)
//          {
//             f = ((1 - (verticount/hbasecount)) * 100 )
//             f = f.abs()
//             log.info 'Difference of: ' + new Double(f).round(2) + '%'
//             log.info 'Vertica count is less than HBase count'
//          }
//          else
//             {
//                f = ((1 - (hbasecount/verticount)) * 100 )
//                f = f.abs()
//                log.info 'Difference of: ' + new Double(f).round(2) + '%'
//                log.info 'HBase count is less than Vertica count'
//             }
//       if (f < 2 )
//          {
//             log.info 'PASS'
//          }
//          else
//             {
//                log.info 'FAILED: Percentage is > 2%'
//                fail = fail + 1
//             }
//
//    x = x + 1
//    
//    }
//    y = y + 1
//}
//log.info "Fail count = " + fail
//log.info "request  : >" + jdbcStringList
//log.info "result     : >" + restStringList
//if (fail>0)
//    {
//       assert false : "Percentage is greater than 2%"
//    }]]></script></con:config></con:testStep><con:testStep type="groovy" name="logsToFile" disabled="true"><con:settings/><con:config><script>//The below groovy script step is to capture the soapUI log area.
// "soapUI log" can be replaced with http log, jetty log, script log, error log etc based on the need.
def logArea = com.eviware.soapui.SoapUI.logMonitor.getLogArea( "script log" );
//Below two lines of groovy script is to get the project directory, we will be saving the soapUI log contents on a file in that directory.
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def start = context.expand('${#Global#filestart}')
def end = context.expand('${#Global#fileend}')
def projectPath = groovyUtils.projectPath
def status = context.expand('${#Global#testStatus}') as Integer
if (status > 0)
   {
   	def fail = context.expand('${#Global#fail}') as String
   	//log.info fail
   	def logFile = new File(projectPath + "\\" + fail + "_soapUI-Logs-to-file_" + start +"_to_" + end + ".txt")
   	def accountName = ("Account Name: " + context.expand('${#Global#itcAccountName}') + "\r\n") as String
     def accountId = ("Account ID  : " + context.expand('${#Global#itcAccountId}') + "\r\n") as String
     def userName = ("Username    : " + context.expand('${#Global#itcUsername}')  + "\r\n") as String
     def password = ("Password    : " + context.expand('${#Global#itcPassword}')  + "\r\n") as String
     def topicId =  ("Topic ID    : " + context.expand('${#Global#itctopicid}') + "\r\n") as String
     def sqlStart =  ("Start Time  : " + context.expand('${#Global#querysqlstart}') + "\r\n") as String
     def sqlEnd =  ("End Time    : " + context.expand('${#Global#querysqlend}') + "\r\n") as String

     logFile.write("soapUI Logs In a file.\r\n" + accountName + accountId + userName + password + topicId + sqlStart + sqlEnd)
        if( logArea !=null )
        {
           def model = logArea.model
           if( model.size > 0 )            
              for( c in 0..(model.size-1) )         
                logFile.append(model.getElementAt( c ).toString() + "\r\n")
        }
   }
   else
      {
   	   def pass = context.expand('${#Global#pass}') as String
   	   //log.info pass
   	   def logFile = new File(projectPath + "\\" + pass + "_soapUI-Logs-to-file_" + start +"_to_" + end + ".txt")
   	   def accountName = ("Account Name: " + context.expand('${#Global#itcAccountName}') + "\r\n") as String
        def accountId = ("Account ID  : " + context.expand('${#Global#itcAccountId}') + "\r\n") as String
        def userName = ("Username    : " + context.expand('${#Global#itcUsername}')  + "\r\n") as String
        def password = ("Password    : " + context.expand('${#Global#itcPassword}')  + "\r\n") as String
        def topicId =  ("Topic ID    : " + context.expand('${#Global#itctopicid}') + "\r\n") as String
        def sqlStart =  ("Start Time  : " + context.expand('${#Global#querysqlstart}') + "\r\n") as String
        def sqlEnd =  ("End Time    : " + context.expand('${#Global#querysqlend}') + "\r\n") as String

        logFile.write("soapUI Logs In a file.\r\n" + accountName + accountId + userName + password + topicId + sqlStart + sqlEnd)
           if( logArea !=null )
           {
              def model = logArea.model
              if( model.size > 0 )            
                 for( c in 0..(model.size-1) )         
                   logFile.append(model.getElementAt( c ).toString() + "\r\n")       
           }
      }

////This is the first line in the soapUI log file.
//def accountName = ("Account Name: " + context.expand('${#Global#itcAccountName}') + "\r\n") as String
//def accountId = ("Account ID  : " + context.expand('${#Global#itcAccountId}') + "\r\n") as String
//def userName = ("Username    : " + context.expand('${#Global#itcUsername}')  + "\r\n") as String
//def password = ("Password    : " + context.expand('${#Global#itcPassword}')  + "\r\n") as String
//def topicId =  ("Topic ID    : " + context.expand('${#Global#itctopicid}') + "\r\n") as String
//def sqlStart =  ("Start Time  : " + context.expand('${#Global#querysqlstart}') + "\r\n") as String
//def sqlEnd =  ("End Time    : " + context.expand('${#Global#querysqlend}') + "\r\n") as String
//
//logFile.write("soapUI Logs In a file.\r\n" + accountName + accountId + userName + password + topicId + sqlStart + sqlEnd)
//   if( logArea !=null )
//   {
//      def model = logArea.model
//      if( model.size > 0 )            
//         for( c in 0..(model.size-1) )         
//           logFile.append(model.getElementAt( c ).toString() + "\r\n")       
//      
//   }</script></con:config></con:testStep><con:properties/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="AggregateTopCategories" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="a16d730f-d79f-4128-91fb-13212feee152"><con:settings/><con:testStep type="groovy" name="settime" disabled="true"><con:settings/><con:config><script>Calendar sod = Calendar.instance
    sod.set(Calendar.AM_PM, 0)
    sod.set(Calendar.HOUR, 0)
    sod.set(Calendar.MINUTE, 0)
    sod.set(Calendar.SECOND, 0)
    sod.set(Calendar.MILLISECOND, 0)
start = sod.time 
sqlstart = start.format('MM-dd-yy HH:mm:ss')
//log.info "SQL Start Time:  " + sqlstart
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "querysqlstart", sqlstart )

Calendar eod = Calendar.instance
    eod.set(Calendar.AM_PM, 0)
    eod.set(Calendar.HOUR, 9)
    eod.set(Calendar.MINUTE, 59)
    eod.set(Calendar.SECOND, 59)
    eod.set(Calendar.MILLISECOND, 999)
end = eod.time 
sqlend = end.format('MM-dd-yy HH:mm:ss')
//log.info "SQL End Time:  " + sqlend
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "querysqlend", sqlend )

offset = sod.get(Calendar.ZONE_OFFSET) + sod.get(Calendar.DST_OFFSET) / (60 * 1000)

starttime = start.time
epochstart = starttime + offset
//log.info "Epoch Start Time:  " + epochstart
def epochstart = epochstart as String
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "queryepochstart", epochstart )
def timestampstart = epochstart as Long
Date tss = new Date(timestampstart)
//log.info "Time to select in local timezone:  "+ tss

endtime = end.time
epochend = endtime + offset
//log.info "Epoch End Time:  " + epochend
def epochend = epochend as String
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "queryepochend", epochend )
def timestampend = epochend as Long
Date tse = new Date(timestampend)
//log.info "Time to select in local timezone:  "+ tse

now = Calendar.instance
today = now.time
millis = today.time
//log.info "Current time in milli-seconds:  " + millis
def today = new Date (millis)
//log.info "Current Local Time:  "+ today
tf = today.format('MM dd yy HH mm ss')
//log.info "Current Local Time nicely formatted:  "+ tf
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "time", tf )</script></con:config></con:testStep><con:testStep type="restrequest" name="authuser"><con:settings/><con:config service="ARTSA - UserManager" resourcePath="/SaasCoreUserManager/rest/auth" methodName="POST - authenticate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="authuser" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="authkey" value="1189377229352574419-2213262129298445271-4936701685398756970-61" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://10.200.0.124:8080</con:endpoint><con:request>{
  "username":${#Global#userUsername},
  "password":${#Global#useroriginalpassword},
  "accountName":${#Global#userAccountName}
}</con:request><con:assertion type="XPath Match" name="XPath Match"><con:configuration><path>declare namespace soap='http://schemas.xmlsoap.org/soap/envelope/';
declare namespace ns1='http://10.200.0.124/SaasCoreUserManager/rest/auth';
//ns1:loginFailed</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="authResponse"><con:settings/><con:config><script>import groovy.json.JsonSlurper
import com.eviware.soapui.impl.wsdl.teststeps.*

responseContent = testRunner.testCase.getTestStepByName("authuser").getPropertyValue("response")
slurperresponse = new JsonSlurper().parseText(responseContent)

accountid = (slurperresponse.account)
def accountid = accountid as String
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "accountid", accountid )

accountname = (slurperresponse.accountName)
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "accountName", accountname )

authkey = (slurperresponse.authkey)
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "authkey", authkey )

userid = (slurperresponse.id)
def userid = userid as String
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "userid", userid )

username = (slurperresponse.username)
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "userName", username )

//log.info accountid
//log.info accountname
//log.info authkey
//log.info userid
//log.info username</script></con:config></con:testStep><con:testStep type="groovy" name="setutokenheader"><con:settings/><con:config><script>import com.eviware.soapui.impl.wsdl.teststeps.*
import com.eviware.soapui.support.types.StringToStringMap;

def authkey = com.eviware.soapui.SoapUI.globalProperties.getPropertyValue( "authkey")
def tc = testRunner.testCase.testSuite.getTestCaseByName("AggregateTopCategories")
def ts71 = tc.getTestStepByName("Summary071TopCategoriesLevel1")
def ts72 = tc.getTestStepByName("Summary072TopCategoriesLevel2")
def ts73 = tc.getTestStepByName("Summary073TopCategoriesLevel3")
def ts74 = tc.getTestStepByName("Summary074TopCategoriesLevel4")
def ts75 = tc.getTestStepByName("Summary075TopCategoriesLevel5")


def headers = new StringToStringMap()
headers.putIfMissing("utoken",authkey)
ts71.getHttpRequest().setRequestHeaders(headers)
ts72.getHttpRequest().setRequestHeaders(headers)
ts73.getHttpRequest().setRequestHeaders(headers)
ts74.getHttpRequest().setRequestHeaders(headers)
ts75.getHttpRequest().setRequestHeaders(headers)
</script></con:config></con:testStep><con:testStep type="groovy" name="initialize_jdbc_driver"><con:settings/><con:config><script>com.eviware.soapui.support.GroovyUtils.registerJdbcDriver("vertica.jdbc.driver.vertica")</script></con:config></con:testStep><con:testStep type="restrequest" name="Summary071TopCategoriesLevel1"><con:settings/><con:config service="ARTSA  - Article Query" resourcePath="/ArticleQueryApi/rest/query/aggregate" methodName="POST - getAggregateData" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Summary071TopCategoriesLevel1" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="utoken" value="6234526304429797235-1078504194223242197--689843273793539188-1001" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://10.200.0.124:8080</con:endpoint><con:request>{
  "topicIDs":[${#Global#topicid}],
  "limit":"10",
  "selectedFields":[
	    {"field":"content_volume()", "sortDirection":"DESCENDING"},
	    {"field":"category_type"},
   	    {"field":"category_level1"}
        //{"field":"combined_topics"}
  ],
  "filters":[
	  //{"field":"category_level1","comparison":"EQ","values":["Emotions_Category_Set","Dynamic Routing Category Set","Consumer_Electronics_Master_Category_Set","Telco_Product_Promotion","Political_Category_Set"]}
  ],
  "dateRange":{"startDate":${#Global#queryepochstart},"endDate":${#Global#queryepochend}}
}</con:request><con:assertion type="XPath Match" name="assert_category_type"><con:configuration><path>declare namespace soap='http://schemas.xmlsoap.org/soap/envelope/';
declare namespace ns1='http://10.200.0.124/ArticleQueryApi/rest/query/aggregate';
//ns1:category_type</path><content>category</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="assert_category_level1"><con:configuration><path>declare namespace soap='http://schemas.xmlsoap.org/soap/envelope/';
declare namespace ns1='http://10.200.0.124/ArticleQueryApi/rest/query/aggregate';
//ns1:category_level1</path><content>Emotions_Category*</content><allowWildcards>true</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="jdbc" name="SummaryTopCategoriesLevel1Vertica"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>com.vertica.Driver</con:driver><con:connectionString>jdbc:vertica://10.200.0.190:5433/artsa01?user=artsa01&amp;password=artsa2</con:connectionString><con:query>SELECT en.level1,COUNT(DISTINCT ta.article_id) content_volume
FROM (
	SELECT pipeline_topic_id, article_id, publish_at, publish_at_week
	FROM topic_article ta
	WHERE pipeline_topic_id IN (${#Global#topicid})
	AND ta.publish_at BETWEEN '${#Global#querysqlstart}' AND '${#Global#querysqlend}'
	 ) ta
INNER JOIN multi_level_annotation en on en.article_id=ta.article_id
AND en.type='category'
WHERE  ta.pipeline_topic_id IN (${#Global#topicid})
AND en.account IN (0,${#Global#accountid})
GROUP BY en.level1
ORDER BY COUNT(DISTINCT ta.article_id) DESC, en.level1 ASC  limit 10</con:query><con:properties/></con:config></con:testStep><con:testStep type="groovy" name="compareResultsTopCategoriesLevel1"><con:settings/><con:config><script><![CDATA[//// create groovyUtils and XmlHolder for response of Request
//def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
//def alert = com.eviware.soapui.support.UISupport;
//def response1 = context.expand( 'SummaryTopCategoriesLevel1Vertica#ResponseAsXml' )
//def response2 = context.expand( '${Summary071TopCategoriesLevel1#ResponseAsXml}' )
//def holder1 = groovyUtils.getXmlHolder(response1)
//def holder2 = groovyUtils.getXmlHolder(response2)
//
//log.info "*************************************************************"
//log.info "   Begin test for : " + context.getCurrentStep().getLabel()
//log.info "*************************************************************"
//
//// loop item nodes in Vertica response message
//def jdbcMap = [:];
//def jdbcEntityTypeArr = holder1.getNodeValues( 'MULTI_LEVEL_ANNOTATION.LEVEL1' )
//def jdbcEntityVolumeArr = holder1.getNodeValues( 'CONTENT_VOLUME' )
//for( int z=0; z<jdbcEntityTypeArr.length; z++) {  
//	jdbcMap.put(jdbcEntityTypeArr[z],jdbcEntityVolumeArr[z]);
//}
////log.info jdbcMap
//
//// loop item nodes in REST response message
//def restMap = [:];
//holder2.namespaces['ns'] = 'http://10.200.0.124/ArticleQueryApi/rest/query/aggregate'
//def restEntityTypeArr = holder2.getNodeValues( '//ns:results/ns:e/ns:category_level1'  )
//def restEntityVolumeArr = holder2.getNodeValues( '//ns:results/ns:e/ns:content_volume'  )
//for( int z=0; z<restEntityTypeArr.length; z++) {  
//	restMap.put(restEntityTypeArr[z],restEntityVolumeArr[z]);
//}
////log.info restMap
//
//class CompRes {
//	def jdbcKey;
//	def jdbcValue;
//	def restValue;
//  CompRes(jdbcKey1, jdbcValue1, restValue1) {
//  	jdbcKey = jdbcKey1;
//  	jdbcValue = jdbcValue1;
//  	restValue = restValue1;
//  }
//  def fail() {
//  	if(jdbcValue == null || restValue == null) {
//  		return -1;
//  	}
//  	def f;
//  	if ((jdbcValue.toInteger() < 100 || restValue.toInteger() < 100) && (jdbcValue.toInteger()-restValue.toInteger() > 2 || restValue.toInteger()-jdbcValue.toInteger() > 2))
//  	{
//  		return -1;
//  	}
//  	else {
//  		return 0;
//  	}
//     if (jdbcValue.toInteger() < restValue.toInteger())
//     {
//        f = ((1 - (jdbcValue.toInteger()/restValue.toInteger())) * 100 )
//        f = f.abs()
//     }
//     else
//     {
//        f = ((1 - (restValue.toInteger()/jdbcValue.toInteger())) * 100 )
//        f = f.abs()
//     }
//	if(f > 2) {
//		return new Double(f).round(2);
//	}
//	return 0;
//  }
//}
//
//def comparisonResults = [];
//for(j in jdbcMap) {
//	def jdbcKey = j.key;
//	def jdbcValue = j.value;
//	def restValue = restMap.get(jdbcKey);
//	if(restValue == null || restValue != jdbcValue) {
//		def comparisonResult = new CompRes(jdbcKey, jdbcValue, restValue);
//		comparisonResults.add(comparisonResult);
//	}
//}
//for(r in restMap) {
//	def restKey = r.key;
//	def restValue = r.value;
//	def jdbcValue = jdbcMap.get(restKey);
//	if(jdbcValue == null) {
//		def comparisonResult = new CompRes(restKey, null, restValue);
//		comparisonResults.add(comparisonResult);
//	}
//}
//def failCount = 0;
//for(item in comparisonResults) {
//	def fail = item.fail();
//	if(fail == -1) {
//		log.info((++failCount) + ": " + item.jdbcKey + "-" + item.jdbcValue + "-" + item.restValue);
//	} else if(fail > 0) {
//		log.info((++failCount) + ": " + item.jdbcKey + "-" + item.jdbcValue + "-" + item.restValue + " --- PERCENT: " + fail);
//	} else {
////		log.info(item.jdbcKey + "-" + item.jdbcValue + "-" + item.restValue);
//	}
//}
//
//if (failCount>0)
//    {
//       log.info 'Vertica Results    : ' + jdbcMap
//       log.info 'Pavi_Test Results: ' + restMap
//       log.info 'FAILED : ' + failCount + '  tests failed'
//       log.info "*************************************************************"
//       log.info "   End test for : " + context.getCurrentStep().getLabel()
//       log.info "*************************************************************"
//       testStatus = "1"
//       com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "testStatus", testStatus )
//       assert false : "Test Suite FAILED"
//    }
//    else
//    {
//    	  log.info 'PASSED : ' + failCount + '  tests failed'
//    	  log.info "*************************************************************"
//    	  log.info "   End test for : " + context.getCurrentStep().getLabel()
//       log.info "*************************************************************"
//       
//       assert true: "Test Suite Passed"
//    }

// create groovyUtils and XmlHolder for response of Request
def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
def alert = com.eviware.soapui.support.UISupport;
def response1 = context.expand( 'SummaryTopCategoriesLevel1Vertica#ResponseAsXml' )
def response2 = context.expand( '${Summary071TopCategoriesLevel1#ResponseAsXml}' )
def holder1 = groovyUtils.getXmlHolder(response1)
def holder2 = groovyUtils.getXmlHolder(response2)

def jdbcStringList = []
def restStringList = []
def x = 0 as int
def y = 0 as int
def fail = 0 as int

// loop item nodes in response message
for( jdbcResults in holder1.getNodeValues( '//MULTI_LEVEL_ANNOTATION.LEVEL1, //CONTENT_VOLUME' ))
{  
  //log.info 'Item : [$jdbcResults]'
  jdbcStringList = jdbcStringList + jdbcResults
}

holder2.namespaces['ns'] = 'http://10.200.0.124/ArticleQueryApi/rest/query/aggregate'
for( restResponse in holder2.getNodeValues( '//ns:results/ns:e/ns:category_level1, //ns:results/ns:e/ns:content_volume'  ))
{
  //log.info 'Item : [$restResponse]' 
  restStringList = restStringList + restResponse
    if (restResponse in jdbcStringList ) assert true
    else {
    	   //alert.showInfoMessage(jdbcStringList[x] + " counts do not match","soapUI Warning !")
    	   //log.info 'Results from vertica do not match results from articleQueryApi '+ jdbcStringList[x] + " " + restResponse
    	   log.info 'Entity : ' + jdbcStringList[x]
        log.info 'Vertica: '+ jdbcStringList[y] + " HBase: " + restResponse
        verticount = jdbcStringList[y] as Integer
        hbasecount = restResponse as Integer
        //log.info verticount
        //log.info hbasecount
       if (verticount < hbasecount)
          {
             f = ((1 - (verticount/hbasecount)) * 100 )
             f = f.abs()
             log.info 'Difference of: ' + new Double(f).round(2) + '%'
             log.info 'Vertica count is less than HBase count'
          }
          else
             {
                f = ((1 - (hbasecount/verticount)) * 100 )
                f = f.abs()
                log.info 'Difference of: ' + new Double(f).round(2) + '%'
                log.info 'HBase count is less than Vertica count'
             }
       if (f < 2 )
          {
             log.info 'PASS'
          }
          else
             {
                log.info 'FAILED: Percentage is > 2%'
                fail = fail + 1
             }

    x = x + 1
    
    }
    y = y + 1
}

log.info "request  : >" + jdbcStringList
log.info "result     : >" + restStringList
if (fail>0)
    {
       log.info 'Failed : ' + fail + '  tests failed'
       assert false : "Test Suite FAILED"
    }
    else
    {
    	  log.info 'Passed : ' + fail + '  tests failed'
    	  assert true: "Test Suite Passed"
    }]]></script></con:config></con:testStep><con:testStep type="restrequest" name="Summary072TopCategoriesLevel2"><con:settings/><con:config service="ARTSA  - Article Query" resourcePath="/ArticleQueryApi/rest/query/aggregate" methodName="POST - getAggregateData" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Summary072TopCategoriesLevel2" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="utoken" value="6234526304429797235-1078504194223242197--689843273793539188-1001" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://10.200.0.124:8080</con:endpoint><con:request>{
  "topicIDs":[${#Global#topicid}],
  "limit":"20",
  "selectedFields":[
	    {"field":"category_type"},
   	    {"field":"content_volume()", "sortDirection":"DESCENDING"},
	    {"field":"category_level1"},
	    {"field":"category_level2" , "sortDirection":"ASCENDING"},
        {"field":"combined_topics"}
  ],
  "filters":[
	  {"field":"category_level1","comparison":"EQ","values":["Dynamic Routing Category Set"]}
  ],
  "dateRange":{"startDate":${#Global#queryepochstart},"endDate":${#Global#queryepochend}}
}</con:request><con:assertion type="XPath Match" name="assert_category_level1"><con:configuration><path>declare namespace soap='http://schemas.xmlsoap.org/soap/envelope/';
declare namespace ns1='http://10.200.0.124/ArticleQueryApi/rest/query/aggregate';
//ns1:category_level1</path><content>Dynamic Routing*</content><allowWildcards>true</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="assert_catefory_level2"><con:configuration><path>declare namespace soap='http://schemas.xmlsoap.org/soap/envelope/';
declare namespace ns1='http://10.200.0.124/ArticleQueryApi/rest/query/aggregate';
//ns1:category_level2</path><content>*</content><allowWildcards>true</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Summary073TopCategoriesLevel3"><con:settings/><con:config service="ARTSA  - Article Query" resourcePath="/ArticleQueryApi/rest/query/aggregate" methodName="POST - getAggregateData" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Summary073TopCategoriesLevel3" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="utoken" value="6234526304429797235-1078504194223242197--689843273793539188-1001" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://10.200.0.124:8080</con:endpoint><con:request>{
  "topicIDs":[${#Global#topicid}],
  "limit":"20",
  "selectedFields":[
	    {"field":"category_type"},
   	    {"field":"content_volume()", "sortDirection":"DESCENDING"},
 	    {"field":"category_level1"},
	    {"field":"category_level2"},
	    {"field":"category_level3" , "sortDirection":"ASCENDING"},
        {"field":"combined_topics"}
  ],
  "filters":[
	  {"field":"category_level1","comparison":"EQ","values":["Dynamic Routing Category Set"]},
	  {"field":"category_level2","comparison":"EQ","values":["Sentiment"]}
  ],
  "dateRange":{"startDate":${#Global#queryepochstart},"endDate":${#Global#queryepochend}}
}</con:request><con:assertion type="XPath Match" name="assert_category_level1"><con:configuration><path>declare namespace soap='http://schemas.xmlsoap.org/soap/envelope/';
declare namespace ns1='http://10.200.0.124/ArticleQueryApi/rest/query/aggregate';
//ns1:category_level1</path><content>Dynamic Routing*</content><allowWildcards>true</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="assert_category_level2"><con:configuration><path>declare namespace soap='http://schemas.xmlsoap.org/soap/envelope/';
declare namespace ns1='http://10.200.0.124/ArticleQueryApi/rest/query/aggregate';
//ns1:category_level2</path><content>Sentiment</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="XPath Match"><con:configuration><path>declare namespace soap='http://schemas.xmlsoap.org/soap/envelope/';
declare namespace ns1='http://10.200.0.124/ArticleQueryApi/rest/query/aggregate';
//ns1:category_level3</path><content>*</content><allowWildcards>true</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Summary074TopCategoriesLevel4"><con:settings/><con:config service="ARTSA  - Article Query" resourcePath="/ArticleQueryApi/rest/query/aggregate" methodName="POST - getAggregateData" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Summary074TopCategoriesLevel4" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="utoken" value="6234526304429797235-1078504194223242197--689843273793539188-1001" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://10.200.0.124:8080</con:endpoint><con:request>{
  "topicIDs":[${#Global#topicid}],
"limit":"20",
  "selectedFields":[
        {"field":"category_type"},
   	    {"field":"content_volume()", "sortDirection":"DESCENDING"},
        {"field":"category_level1"},
        {"field":"category_level2"},
        {"field":"category_level3"},
        {"field":"category_level4" , "sortDirection":"ASCENDING"},
        {"field":"combined_topics"}
  ],
  "filters":[
      {"field":"category_level1","comparison":"EQ","values":["Dynamic Routing Category Set"]},
      {"field":"category_level3","comparison":"EQ","values":["Negative"]}
  ],
  "dateRange":{"startDate":${#Global#queryepochstart},"endDate":${#Global#queryepochend}}
}</con:request><con:assertion type="XPath Match" name="assert_category_level1"><con:configuration><path>declare namespace soap='http://schemas.xmlsoap.org/soap/envelope/';
declare namespace ns1='http://10.200.0.124/ArticleQueryApi/rest/query/aggregate';
//ns1:category_level1</path><content>Dynamic Routing*</content><allowWildcards>true</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="assert_category_level2"><con:configuration><path>declare namespace soap='http://schemas.xmlsoap.org/soap/envelope/';
declare namespace ns1='http://10.200.0.124/ArticleQueryApi/rest/query/aggregate';
//ns1:category_level2</path><content>Sentiment</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="assert_category_level3"><con:configuration><path>declare namespace soap='http://schemas.xmlsoap.org/soap/envelope/';
declare namespace ns1='http://10.200.0.124/ArticleQueryApi/rest/query/aggregate';
//ns1:category_level3</path><content>Negative</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="XPath Match"><con:configuration><path>declare namespace soap='http://schemas.xmlsoap.org/soap/envelope/';
declare namespace ns1='http://10.200.0.124/ArticleQueryApi/rest/query/aggregate';
//ns1:category_level4</path><content>*</content><allowWildcards>true</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Summary075TopCategoriesLevel5"><con:settings/><con:config service="ARTSA  - Article Query" resourcePath="/ArticleQueryApi/rest/query/aggregate" methodName="POST - getAggregateData" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Summary075TopCategoriesLevel5" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="utoken" value="6234526304429797235-1078504194223242197--689843273793539188-1001" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://10.200.0.124:8080</con:endpoint><con:request>{
  "topicIDs":[${#Global#topicid}],
  "limit":"20",
  "selectedFields":[
        {"field":"category_type"},
   	    {"field":"content_volume()", "sortDirection":"DESCENDING"},
        {"field":"category_level1"},
        {"field":"category_level2"},
        {"field":"category_level3"},
   	    {"field":"category_level4"},
   	    {"field":"category_level5" , "sortDirection":"ASCENDING"},
        {"field":"combined_topics"}
  ],
  "filters":[
      {"field":"category_level1","comparison":"EQ","values":["Dynamic Routing Category Set"]},
   	  {"field":"category_level4","comparison":"EQ","values":["Complaints"]}
  ],
  "dateRange":{"startDate":${#Global#queryepochstart},"endDate":${#Global#queryepochend}}
}</con:request><con:assertion type="XPath Match" name="assert_category_level1"><con:configuration><path>declare namespace soap='http://schemas.xmlsoap.org/soap/envelope/';
declare namespace ns1='http://10.200.0.124/ArticleQueryApi/rest/query/aggregate';
//ns1:category_level1</path><content>Dynamic Routing*</content><allowWildcards>true</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="assert_category_level2"><con:configuration><path>declare namespace soap='http://schemas.xmlsoap.org/soap/envelope/';
declare namespace ns1='http://10.200.0.124/ArticleQueryApi/rest/query/aggregate';
//ns1:category_level2</path><content>Sentiment</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="assert_category_level3"><con:configuration><path>declare namespace soap='http://schemas.xmlsoap.org/soap/envelope/';
declare namespace ns1='http://10.200.0.124/ArticleQueryApi/rest/query/aggregate';
//ns1:category_level3</path><content>Negative</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="assert_category_level4"><con:configuration><path>declare namespace soap='http://schemas.xmlsoap.org/soap/envelope/';
declare namespace ns1='http://10.200.0.124/ArticleQueryApi/rest/query/aggregate';
//ns1:category_level4</path><content>Complaints</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="assert_category_level5"><con:configuration><path>declare namespace soap='http://schemas.xmlsoap.org/soap/envelope/';
declare namespace ns1='http://10.200.0.124/ArticleQueryApi/rest/query/aggregate';
//ns1:category_level5</path><content>*</content><allowWildcards>true</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="logsToFile" disabled="true"><con:settings/><con:config><script>//The below groovy script step is to capture the soapUI log area.
// "soapUI log" can be replaced with http log, jetty log, script log, error log etc based on the need.
def logArea = com.eviware.soapui.SoapUI.logMonitor.getLogArea( "script log" );
//Below two lines of groovy script is to get the project directory, we will be saving the soapUI log contents on a file in that directory.
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def start = context.expand('${#Global#filestart}')
def end = context.expand('${#Global#fileend}')
def projectPath = groovyUtils.projectPath
def status = context.expand('${#Global#testStatus}') as Integer
if (status > 0)
   {
   	def fail = context.expand('${#Global#fail}') as String
   	//log.info fail
   	def logFile = new File(projectPath + "\\" + fail + "_soapUI-Logs-to-file_" + start +"_to_" + end + ".txt")
   	def accountName = ("Account Name: " + context.expand('${#Global#itcAccountName}') + "\r\n") as String
     def accountId = ("Account ID  : " + context.expand('${#Global#itcAccountId}') + "\r\n") as String
     def userName = ("Username    : " + context.expand('${#Global#itcUsername}')  + "\r\n") as String
     def password = ("Password    : " + context.expand('${#Global#itcPassword}')  + "\r\n") as String
     def topicId =  ("Topic ID    : " + context.expand('${#Global#itctopicid}') + "\r\n") as String
     def sqlStart =  ("Start Time  : " + context.expand('${#Global#querysqlstart}') + "\r\n") as String
     def sqlEnd =  ("End Time    : " + context.expand('${#Global#querysqlend}') + "\r\n") as String

     logFile.write("soapUI Logs In a file.\r\n" + accountName + accountId + userName + password + topicId + sqlStart + sqlEnd)
        if( logArea !=null )
        {
           def model = logArea.model
           if( model.size > 0 )            
              for( c in 0..(model.size-1) )         
                logFile.append(model.getElementAt( c ).toString() + "\r\n")
        }
   }
   else
      {
   	   def pass = context.expand('${#Global#pass}') as String
   	   //log.info pass
   	   def logFile = new File(projectPath + "\\" + pass + "_soapUI-Logs-to-file_" + start +"_to_" + end + ".txt")
   	   def accountName = ("Account Name: " + context.expand('${#Global#itcAccountName}') + "\r\n") as String
        def accountId = ("Account ID  : " + context.expand('${#Global#itcAccountId}') + "\r\n") as String
        def userName = ("Username    : " + context.expand('${#Global#itcUsername}')  + "\r\n") as String
        def password = ("Password    : " + context.expand('${#Global#itcPassword}')  + "\r\n") as String
        def topicId =  ("Topic ID    : " + context.expand('${#Global#itctopicid}') + "\r\n") as String
        def sqlStart =  ("Start Time  : " + context.expand('${#Global#querysqlstart}') + "\r\n") as String
        def sqlEnd =  ("End Time    : " + context.expand('${#Global#querysqlend}') + "\r\n") as String

        logFile.write("soapUI Logs In a file.\r\n" + accountName + accountId + userName + password + topicId + sqlStart + sqlEnd)
           if( logArea !=null )
           {
              def model = logArea.model
              if( model.size > 0 )            
                 for( c in 0..(model.size-1) )         
                   logFile.append(model.getElementAt( c ).toString() + "\r\n")       
           }
      }

////This is the first line in the soapUI log file.
//def accountName = ("Account Name: " + context.expand('${#Global#itcAccountName}') + "\r\n") as String
//def accountId = ("Account ID  : " + context.expand('${#Global#itcAccountId}') + "\r\n") as String
//def userName = ("Username    : " + context.expand('${#Global#itcUsername}')  + "\r\n") as String
//def password = ("Password    : " + context.expand('${#Global#itcPassword}')  + "\r\n") as String
//def topicId =  ("Topic ID    : " + context.expand('${#Global#itctopicid}') + "\r\n") as String
//def sqlStart =  ("Start Time  : " + context.expand('${#Global#querysqlstart}') + "\r\n") as String
//def sqlEnd =  ("End Time    : " + context.expand('${#Global#querysqlend}') + "\r\n") as String
//
//logFile.write("soapUI Logs In a file.\r\n" + accountName + accountId + userName + password + topicId + sqlStart + sqlEnd)
//   if( logArea !=null )
//   {
//      def model = logArea.model
//      if( model.size > 0 )            
//         for( c in 0..(model.size-1) )         
//           logFile.append(model.getElementAt( c ).toString() + "\r\n")       
//      
//   }</script></con:config></con:testStep><con:properties/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="AggregateSentimentByEntityNegative" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="b60f6641-3ad1-4115-9e95-a8d749cf55bf"><con:settings/><con:testStep type="groovy" name="settime" disabled="true"><con:settings/><con:config><script>Calendar sod = Calendar.instance
    sod.set(Calendar.AM_PM, 0)
    sod.set(Calendar.HOUR, 0)
    sod.set(Calendar.MINUTE, 0)
    sod.set(Calendar.SECOND, 0)
    sod.set(Calendar.MILLISECOND, 0)
start = sod.time 
sqlstart = start.format('MM-dd-yy HH:mm:ss')
//log.info "SQL Start Time:  " + sqlstart
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "querysqlstart", sqlstart )

Calendar eod = Calendar.instance
    eod.set(Calendar.AM_PM, 0)
    eod.set(Calendar.HOUR, 9)
    eod.set(Calendar.MINUTE, 59)
    eod.set(Calendar.SECOND, 59)
    eod.set(Calendar.MILLISECOND, 999)
end = eod.time 
sqlend = end.format('MM-dd-yy HH:mm:ss')
//log.info "SQL End Time:  " + sqlend
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "querysqlend", sqlend )

offset = sod.get(Calendar.ZONE_OFFSET) + sod.get(Calendar.DST_OFFSET) / (60 * 1000)

starttime = start.time
epochstart = starttime + offset
//log.info "Epoch Start Time:  " + epochstart
def epochstart = epochstart as String
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "queryepochstart", epochstart )
def timestampstart = epochstart as Long
Date tss = new Date(timestampstart)
//log.info "Time to select in local timezone:  "+ tss

endtime = end.time
epochend = endtime + offset
//log.info "Epoch End Time:  " + epochend
def epochend = epochend as String
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "queryepochend", epochend )
def timestampend = epochend as Long
Date tse = new Date(timestampend)
//log.info "Time to select in local timezone:  "+ tse

now = Calendar.instance
today = now.time
millis = today.time
//log.info "Current time in milli-seconds:  " + millis
def today = new Date (millis)
//log.info "Current Local Time:  "+ today
tf = today.format('MM dd yy HH mm ss')
//log.info "Current Local Time nicely formatted:  "+ tf
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "time", tf )</script></con:config></con:testStep><con:testStep type="restrequest" name="authuser"><con:settings/><con:config service="ARTSA - UserManager" resourcePath="/SaasCoreUserManager/rest/auth" methodName="POST - authenticate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="authuser" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="authkey" value="1189377229352574419-2213262129298445271-4936701685398756970-61" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://10.200.0.124:8080</con:endpoint><con:request>{
  "username":${#Global#userUsername},
  "password":${#Global#useroriginalpassword},
  "accountName":${#Global#userAccountName}
}</con:request><con:assertion type="XPath Match" name="XPath Match"><con:configuration><path>declare namespace soap='http://schemas.xmlsoap.org/soap/envelope/';
declare namespace ns1='http://10.200.0.124/SaasCoreUserManager/rest/auth';
//ns1:loginFailed</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="authResponse"><con:settings/><con:config><script>import groovy.json.JsonSlurper
import com.eviware.soapui.impl.wsdl.teststeps.*

responseContent = testRunner.testCase.getTestStepByName("authuser").getPropertyValue("response")
slurperresponse = new JsonSlurper().parseText(responseContent)

accountid = (slurperresponse.account)
def accountid = accountid as String
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "accountid", accountid )

accountname = (slurperresponse.accountName)
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "accountName", accountname )

authkey = (slurperresponse.authkey)
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "authkey", authkey )

userid = (slurperresponse.id)
def userid = userid as String
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "userid", userid )

username = (slurperresponse.username)
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "userName", username )

//log.info accountid
//log.info accountname
//log.info authkey
//log.info userid
//log.info username</script></con:config></con:testStep><con:testStep type="groovy" name="setutokenheader"><con:settings/><con:config><script>import com.eviware.soapui.impl.wsdl.teststeps.*
import com.eviware.soapui.support.types.StringToStringMap;

def authkey = com.eviware.soapui.SoapUI.globalProperties.getPropertyValue( "authkey")
def tc = testRunner.testCase.testSuite.getTestCaseByName("AggregateSentimentByEntityNegative")
def ts11 = tc.getTestStepByName("Summary081SentimentByEntityNegative")


def headers = new StringToStringMap()
headers.putIfMissing("utoken",authkey)

ts11.getHttpRequest().setRequestHeaders(headers)</script></con:config></con:testStep><con:testStep type="groovy" name="initialize_jdbc_driver"><con:settings/><con:config><script>com.eviware.soapui.support.GroovyUtils.registerJdbcDriver("vertica.jdbc.driver.vertica")</script></con:config></con:testStep><con:testStep type="restrequest" name="Summary08SentimentByEntity" disabled="true"><con:settings/><con:config service="ARTSA  - Article Query" resourcePath="/ArticleQueryApi/rest/query/aggregate" methodName="POST - getAggregateData" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Summary08SentimentByEntity" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="utoken" value="592423282898117332-6555896638205456861--1342692733501113202-12" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://10.200.0.124:8080</con:endpoint><con:request>{
  "topicIDs":[${#Global#topicid}],
  //"limit":25,
  'selectedFields':[
        //{'field':'entity_type'},
        {"field":"content_volume()","sortDirection":"DESCENDING"},
        {'field':'entity_sentiment'}
        //{"field":"combined_topics"}
  ],
  'filters':[
      {'field':'entity_type','comparison':'EQ','values':['','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','']}
  ],
  "dateRange":{"startDate":${#Global#queryepochstart},"endDate":${#Global#queryepochend}}
}</con:request><con:assertion type="XPath Match" name="assert_enttiy_type"><con:configuration><path>declare namespace soap='http://schemas.xmlsoap.org/soap/envelope/';
declare namespace ns1='http://10.200.0.124/ArticleQueryApi/rest/query/aggregate';
//ns1:entity_type</path><content>*</content><allowWildcards>true</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Summary081SentimentByEntityNegative"><con:settings/><con:config service="ARTSA  - Article Query" resourcePath="/ArticleQueryApi/rest/query/aggregate" methodName="POST - getAggregateData" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Summary081SentimentByEntityNegative" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="utoken" value="-3475674090753289173-3910205482103146488--7898379985373721897-1001" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://10.200.0.124:8080</con:endpoint><con:request>{
  "topicIDs":[${#Global#topicid}],
  "limit":10,
  'selectedFields':[
        {"field":"content_volume()","sortDirection":"DESCENDING"},
        {'field':'entity_type'},
        {'field':'entity_sentiment'}
        //{"field":"combined_topics"}
  ],
  'filters':[
    {'field':'entity_sentiment','comparison':'EQ','values':['NEGATIVE']}
    //{'field':'entity_type','comparison':'EQ','values':['','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','']}
  ],
  "dateRange":{"startDate":${#Global#queryepochstart},"endDate":${#Global#queryepochend}}
}</con:request><con:assertion type="XPath Match" name="assert_entity_type"><con:configuration><path>declare namespace soap='http://schemas.xmlsoap.org/soap/envelope/';
declare namespace ns1='http://10.200.0.124/ArticleQueryApi/rest/query/aggregate';
//ns1:entity_type</path><content>*</content><allowWildcards>true</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="assert_entity_sentiment"><con:configuration><path>declare namespace soap='http://schemas.xmlsoap.org/soap/envelope/';
declare namespace ns1='http://10.200.0.124/ArticleQueryApi/rest/query/aggregate';
//ns1:entity_sentiment</path><content>NEGATIVE</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="jdbc" name="SummarySentimentByEntityNegativeVertica"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>com.vertica.Driver</con:driver><con:connectionString>jdbc:vertica://10.200.0.190:5433/artsa01?user=artsa01&amp;password=artsa2</con:connectionString><con:query>SELECT en.level1,en.sentiment,COUNT(DISTINCT ta.article_id) content_volume
FROM (
	SELECT pipeline_topic_id, article_id, publish_at, publish_at_week
	FROM topic_article ta
	WHERE pipeline_topic_id IN (${#Global#topicid})
	AND ta.publish_at BETWEEN '${#Global#querysqlstart}' AND '${#Global#querysqlend}'
	 ) ta
INNER JOIN multi_level_annotation en on en.article_id=ta.article_id
AND en.type='entity' AND en.sentiment = 'NEGATIVE'
WHERE  ta.pipeline_topic_id IN (${#Global#topicid})
AND en.account IN (0,${#Global#accountid})
GROUP BY en.sentiment,en.level1
ORDER BY COUNT(DISTINCT ta.article_id) DESC, en.level1 ASC,en.sentiment ASC  limit 10</con:query><con:properties/></con:config></con:testStep><con:testStep type="groovy" name="compareResultsSentimentByEntityNegative"><con:settings/><con:config><script><![CDATA[// create groovyUtils and XmlHolder for response of Request
def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
def alert = com.eviware.soapui.support.UISupport;
def response1 = context.expand( 'SummarySentimentByEntityNegativeVertica#ResponseAsXml' )
def response2 = context.expand( '${Summary081SentimentByEntityNegative#ResponseAsXml}' )
def holder1 = groovyUtils.getXmlHolder(response1)
def holder2 = groovyUtils.getXmlHolder(response2)

log.info "*************************************************************"
log.info "   Begin test for : " + context.getCurrentStep().getLabel()
log.info "*************************************************************"

// loop item nodes in Vertica response message
def jdbcMap = [:];
def jdbcEntityTypeArr = holder1.getNodeValues( '//MULTI_LEVEL_ANNOTATION.LEVEL1' )
def jdbcEntityVolumeArr = holder1.getNodeValues( '//CONTENT_VOLUME' )
for( int z=0; z<jdbcEntityTypeArr.length; z++) {  
	jdbcMap.put(jdbcEntityTypeArr[z],jdbcEntityVolumeArr[z]);
}
//log.info jdbcMap

// loop item nodes in REST response message
def restMap = [:];
holder2.namespaces['ns'] = 'http://10.200.0.124/ArticleQueryApi/rest/query/aggregate'
def restEntityTypeArr = holder2.getNodeValues( '//ns:results/ns:e/ns:entity_type'  )
def restEntityVolumeArr = holder2.getNodeValues( '//ns:results/ns:e/ns:content_volume'  )
for( int z=0; z<restEntityTypeArr.length; z++) {  
	restMap.put(restEntityTypeArr[z],restEntityVolumeArr[z]);
}
//log.info restMap

class CompRes {
	def jdbcKey;
	def jdbcValue;
	def restValue;
  CompRes(jdbcKey1, jdbcValue1, restValue1) {
  	jdbcKey = jdbcKey1;
  	jdbcValue = jdbcValue1;
  	restValue = restValue1;
  }
  def fail() {
  	if(jdbcValue == null || restValue == null) {
  		return -1;
  	}
  	def f;
//  	if ((jdbcValue.toInteger() < 100 || restValue.toInteger() < 100) && (jdbcValue.toInteger()-restValue.toInteger() > 2 || restValue.toInteger()-jdbcValue.toInteger() > 2))
//  	{
//  		return -1;
//  	}
//  	else {
//  		return 0;
//  	}
     if (jdbcValue.toInteger() < restValue.toInteger())
     {
        f = ((1 - (jdbcValue.toInteger()/restValue.toInteger())) * 100 )
        f = f.abs()
     }
     else
     {
        f = ((1 - (restValue.toInteger()/jdbcValue.toInteger())) * 100 )
        f = f.abs()
     }
	if(f > 2) {
		return new Double(f).round(2);
	}
	return 0;
  }
}

def comparisonResults = [];
for(j in jdbcMap) {
	def jdbcKey = j.key;
	def jdbcValue = j.value;
	def restValue = restMap.get(jdbcKey);
	if(restValue == null || restValue != jdbcValue) {
		def comparisonResult = new CompRes(jdbcKey, jdbcValue, restValue);
		comparisonResults.add(comparisonResult);
	}
}
for(r in restMap) {
	def restKey = r.key;
	def restValue = r.value;
	def jdbcValue = jdbcMap.get(restKey);
	if(jdbcValue == null) {
		def comparisonResult = new CompRes(restKey, null, restValue);
		comparisonResults.add(comparisonResult);
	}
}
def failCount = 0;
for(item in comparisonResults) {
	def fail = item.fail();
	if(fail == -1) {
		log.info((++failCount) + ": " + item.jdbcKey + "-" + item.jdbcValue + "-" + item.restValue);
	} else if(fail > 0) {
		log.info((++failCount) + ": " + item.jdbcKey + "-" + item.jdbcValue + "-" + item.restValue + " --- PERCENT: " + fail);
	} else {
//		log.info(item.jdbcKey + "-" + item.jdbcValue + "-" + item.restValue);
	}
}

if (failCount>0)
    {
       log.info 'Vertica Results    : ' + jdbcMap
       log.info 'Pavi_Test Results: ' + restMap
       log.info 'FAILED : ' + failCount + '  tests failed'
       log.info "*************************************************************"
       log.info "   End test for : " + context.getCurrentStep().getLabel()
       log.info "*************************************************************"
       testStatus = "1"
       com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "testStatus", testStatus )
       assert false : "Test Suite FAILED"
    }
    else
    {
    	  log.info 'PASSED : ' + failCount + '  tests failed'
    	  log.info "*************************************************************"
    	  log.info "   End test for : " + context.getCurrentStep().getLabel()
       log.info "*************************************************************"
       
       assert true: "Test Suite Passed"
    }

//// create groovyUtils and XmlHolder for response of Request
//def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
//def alert = com.eviware.soapui.support.UISupport;
//def response1 = context.expand( 'SummarySentimentByEntityNegativeVertica#ResponseAsXml' )
//def response2 = context.expand( '${Summary081SentimentByEntityNegative#ResponseAsXml}' )
//def holder1 = groovyUtils.getXmlHolder(response1)
//def holder2 = groovyUtils.getXmlHolder(response2)
//
//def jdbcStringList = []
//def restStringList = []
//def x = 0 as int
//def y = 0 as int
//def fail = 0 as int
//
//// loop item nodes in response message
//for( jdbcResults in holder1.getNodeValues( '//MULTI_LEVEL_ANNOTATION.LEVEL1, //CONTENT_VOLUME' ))
//{  
//  //log.info 'Item : [$jdbcResults]'
//  jdbcStringList = jdbcStringList + jdbcResults
//}
//
//holder2.namespaces['ns'] = 'http://10.200.0.124/ArticleQueryApi/rest/query/aggregate'
//for( restResponse in holder2.getNodeValues( '//ns:results/ns:e/ns:entity_type, //ns:results/ns:e/ns:content_volume'  ))
//{
//  //log.info 'Item : [$restResponse]' 
//  restStringList = restStringList + restResponse
//    if (restResponse in jdbcStringList ) assert true
//    else {
//    	   //alert.showInfoMessage(jdbcStringList[x] + " counts do not match","soapUI Warning !")
//    	   //log.info 'Results from vertica do not match results from articleQueryApi '+ jdbcStringList[x] + " " + restResponse
//    	   log.info 'Entity : ' + jdbcStringList[x]
//        log.info 'Vertica: '+ jdbcStringList[y] + " HBase: " + restResponse
//        verticount = jdbcStringList[y] as Integer
//        hbasecount = restResponse as Integer
//        //log.info verticount
//        //log.info hbasecount
//       if (verticount < hbasecount)
//          {
//             f = ((1 - (verticount/hbasecount)) * 100 )
//             f = f.abs()
//             log.info 'Difference of: ' + new Double(f).round(2) + '%'
//             log.info 'Vertica count is less than HBase count'
//          }
//          else
//             {
//                f = ((1 - (hbasecount/verticount)) * 100 )
//                f = f.abs()
//                log.info 'Difference of: ' + new Double(f).round(2) + '%'
//                log.info 'HBase count is less than Vertica count'
//             }
//       if (f < 2 )
//          {
//             log.info 'PASS'
//          }
//          else
//             {
//                log.info 'FAILED: Percentage is > 2%'
//                fail = fail + 1
//             }
//
//    x = x + 1
//    
//    }
//    y = y + 1
//}
//log.info "Fail count = " + fail
//log.info "request  : >" + jdbcStringList
//log.info "result     : >" + restStringList
//if (fail>0)
//    {
//       assert false : "Percentage is greater than 2%"
//    }]]></script></con:config></con:testStep><con:testStep type="groovy" name="logsToFile" disabled="true"><con:settings/><con:config><script>//The below groovy script step is to capture the soapUI log area.
// "soapUI log" can be replaced with http log, jetty log, script log, error log etc based on the need.
def logArea = com.eviware.soapui.SoapUI.logMonitor.getLogArea( "script log" );
//Below two lines of groovy script is to get the project directory, we will be saving the soapUI log contents on a file in that directory.
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def start = context.expand('${#Global#filestart}')
def end = context.expand('${#Global#fileend}')
def projectPath = groovyUtils.projectPath
def status = context.expand('${#Global#testStatus}') as Integer
if (status > 0)
   {
   	def fail = context.expand('${#Global#fail}') as String
   	//log.info fail
   	def logFile = new File(projectPath + "\\" + fail + "_soapUI-Logs-to-file_" + start +"_to_" + end + ".txt")
   	def accountName = ("Account Name: " + context.expand('${#Global#itcAccountName}') + "\r\n") as String
     def accountId = ("Account ID  : " + context.expand('${#Global#itcAccountId}') + "\r\n") as String
     def userName = ("Username    : " + context.expand('${#Global#itcUsername}')  + "\r\n") as String
     def password = ("Password    : " + context.expand('${#Global#itcPassword}')  + "\r\n") as String
     def topicId =  ("Topic ID    : " + context.expand('${#Global#itctopicid}') + "\r\n") as String
     def sqlStart =  ("Start Time  : " + context.expand('${#Global#querysqlstart}') + "\r\n") as String
     def sqlEnd =  ("End Time    : " + context.expand('${#Global#querysqlend}') + "\r\n") as String

     logFile.write("soapUI Logs In a file.\r\n" + accountName + accountId + userName + password + topicId + sqlStart + sqlEnd)
        if( logArea !=null )
        {
           def model = logArea.model
           if( model.size > 0 )            
              for( c in 0..(model.size-1) )         
                logFile.append(model.getElementAt( c ).toString() + "\r\n")
        }
   }
   else
      {
   	   def pass = context.expand('${#Global#pass}') as String
   	   //log.info pass
   	   def logFile = new File(projectPath + "\\" + pass + "_soapUI-Logs-to-file_" + start +"_to_" + end + ".txt")
   	   def accountName = ("Account Name: " + context.expand('${#Global#itcAccountName}') + "\r\n") as String
        def accountId = ("Account ID  : " + context.expand('${#Global#itcAccountId}') + "\r\n") as String
        def userName = ("Username    : " + context.expand('${#Global#itcUsername}')  + "\r\n") as String
        def password = ("Password    : " + context.expand('${#Global#itcPassword}')  + "\r\n") as String
        def topicId =  ("Topic ID    : " + context.expand('${#Global#itctopicid}') + "\r\n") as String
        def sqlStart =  ("Start Time  : " + context.expand('${#Global#querysqlstart}') + "\r\n") as String
        def sqlEnd =  ("End Time    : " + context.expand('${#Global#querysqlend}') + "\r\n") as String

        logFile.write("soapUI Logs In a file.\r\n" + accountName + accountId + userName + password + topicId + sqlStart + sqlEnd)
           if( logArea !=null )
           {
              def model = logArea.model
              if( model.size > 0 )            
                 for( c in 0..(model.size-1) )         
                   logFile.append(model.getElementAt( c ).toString() + "\r\n")       
           }
      }

////This is the first line in the soapUI log file.
//def accountName = ("Account Name: " + context.expand('${#Global#itcAccountName}') + "\r\n") as String
//def accountId = ("Account ID  : " + context.expand('${#Global#itcAccountId}') + "\r\n") as String
//def userName = ("Username    : " + context.expand('${#Global#itcUsername}')  + "\r\n") as String
//def password = ("Password    : " + context.expand('${#Global#itcPassword}')  + "\r\n") as String
//def topicId =  ("Topic ID    : " + context.expand('${#Global#itctopicid}') + "\r\n") as String
//def sqlStart =  ("Start Time  : " + context.expand('${#Global#querysqlstart}') + "\r\n") as String
//def sqlEnd =  ("End Time    : " + context.expand('${#Global#querysqlend}') + "\r\n") as String
//
//logFile.write("soapUI Logs In a file.\r\n" + accountName + accountId + userName + password + topicId + sqlStart + sqlEnd)
//   if( logArea !=null )
//   {
//      def model = logArea.model
//      if( model.size > 0 )            
//         for( c in 0..(model.size-1) )         
//           logFile.append(model.getElementAt( c ).toString() + "\r\n")       
//      
//   }</script></con:config></con:testStep><con:properties/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="AggregateSentimentByEntityPositive" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="3ce58b9b-4741-47ae-92f3-f22f5c57d7aa"><con:settings/><con:testStep type="groovy" name="settime" disabled="true"><con:settings/><con:config><script>Calendar sod = Calendar.instance
    sod.set(Calendar.AM_PM, 0)
    sod.set(Calendar.HOUR, 0)
    sod.set(Calendar.MINUTE, 0)
    sod.set(Calendar.SECOND, 0)
    sod.set(Calendar.MILLISECOND, 0)
start = sod.time 
sqlstart = start.format('MM-dd-yy HH:mm:ss')
//log.info "SQL Start Time:  " + sqlstart
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "querysqlstart", sqlstart )

Calendar eod = Calendar.instance
    eod.set(Calendar.AM_PM, 0)
    eod.set(Calendar.HOUR, 9)
    eod.set(Calendar.MINUTE, 59)
    eod.set(Calendar.SECOND, 59)
    eod.set(Calendar.MILLISECOND, 999)
end = eod.time 
sqlend = end.format('MM-dd-yy HH:mm:ss')
//log.info "SQL End Time:  " + sqlend
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "querysqlend", sqlend )

offset = sod.get(Calendar.ZONE_OFFSET) + sod.get(Calendar.DST_OFFSET) / (60 * 1000)

starttime = start.time
epochstart = starttime + offset
//log.info "Epoch Start Time:  " + epochstart
def epochstart = epochstart as String
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "queryepochstart", epochstart )
def timestampstart = epochstart as Long
Date tss = new Date(timestampstart)
//log.info "Time to select in local timezone:  "+ tss

endtime = end.time
epochend = endtime + offset
//log.info "Epoch End Time:  " + epochend
def epochend = epochend as String
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "queryepochend", epochend )
def timestampend = epochend as Long
Date tse = new Date(timestampend)
//log.info "Time to select in local timezone:  "+ tse

now = Calendar.instance
today = now.time
millis = today.time
//log.info "Current time in milli-seconds:  " + millis
def today = new Date (millis)
//log.info "Current Local Time:  "+ today
tf = today.format('MM dd yy HH mm ss')
//log.info "Current Local Time nicely formatted:  "+ tf
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "time", tf )</script></con:config></con:testStep><con:testStep type="restrequest" name="authuser"><con:settings/><con:config service="ARTSA - UserManager" resourcePath="/SaasCoreUserManager/rest/auth" methodName="POST - authenticate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="authuser" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="authkey" value="1189377229352574419-2213262129298445271-4936701685398756970-61" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://10.200.0.124:8080</con:endpoint><con:request>{
  "username":${#Global#userUsername},
  "password":${#Global#useroriginalpassword},
  "accountName":${#Global#userAccountName}
}</con:request><con:assertion type="XPath Match" name="XPath Match"><con:configuration><path>declare namespace soap='http://schemas.xmlsoap.org/soap/envelope/';
declare namespace ns1='http://10.200.0.124/SaasCoreUserManager/rest/auth';
//ns1:loginFailed</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="authResponse"><con:settings/><con:config><script>import groovy.json.JsonSlurper
import com.eviware.soapui.impl.wsdl.teststeps.*

responseContent = testRunner.testCase.getTestStepByName("authuser").getPropertyValue("response")
slurperresponse = new JsonSlurper().parseText(responseContent)

accountid = (slurperresponse.account)
def accountid = accountid as String
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "accountid", accountid )

accountname = (slurperresponse.accountName)
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "accountName", accountname )

authkey = (slurperresponse.authkey)
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "authkey", authkey )

userid = (slurperresponse.id)
def userid = userid as String
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "userid", userid )

username = (slurperresponse.username)
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "userName", username )

//log.info accountid
//log.info accountname
//log.info authkey
//log.info userid
//log.info username</script></con:config></con:testStep><con:testStep type="groovy" name="setutokenheader"><con:settings/><con:config><script>import com.eviware.soapui.impl.wsdl.teststeps.*
import com.eviware.soapui.support.types.StringToStringMap;

def authkey = com.eviware.soapui.SoapUI.globalProperties.getPropertyValue( "authkey")
def tc = testRunner.testCase.testSuite.getTestCaseByName("AggregateSentimentByEntityPositive")
def ts11 = tc.getTestStepByName("Summary082SentimentByEntityPositive")


def headers = new StringToStringMap()
headers.putIfMissing("utoken",authkey)

ts11.getHttpRequest().setRequestHeaders(headers)</script></con:config></con:testStep><con:testStep type="groovy" name="initialize_jdbc_driver"><con:settings/><con:config><script>com.eviware.soapui.support.GroovyUtils.registerJdbcDriver("vertica.jdbc.driver.vertica")</script></con:config></con:testStep><con:testStep type="restrequest" name="Summary082SentimentByEntityPositive"><con:settings/><con:config service="ARTSA  - Article Query" resourcePath="/ArticleQueryApi/rest/query/aggregate" methodName="POST - getAggregateData" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Summary082SentimentByEntityPositive" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="utoken" value="-6997807818984760003--1177993216295692842--5030062683274935283-1001" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://10.200.0.124:8080</con:endpoint><con:request>{
  "topicIDs":[${#Global#topicid}],
  "limit":10,
  'selectedFields':[{"field":"content_volume()","sortDirection":"DESCENDING"},
        {'field':'entity_type'},
        {'field':'entity_sentiment'}
        //{"field":"combined_topics"}
  ],
  'filters':[
    {'field':'entity_sentiment','comparison':'EQ','values':['POSITIVE']}
    //{'field':'entity_type','comparison':'EQ','values':['','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','']}
  ],
  "dateRange":{"startDate":${#Global#queryepochstart},"endDate":${#Global#queryepochend}}
}</con:request><con:assertion type="XPath Match" name="assert_entity_type"><con:configuration><path>declare namespace soap='http://schemas.xmlsoap.org/soap/envelope/';
declare namespace ns1='http://10.200.0.124/ArticleQueryApi/rest/query/aggregate';
//ns1:entity_type</path><content>*</content><allowWildcards>true</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="assert_entity_sentiment"><con:configuration><path>declare namespace soap='http://schemas.xmlsoap.org/soap/envelope/';
declare namespace ns1='http://10.200.0.124/ArticleQueryApi/rest/query/aggregate';
//ns1:entity_sentiment</path><content>POSITIVE</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="jdbc" name="SummarySentimentByEntityPositiveVertica"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>com.vertica.Driver</con:driver><con:connectionString>jdbc:vertica://10.200.0.190:5433/artsa01?user=artsa01&amp;password=artsa2</con:connectionString><con:query>SELECT en.level1,en.sentiment,COUNT(DISTINCT ta.article_id) content_volume
FROM (
	SELECT pipeline_topic_id, article_id, publish_at, publish_at_week
	FROM topic_article ta
	WHERE pipeline_topic_id IN (${#Global#topicid})
	AND ta.publish_at BETWEEN '${#Global#querysqlstart}' AND '${#Global#querysqlend}'
	 ) ta
INNER JOIN multi_level_annotation en on en.article_id=ta.article_id
AND en.type='entity' AND en.sentiment = 'POSITIVE'
WHERE  ta.pipeline_topic_id IN (${#Global#topicid})
AND en.account IN (0,${#Global#accountid})
GROUP BY en.sentiment,en.level1
ORDER BY COUNT(DISTINCT ta.article_id) DESC, en.level1 ASC,en.sentiment ASC  limit 10</con:query><con:properties/></con:config></con:testStep><con:testStep type="groovy" name="compareResultsSentimentByEntityPositive"><con:settings/><con:config><script><![CDATA[// create groovyUtils and XmlHolder for response of Request
def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
def alert = com.eviware.soapui.support.UISupport;
def response1 = context.expand( 'SummarySentimentByEntityPositiveVertica#ResponseAsXml' )
def response2 = context.expand( '${Summary082SentimentByEntityPositive#ResponseAsXml}' )
def holder1 = groovyUtils.getXmlHolder(response1)
def holder2 = groovyUtils.getXmlHolder(response2)

log.info "*************************************************************"
log.info "   Begin test for : " + context.getCurrentStep().getLabel()
log.info "*************************************************************"

// loop item nodes in Vertica response message
def jdbcMap = [:];
def jdbcEntityTypeArr = holder1.getNodeValues( '//MULTI_LEVEL_ANNOTATION.LEVEL1' )
def jdbcEntityVolumeArr = holder1.getNodeValues( '//CONTENT_VOLUME' )
for( int z=0; z<jdbcEntityTypeArr.length; z++) {  
	jdbcMap.put(jdbcEntityTypeArr[z],jdbcEntityVolumeArr[z]);
}
//log.info jdbcMap

// loop item nodes in REST response message
def restMap = [:];
holder2.namespaces['ns'] = 'http://10.200.0.124/ArticleQueryApi/rest/query/aggregate'
def restEntityTypeArr = holder2.getNodeValues( '//ns:results/ns:e/ns:entity_type'  )
def restEntityVolumeArr = holder2.getNodeValues( '//ns:results/ns:e/ns:content_volume'  )
for( int z=0; z<restEntityTypeArr.length; z++) {  
	restMap.put(restEntityTypeArr[z],restEntityVolumeArr[z]);
}
//log.info restMap

class CompRes {
	def jdbcKey;
	def jdbcValue;
	def restValue;
  CompRes(jdbcKey1, jdbcValue1, restValue1) {
  	jdbcKey = jdbcKey1;
  	jdbcValue = jdbcValue1;
  	restValue = restValue1;
  }
  def fail() {
  	if(jdbcValue == null || restValue == null) {
  		return -1;
  	}
  	def f;
//  	if ((jdbcValue.toInteger() < 100 || restValue.toInteger() < 100) && (jdbcValue.toInteger()-restValue.toInteger() > 2 || restValue.toInteger()-jdbcValue.toInteger() > 2))
//  	{
//  		return -1;
//  	}
//  	else {
//  		return 0;
//  	}
     if (jdbcValue.toInteger() < restValue.toInteger())
     {
        f = ((1 - (jdbcValue.toInteger()/restValue.toInteger())) * 100 )
        f = f.abs()
     }
     else
     {
        f = ((1 - (restValue.toInteger()/jdbcValue.toInteger())) * 100 )
        f = f.abs()
     }
	if(f > 2) {
		return new Double(f).round(2);
	}
	return 0;
  }
}

def comparisonResults = [];
for(j in jdbcMap) {
	def jdbcKey = j.key;
	def jdbcValue = j.value;
	def restValue = restMap.get(jdbcKey);
	if(restValue == null || restValue != jdbcValue) {
		def comparisonResult = new CompRes(jdbcKey, jdbcValue, restValue);
		comparisonResults.add(comparisonResult);
	}
}
for(r in restMap) {
	def restKey = r.key;
	def restValue = r.value;
	def jdbcValue = jdbcMap.get(restKey);
	if(jdbcValue == null) {
		def comparisonResult = new CompRes(restKey, null, restValue);
		comparisonResults.add(comparisonResult);
	}
}
def failCount = 0;
for(item in comparisonResults) {
	def fail = item.fail();
	if(fail == -1) {
		log.info((++failCount) + ": " + item.jdbcKey + "-" + item.jdbcValue + "-" + item.restValue);
	} else if(fail > 0) {
		log.info((++failCount) + ": " + item.jdbcKey + "-" + item.jdbcValue + "-" + item.restValue + " --- PERCENT: " + fail);
	} else {
//		log.info(item.jdbcKey + "-" + item.jdbcValue + "-" + item.restValue);
	}
}

if (failCount>0)
    {
       log.info 'Vertica Results    : ' + jdbcMap
       log.info 'Pavi_Test Results: ' + restMap
       log.info 'FAILED : ' + failCount + '  tests failed'
       log.info "*************************************************************"
       log.info "   End test for : " + context.getCurrentStep().getLabel()
       log.info "*************************************************************"
       testStatus = "1"
       com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "testStatus", testStatus )
       assert false : "Test Suite FAILED"
    }
    else
    {
    	  log.info 'PASSED : ' + failCount + '  tests failed'
    	  log.info "*************************************************************"
    	  log.info "   End test for : " + context.getCurrentStep().getLabel()
       log.info "*************************************************************"
       
       assert true: "Test Suite Passed"
    }

//// create groovyUtils and XmlHolder for response of Request
//def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
//def alert = com.eviware.soapui.support.UISupport;
//def response1 = context.expand( 'SummarySentimentByEntityPositiveVertica#ResponseAsXml' )
//def response2 = context.expand( '${Summary082SentimentByEntityPositive#ResponseAsXml}' )
//def holder1 = groovyUtils.getXmlHolder(response1)
//def holder2 = groovyUtils.getXmlHolder(response2)
//
//def jdbcStringList = []
//def restStringList = []
//def x = 0 as int
//def y = 0 as int
//def fail = 0 as int
//
//// loop item nodes in response message
//for( jdbcResults in holder1.getNodeValues( '//MULTI_LEVEL_ANNOTATION.LEVEL1, //CONTENT_VOLUME' ))
//{  
//  //log.info 'Item : [$jdbcResults]'
//  jdbcStringList = jdbcStringList + jdbcResults
//}
//
//holder2.namespaces['ns'] = 'http://10.200.0.124/ArticleQueryApi/rest/query/aggregate'
//for( restResponse in holder2.getNodeValues( '//ns:results/ns:e/ns:entity_type, //ns:results/ns:e/ns:content_volume'  ))
//{
//  //log.info 'Item : [$restResponse]' 
//  restStringList = restStringList + restResponse
//    if (restResponse in jdbcStringList ) assert true
//    else {
//    	   //alert.showInfoMessage(jdbcStringList[x] + " counts do not match","soapUI Warning !")
//    	   //log.info 'Results from vertica do not match results from articleQueryApi '+ jdbcStringList[x] + " " + restResponse
//    	   log.info 'Entity : ' + jdbcStringList[x]
//        log.info 'Vertica: '+ jdbcStringList[y] + " HBase: " + restResponse
//        verticount = jdbcStringList[y] as Integer
//        hbasecount = restResponse as Integer
//        //log.info verticount
//        //log.info hbasecount
//       if (verticount < hbasecount)
//          {
//             f = ((1 - (verticount/hbasecount)) * 100 )
//             f = f.abs()
//             log.info 'Difference of: ' + new Double(f).round(2) + '%'
//             log.info 'Vertica count is less than HBase count'
//          }
//          else
//             {
//                f = ((1 - (hbasecount/verticount)) * 100 )
//                f = f.abs()
//                log.info 'Difference of: ' + new Double(f).round(2) + '%'
//                log.info 'HBase count is less than Vertica count'
//             }
//       if (f < 2 )
//          {
//             log.info 'PASS'
//          }
//          else
//             {
//                log.info 'FAILED: Percentage is > 2%'
//                fail = fail + 1
//             }
//
//    x = x + 1
//    
//    }
//    y = y + 1
//}
//log.info "Fail count = " + fail
//log.info "request  : >" + jdbcStringList
//log.info "result     : >" + restStringList
//if (fail>0)
//    {
//       assert false : "Percentage is greater than 2%"
//    }]]></script></con:config></con:testStep><con:testStep type="groovy" name="logsToFile" disabled="true"><con:settings/><con:config><script>//The below groovy script step is to capture the soapUI log area.
// "soapUI log" can be replaced with http log, jetty log, script log, error log etc based on the need.
def logArea = com.eviware.soapui.SoapUI.logMonitor.getLogArea( "script log" );
//Below two lines of groovy script is to get the project directory, we will be saving the soapUI log contents on a file in that directory.
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def start = context.expand('${#Global#filestart}')
def end = context.expand('${#Global#fileend}')
def projectPath = groovyUtils.projectPath
def status = context.expand('${#Global#testStatus}') as Integer
if (status > 0)
   {
   	def fail = context.expand('${#Global#fail}') as String
   	//log.info fail
   	def logFile = new File(projectPath + "\\" + fail + "_soapUI-Logs-to-file_" + start +"_to_" + end + ".txt")
   	def accountName = ("Account Name: " + context.expand('${#Global#itcAccountName}') + "\r\n") as String
     def accountId = ("Account ID  : " + context.expand('${#Global#itcAccountId}') + "\r\n") as String
     def userName = ("Username    : " + context.expand('${#Global#itcUsername}')  + "\r\n") as String
     def password = ("Password    : " + context.expand('${#Global#itcPassword}')  + "\r\n") as String
     def topicId =  ("Topic ID    : " + context.expand('${#Global#itctopicid}') + "\r\n") as String
     def sqlStart =  ("Start Time  : " + context.expand('${#Global#querysqlstart}') + "\r\n") as String
     def sqlEnd =  ("End Time    : " + context.expand('${#Global#querysqlend}') + "\r\n") as String

     logFile.write("soapUI Logs In a file.\r\n" + accountName + accountId + userName + password + topicId + sqlStart + sqlEnd)
        if( logArea !=null )
        {
           def model = logArea.model
           if( model.size > 0 )            
              for( c in 0..(model.size-1) )         
                logFile.append(model.getElementAt( c ).toString() + "\r\n")
        }
   }
   else
      {
   	   def pass = context.expand('${#Global#pass}') as String
   	   //log.info pass
   	   def logFile = new File(projectPath + "\\" + pass + "_soapUI-Logs-to-file_" + start +"_to_" + end + ".txt")
   	   def accountName = ("Account Name: " + context.expand('${#Global#itcAccountName}') + "\r\n") as String
        def accountId = ("Account ID  : " + context.expand('${#Global#itcAccountId}') + "\r\n") as String
        def userName = ("Username    : " + context.expand('${#Global#itcUsername}')  + "\r\n") as String
        def password = ("Password    : " + context.expand('${#Global#itcPassword}')  + "\r\n") as String
        def topicId =  ("Topic ID    : " + context.expand('${#Global#itctopicid}') + "\r\n") as String
        def sqlStart =  ("Start Time  : " + context.expand('${#Global#querysqlstart}') + "\r\n") as String
        def sqlEnd =  ("End Time    : " + context.expand('${#Global#querysqlend}') + "\r\n") as String

        logFile.write("soapUI Logs In a file.\r\n" + accountName + accountId + userName + password + topicId + sqlStart + sqlEnd)
           if( logArea !=null )
           {
              def model = logArea.model
              if( model.size > 0 )            
                 for( c in 0..(model.size-1) )         
                   logFile.append(model.getElementAt( c ).toString() + "\r\n")       
           }
      }

////This is the first line in the soapUI log file.
//def accountName = ("Account Name: " + context.expand('${#Global#itcAccountName}') + "\r\n") as String
//def accountId = ("Account ID  : " + context.expand('${#Global#itcAccountId}') + "\r\n") as String
//def userName = ("Username    : " + context.expand('${#Global#itcUsername}')  + "\r\n") as String
//def password = ("Password    : " + context.expand('${#Global#itcPassword}')  + "\r\n") as String
//def topicId =  ("Topic ID    : " + context.expand('${#Global#itctopicid}') + "\r\n") as String
//def sqlStart =  ("Start Time  : " + context.expand('${#Global#querysqlstart}') + "\r\n") as String
//def sqlEnd =  ("End Time    : " + context.expand('${#Global#querysqlend}') + "\r\n") as String
//
//logFile.write("soapUI Logs In a file.\r\n" + accountName + accountId + userName + password + topicId + sqlStart + sqlEnd)
//   if( logArea !=null )
//   {
//      def model = logArea.model
//      if( model.size > 0 )            
//         for( c in 0..(model.size-1) )         
//           logFile.append(model.getElementAt( c ).toString() + "\r\n")       
//      
//   }</script></con:config></con:testStep><con:properties/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="AggregateTagCloud" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="2e25a5df-5fc2-4220-99f8-68d12c028865"><con:settings/><con:testStep type="groovy" name="settime" disabled="true"><con:settings/><con:config><script>Calendar sod = Calendar.instance
    sod.set(Calendar.AM_PM, 0)
    sod.set(Calendar.HOUR, 0)
    sod.set(Calendar.MINUTE, 0)
    sod.set(Calendar.SECOND, 0)
    sod.set(Calendar.MILLISECOND, 0)
start = sod.time 
sqlstart = start.format('MM-dd-yy HH:mm:ss')
//log.info "SQL Start Time:  " + sqlstart
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "querysqlstart", sqlstart )

Calendar eod = Calendar.instance
    eod.set(Calendar.AM_PM, 0)
    eod.set(Calendar.HOUR, 9)
    eod.set(Calendar.MINUTE, 59)
    eod.set(Calendar.SECOND, 59)
    eod.set(Calendar.MILLISECOND, 999)
end = eod.time 
sqlend = end.format('MM-dd-yy HH:mm:ss')
//log.info "SQL End Time:  " + sqlend
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "querysqlend", sqlend )

offset = sod.get(Calendar.ZONE_OFFSET) + sod.get(Calendar.DST_OFFSET) / (60 * 1000)

starttime = start.time
epochstart = starttime + offset
//log.info "Epoch Start Time:  " + epochstart
def epochstart = epochstart as String
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "queryepochstart", epochstart )
def timestampstart = epochstart as Long
Date tss = new Date(timestampstart)
//log.info "Time to select in local timezone:  "+ tss

endtime = end.time
epochend = endtime + offset
//log.info "Epoch End Time:  " + epochend
def epochend = epochend as String
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "queryepochend", epochend )
def timestampend = epochend as Long
Date tse = new Date(timestampend)
//log.info "Time to select in local timezone:  "+ tse

now = Calendar.instance
today = now.time
millis = today.time
//log.info "Current time in milli-seconds:  " + millis
def today = new Date (millis)
//log.info "Current Local Time:  "+ today
tf = today.format('MM dd yy HH mm ss')
//log.info "Current Local Time nicely formatted:  "+ tf
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "time", tf )</script></con:config></con:testStep><con:testStep type="restrequest" name="authuser"><con:settings/><con:config service="ARTSA - UserManager" resourcePath="/SaasCoreUserManager/rest/auth" methodName="POST - authenticate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="authuser" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="authkey" value="1189377229352574419-2213262129298445271-4936701685398756970-61" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://10.200.0.124:8080</con:endpoint><con:request>{
  "username":${#Global#userUsername},
  "password":${#Global#useroriginalpassword},
  "accountName":${#Global#userAccountName}
}</con:request><con:assertion type="XPath Match" name="XPath Match"><con:configuration><path>declare namespace soap='http://schemas.xmlsoap.org/soap/envelope/';
declare namespace ns1='http://10.200.0.124/SaasCoreUserManager/rest/auth';
//ns1:loginFailed</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="authResponse"><con:settings/><con:config><script>import groovy.json.JsonSlurper
import com.eviware.soapui.impl.wsdl.teststeps.*

responseContent = testRunner.testCase.getTestStepByName("authuser").getPropertyValue("response")
slurperresponse = new JsonSlurper().parseText(responseContent)

accountid = (slurperresponse.account)
def accountid = accountid as String
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "accountid", accountid )

accountname = (slurperresponse.accountName)
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "accountName", accountname )

authkey = (slurperresponse.authkey)
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "authkey", authkey )

userid = (slurperresponse.id)
def userid = userid as String
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "userid", userid )

username = (slurperresponse.username)
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "userName", username )

//log.info accountid
//log.info accountname
//log.info authkey
//log.info userid
//log.info username</script></con:config></con:testStep><con:testStep type="groovy" name="setutokenheader"><con:settings/><con:config><script>import com.eviware.soapui.impl.wsdl.teststeps.*
import com.eviware.soapui.support.types.StringToStringMap;

def authkey = com.eviware.soapui.SoapUI.globalProperties.getPropertyValue( "authkey")
def tc = testRunner.testCase.testSuite.getTestCaseByName("AggregateTagCloud")
def ts11 = tc.getTestStepByName("Summary09TagCloud")


def headers = new StringToStringMap()
headers.putIfMissing("utoken",authkey)

ts11.getHttpRequest().setRequestHeaders(headers)</script></con:config></con:testStep><con:testStep type="groovy" name="initialize_jdbc_driver"><con:settings/><con:config><script>com.eviware.soapui.support.GroovyUtils.registerJdbcDriver("vertica.jdbc.driver.vertica")</script></con:config></con:testStep><con:testStep type="restrequest" name="Summary09TagCloud"><con:settings/><con:config service="ARTSA  - Article Query" resourcePath="/ArticleQueryApi/rest/query/aggregate" methodName="POST - getAggregateData" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Summary09TagCloud" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="utoken" value="-1940940735982733166-1630163435668389526-2038428864315369300-1001" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://10.200.0.124:8080</con:endpoint><con:request>{
  "topicIDs":[${#Global#topicid}],
  "limit":200,
  "selectedFields":[{"field":"content_volume()","sortDirection":"DESCENDING"},
   	   {"field":"entity_value","sortDirection":"ASCENDING"}
        //{"field":"combined_topics"}
  ],
  "filters":[
      //{"field":"entity_value","comparison":"EQ","values":["ambiguous icon","positive icon","extreme positive icon","negative icon","mother"]}
  ],
  "dateRange":{"startDate":${#Global#queryepochstart},"endDate":${#Global#queryepochend}}
}</con:request><con:assertion type="XPath Match" name="XPath Match"><con:configuration><path>declare namespace soap='http://schemas.xmlsoap.org/soap/envelope/';
declare namespace ns1='http://10.200.0.124/ArticleQueryApi/rest/query/aggregate';
//ns1:entity_value</path><content>*</content><allowWildcards>true</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="jdbc" name="SummaryTagCloudVertica"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>com.vertica.Driver</con:driver><con:connectionString>jdbc:vertica://10.200.0.190:5433/artsa01?user=artsa01&amp;password=artsa2</con:connectionString><con:query>SELECT en.value,COUNT(DISTINCT ta.article_id) content_volume
FROM (
	SELECT pipeline_topic_id, article_id, publish_at, publish_at_week
	FROM topic_article ta
	WHERE pipeline_topic_id IN (${#Global#topicid})
	AND ta.publish_at BETWEEN '${#Global#querysqlstart}' AND '${#Global#querysqlend}'
	 ) ta
INNER JOIN multi_level_annotation en on en.article_id=ta.article_id
AND en.type='entity'
WHERE  ta.pipeline_topic_id IN (${#Global#topicid})
AND en.account IN (0,${#Global#accountid})
GROUP BY en.value
ORDER BY COUNT(DISTINCT ta.article_id) DESC, en.value ASC  limit 200</con:query><con:properties/></con:config></con:testStep><con:testStep type="groovy" name="compareResultsTagCloud"><con:settings/><con:config><script><![CDATA[// create groovyUtils and XmlHolder for response of Request
def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
def alert = com.eviware.soapui.support.UISupport;
def response1 = context.expand( 'SummaryTagCloudVertica#ResponseAsXml' )
def response2 = context.expand( '${Summary09TagCloud#ResponseAsXml}' )
def holder1 = groovyUtils.getXmlHolder(response1)
def holder2 = groovyUtils.getXmlHolder(response2)

log.info "*************************************************************"
log.info "   Begin test for : " + context.getCurrentStep().getLabel()
log.info "*************************************************************"

// loop item nodes in Vertica response message
def jdbcMap = [:];
def jdbcEntityTypeArr = holder1.getNodeValues( '//MULTI_LEVEL_ANNOTATION.VALUE' )
def jdbcEntityVolumeArr = holder1.getNodeValues( '//CONTENT_VOLUME' )
for( int z=0; z<jdbcEntityTypeArr.length; z++) {  
	jdbcMap.put(jdbcEntityTypeArr[z],jdbcEntityVolumeArr[z]);
}
//log.info jdbcMap

// loop item nodes in REST response message
def restMap = [:];
holder2.namespaces['ns'] = 'http://10.200.0.124/ArticleQueryApi/rest/query/aggregate'
def restEntityTypeArr = holder2.getNodeValues( '//ns:results/ns:e/ns:entity_value'  )
def restEntityVolumeArr = holder2.getNodeValues( '//ns:results/ns:e/ns:content_volume'  )
for( int z=0; z<restEntityTypeArr.length; z++) {  
	restMap.put(restEntityTypeArr[z],restEntityVolumeArr[z]);
}
//log.info restMap

class CompRes {
	def jdbcKey;
	def jdbcValue;
	def restValue;
  CompRes(jdbcKey1, jdbcValue1, restValue1) {
  	jdbcKey = jdbcKey1;
  	jdbcValue = jdbcValue1;
  	restValue = restValue1;
  }
  def fail() {
  	if(jdbcValue == null || restValue == null) {
  		return -1;
  	}
  	def f;
//  	if ((jdbcValue.toInteger() < 100 || restValue.toInteger() < 100) && (jdbcValue.toInteger()-restValue.toInteger() > 2 || restValue.toInteger()-jdbcValue.toInteger() > 2))
//  	{
//  		return -1;
//  	}
//  	else {
//  		return 0;
//  	}
     if (jdbcValue.toInteger() < restValue.toInteger())
     {
        f = ((1 - (jdbcValue.toInteger()/restValue.toInteger())) * 100 )
        f = f.abs()
     }
     else
     {
        f = ((1 - (restValue.toInteger()/jdbcValue.toInteger())) * 100 )
        f = f.abs()
     }
	if(f > 2) {
		return new Double(f).round(2);
	}
	return 0;
  }
}

def comparisonResults = [];
for(j in jdbcMap) {
	def jdbcKey = j.key;
	def jdbcValue = j.value;
	def restValue = restMap.get(jdbcKey);
	if(restValue == null || restValue != jdbcValue) {
		def comparisonResult = new CompRes(jdbcKey, jdbcValue, restValue);
		comparisonResults.add(comparisonResult);
	}
}
for(r in restMap) {
	def restKey = r.key;
	def restValue = r.value;
	def jdbcValue = jdbcMap.get(restKey);
	if(jdbcValue == null) {
		def comparisonResult = new CompRes(restKey, null, restValue);
		comparisonResults.add(comparisonResult);
	}
}
def failCount = 0;
for(item in comparisonResults) {
	def fail = item.fail();
	if(fail == -1) {
		log.info((++failCount) + ": " + item.jdbcKey + "-" + item.jdbcValue + "-" + item.restValue);
	} else if(fail > 0) {
		log.info((++failCount) + ": " + item.jdbcKey + "-" + item.jdbcValue + "-" + item.restValue + " --- PERCENT: " + fail);
	} else {
//		log.info(item.jdbcKey + "-" + item.jdbcValue + "-" + item.restValue);
	}
}

if (failCount>0)
    {
       log.info 'Vertica Results    : ' + jdbcMap
       log.info 'Pavi_Test Results: ' + restMap
       log.info 'FAILED : ' + failCount + '  tests failed'
       log.info "*************************************************************"
       log.info "   End test for : " + context.getCurrentStep().getLabel()
       log.info "*************************************************************"
       testStatus = "1"
       com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "testStatus", testStatus )
       assert false : "Test Suite FAILED"
    }
    else
    {
    	  log.info 'PASSED : ' + failCount + '  tests failed'
    	  log.info "*************************************************************"
    	  log.info "   End test for : " + context.getCurrentStep().getLabel()
       log.info "*************************************************************"
       
       assert true: "Test Suite Passed"
    }]]></script></con:config></con:testStep><con:testStep type="groovy" name="logsToFile" disabled="true"><con:settings/><con:config><script>//The below groovy script step is to capture the soapUI log area.
// "soapUI log" can be replaced with http log, jetty log, script log, error log etc based on the need.
def logArea = com.eviware.soapui.SoapUI.logMonitor.getLogArea( "script log" );
//Below two lines of groovy script is to get the project directory, we will be saving the soapUI log contents on a file in that directory.
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def start = context.expand('${#Global#filestart}')
def end = context.expand('${#Global#fileend}')
def projectPath = groovyUtils.projectPath
def status = context.expand('${#Global#testStatus}') as Integer
if (status > 0)
   {
   	def fail = context.expand('${#Global#fail}') as String
   	//log.info fail
   	def logFile = new File(projectPath + "\\" + fail + "_soapUI-Logs-to-file_" + start +"_to_" + end + ".txt")
   	def accountName = ("Account Name: " + context.expand('${#Global#itcAccountName}') + "\r\n") as String
     def accountId = ("Account ID  : " + context.expand('${#Global#itcAccountId}') + "\r\n") as String
     def userName = ("Username    : " + context.expand('${#Global#itcUsername}')  + "\r\n") as String
     def password = ("Password    : " + context.expand('${#Global#itcPassword}')  + "\r\n") as String
     def topicId =  ("Topic ID    : " + context.expand('${#Global#itctopicid}') + "\r\n") as String
     def sqlStart =  ("Start Time  : " + context.expand('${#Global#querysqlstart}') + "\r\n") as String
     def sqlEnd =  ("End Time    : " + context.expand('${#Global#querysqlend}') + "\r\n") as String

     logFile.write("soapUI Logs In a file.\r\n" + accountName + accountId + userName + password + topicId + sqlStart + sqlEnd)
        if( logArea !=null )
        {
           def model = logArea.model
           if( model.size > 0 )            
              for( c in 0..(model.size-1) )         
                logFile.append(model.getElementAt( c ).toString() + "\r\n")
        }
   }
   else
      {
   	   def pass = context.expand('${#Global#pass}') as String
   	   //log.info pass
   	   def logFile = new File(projectPath + "\\" + pass + "_soapUI-Logs-to-file_" + start +"_to_" + end + ".txt")
   	   def accountName = ("Account Name: " + context.expand('${#Global#itcAccountName}') + "\r\n") as String
        def accountId = ("Account ID  : " + context.expand('${#Global#itcAccountId}') + "\r\n") as String
        def userName = ("Username    : " + context.expand('${#Global#itcUsername}')  + "\r\n") as String
        def password = ("Password    : " + context.expand('${#Global#itcPassword}')  + "\r\n") as String
        def topicId =  ("Topic ID    : " + context.expand('${#Global#itctopicid}') + "\r\n") as String
        def sqlStart =  ("Start Time  : " + context.expand('${#Global#querysqlstart}') + "\r\n") as String
        def sqlEnd =  ("End Time    : " + context.expand('${#Global#querysqlend}') + "\r\n") as String

        logFile.write("soapUI Logs In a file.\r\n" + accountName + accountId + userName + password + topicId + sqlStart + sqlEnd)
           if( logArea !=null )
           {
              def model = logArea.model
              if( model.size > 0 )            
                 for( c in 0..(model.size-1) )         
                   logFile.append(model.getElementAt( c ).toString() + "\r\n")       
           }
      }

////This is the first line in the soapUI log file.
//def accountName = ("Account Name: " + context.expand('${#Global#itcAccountName}') + "\r\n") as String
//def accountId = ("Account ID  : " + context.expand('${#Global#itcAccountId}') + "\r\n") as String
//def userName = ("Username    : " + context.expand('${#Global#itcUsername}')  + "\r\n") as String
//def password = ("Password    : " + context.expand('${#Global#itcPassword}')  + "\r\n") as String
//def topicId =  ("Topic ID    : " + context.expand('${#Global#itctopicid}') + "\r\n") as String
//def sqlStart =  ("Start Time  : " + context.expand('${#Global#querysqlstart}') + "\r\n") as String
//def sqlEnd =  ("End Time    : " + context.expand('${#Global#querysqlend}') + "\r\n") as String
//
//logFile.write("soapUI Logs In a file.\r\n" + accountName + accountId + userName + password + topicId + sqlStart + sqlEnd)
//   if( logArea !=null )
//   {
//      def model = logArea.model
//      if( model.size > 0 )            
//         for( c in 0..(model.size-1) )         
//           logFile.append(model.getElementAt( c ).toString() + "\r\n")       
//      
//   }</script></con:config></con:testStep><con:properties/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="AggregateFollowers" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="a2340489-bb4c-481f-9855-4aae5ac8a063" disabled="true"><con:settings/><con:testStep type="groovy" name="settime" disabled="true"><con:settings/><con:config><script>Calendar sod = Calendar.instance
    sod.set(Calendar.AM_PM, 0)
    sod.set(Calendar.HOUR, 0)
    sod.set(Calendar.MINUTE, 0)
    sod.set(Calendar.SECOND, 0)
    sod.set(Calendar.MILLISECOND, 0)
start = sod.time 
sqlstart = start.format('MM-dd-yy HH:mm:ss')
//log.info "SQL Start Time:  " + sqlstart
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "querysqlstart", sqlstart )

Calendar eod = Calendar.instance
    eod.set(Calendar.AM_PM, 0)
    eod.set(Calendar.HOUR, 9)
    eod.set(Calendar.MINUTE, 59)
    eod.set(Calendar.SECOND, 59)
    eod.set(Calendar.MILLISECOND, 999)
end = eod.time 
sqlend = end.format('MM-dd-yy HH:mm:ss')
//log.info "SQL End Time:  " + sqlend
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "querysqlend", sqlend )

offset = sod.get(Calendar.ZONE_OFFSET) + sod.get(Calendar.DST_OFFSET) / (60 * 1000)

starttime = start.time
epochstart = starttime + offset
//log.info "Epoch Start Time:  " + epochstart
def epochstart = epochstart as String
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "queryepochstart", epochstart )
def timestampstart = epochstart as Long
Date tss = new Date(timestampstart)
//log.info "Time to select in local timezone:  "+ tss

endtime = end.time
epochend = endtime + offset
//log.info "Epoch End Time:  " + epochend
def epochend = epochend as String
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "queryepochend", epochend )
def timestampend = epochend as Long
Date tse = new Date(timestampend)
//log.info "Time to select in local timezone:  "+ tse

now = Calendar.instance
today = now.time
millis = today.time
//log.info "Current time in milli-seconds:  " + millis
def today = new Date (millis)
//log.info "Current Local Time:  "+ today
tf = today.format('MM dd yy HH mm ss')
//log.info "Current Local Time nicely formatted:  "+ tf
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "time", tf )</script></con:config></con:testStep><con:testStep type="restrequest" name="authuser"><con:settings/><con:config service="ARTSA - UserManager" resourcePath="/SaasCoreUserManager/rest/auth" methodName="POST - authenticate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="authuser" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="authkey" value="1189377229352574419-2213262129298445271-4936701685398756970-61" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://10.200.0.124:8080</con:endpoint><con:request>{
  "username":${#Global#userUsername},
  "password":${#Global#useroriginalpassword},
  "accountName":${#Global#userAccountName}
}</con:request><con:assertion type="XPath Match" name="XPath Match"><con:configuration><path>declare namespace soap='http://schemas.xmlsoap.org/soap/envelope/';
declare namespace ns1='http://10.200.0.124/SaasCoreUserManager/rest/auth';
//ns1:loginFailed</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="authResponse"><con:settings/><con:config><script>import groovy.json.JsonSlurper
import com.eviware.soapui.impl.wsdl.teststeps.*

responseContent = testRunner.testCase.getTestStepByName("authuser").getPropertyValue("response")
slurperresponse = new JsonSlurper().parseText(responseContent)

accountid = (slurperresponse.account)
def accountid = accountid as String
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "accountid", accountid )

accountname = (slurperresponse.accountName)
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "accountName", accountname )

authkey = (slurperresponse.authkey)
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "authkey", authkey )

userid = (slurperresponse.id)
def userid = userid as String
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "userid", userid )

username = (slurperresponse.username)
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "userName", username )

//log.info accountid
//log.info accountname
//log.info authkey
//log.info userid
//log.info username</script></con:config></con:testStep><con:testStep type="groovy" name="setutokenheader"><con:settings/><con:config><script>import com.eviware.soapui.impl.wsdl.teststeps.*
import com.eviware.soapui.support.types.StringToStringMap;

def authkey = com.eviware.soapui.SoapUI.globalProperties.getPropertyValue( "authkey")
def tc = testRunner.testCase.testSuite.getTestCaseByName("AggregateFollowers")
def ts11 = tc.getTestStepByName("Summary101Followers")


def headers = new StringToStringMap()
headers.putIfMissing("utoken",authkey)

ts11.getHttpRequest().setRequestHeaders(headers)</script></con:config></con:testStep><con:testStep type="groovy" name="initialize_jdbc_driver"><con:settings/><con:config><script>com.eviware.soapui.support.GroovyUtils.registerJdbcDriver("vertica.jdbc.driver.vertica")</script></con:config></con:testStep><con:testStep type="restrequest" name="Summary101Followers"><con:settings/><con:config service="ARTSA  - Article Query" resourcePath="/ArticleQueryApi/rest/query/aggregate" methodName="POST - getAggregateData" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Summary101Followers" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="utoken" value="-8336981738483633049-4484763033894641621-2368741275735304964-1001" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://10.200.0.124:8080</con:endpoint><con:request>{
  "topicIDs":[${#Global#topicid}],
  "limit":10,
 "selectedFields":[
   {"field":"followers_max()","sortDirection":"DESCENDING"},
   {"field":"status_updates_max()"},
   {"field":"klout_max()"},
   {"field":"article_publisher"},
   {"field":"article_screen_name"},
   {"field":"article_content_subtype"},
   {"field":"author_name"},
   {"field":"author_image_url"},
   {"field":"article_uri_max()"}
 ],
 "filters":[
   {"field":"article_content_subtype","comparison":"EQ","values":["twitter"]}
 ],
  "dateRange":{"startDate":${#Global#queryepochstart},"endDate":${#Global#queryepochend}}
}</con:request><con:assertion type="XPath Match" name="assert_article_details"><con:configuration><path>declare namespace soap='http://schemas.xmlsoap.org/soap/envelope/';
declare namespace ns1='http://10.200.0.124/ArticleQueryApi/rest/query/aggregate';
//ns1:e</path><content>*</content><allowWildcards>true</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="jdbc" name="SummaryFollowersVertica"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>com.vertica.Driver</con:driver><con:connectionString>jdbc:vertica://10.200.0.190:5433/artsa01?user=artsa01&amp;password=artsa2</con:connectionString><con:query>SELECT DISTINCT(fa.author_name), max(fa.followers)
FROM fact_article fa
INNER JOIN (
	SELECT pipeline_topic_id, article_id, publish_at, publish_at_week
	FROM topic_article ta
	WHERE pipeline_topic_id IN (${#Global#topicid})
	AND ta.publish_at BETWEEN '${#Global#querysqlstart}' AND '${#Global#querysqlend}'
	  ) ta  ON ta.article_id=fa.id
AND ta.publish_at_week=fa.publish_at_week
WHERE  ta.pipeline_topic_id IN (${#Global#topicid})
GROUP BY fa.author_name
ORDER BY max(fa.followers) DESC LIMIT 10;</con:query><con:properties/></con:config></con:testStep><con:testStep type="groovy" name="compareResultsFollowers"><con:settings/><con:config><script><![CDATA[// create groovyUtils and XmlHolder for response of Request
def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
def alert = com.eviware.soapui.support.UISupport;
def response1 = context.expand( 'SummaryFollowersVertica#ResponseAsXml' )
def response2 = context.expand( '${Summary101Followers#ResponseAsXml}' )
def holder1 = groovyUtils.getXmlHolder(response1)
def holder2 = groovyUtils.getXmlHolder(response2)

log.info "*************************************************************"
log.info "   Begin test for : " + context.getCurrentStep().getLabel()
log.info "*************************************************************"

// loop item nodes in Vertica response message
def jdbcMap = [:];
def jdbcEntityTypeArr = holder1.getNodeValues( '//FACT_ARTICLE.AUTHOR_NAME' )
def jdbcEntityVolumeArr = holder1.getNodeValues( '//MAX' )
for( int z=0; z<jdbcEntityTypeArr.length; z++) {  
	jdbcMap.put(jdbcEntityTypeArr[z],jdbcEntityVolumeArr[z]);
}
//log.info jdbcMap

// loop item nodes in REST response message
def restMap = [:];
holder2.namespaces['ns'] = 'http://10.200.0.124/ArticleQueryApi/rest/query/aggregate'
def restEntityTypeArr = holder2.getNodeValues( '//ns:results/ns:e/ns:author_name'  )
def restEntityVolumeArr = holder2.getNodeValues( '//ns:results/ns:e/ns:followers_max'  )
for( int z=0; z<restEntityTypeArr.length; z++) {  
	restMap.put(restEntityTypeArr[z],restEntityVolumeArr[z]);
}
//log.info restMap

class CompRes {
	def jdbcKey;
	def jdbcValue;
	def restValue;
  CompRes(jdbcKey1, jdbcValue1, restValue1) {
  	jdbcKey = jdbcKey1;
  	jdbcValue = jdbcValue1;
  	restValue = restValue1;
  }
  def fail() {
  	if(jdbcValue == null || restValue == null) {
  		return -1;
  	}
  	def f;
//  	if ((jdbcValue.toInteger() < 100 || restValue.toInteger() < 100) && (jdbcValue.toInteger()-restValue.toInteger() > 2 || restValue.toInteger()-jdbcValue.toInteger() > 2))
//  	{
//  		return -1;
//  	}
//  	else {
//  		return 0;
//  	}
     if (jdbcValue.toInteger() < restValue.toInteger())
     {
        f = ((1 - (jdbcValue.toInteger()/restValue.toInteger())) * 100 )
        f = f.abs()
     }
     else
     {
        f = ((1 - (restValue.toInteger()/jdbcValue.toInteger())) * 100 )
        f = f.abs()
     }
	if(f > 2) {
		return new Double(f).round(2);
	}
	return 0;
  }
}

def comparisonResults = [];
for(j in jdbcMap) {
	def jdbcKey = j.key;
	def jdbcValue = j.value;
	def restValue = restMap.get(jdbcKey);
	if(restValue == null || restValue != jdbcValue) {
		def comparisonResult = new CompRes(jdbcKey, jdbcValue, restValue);
		comparisonResults.add(comparisonResult);
	}
}
for(r in restMap) {
	def restKey = r.key;
	def restValue = r.value;
	def jdbcValue = jdbcMap.get(restKey);
	if(jdbcValue == null) {
		def comparisonResult = new CompRes(restKey, null, restValue);
		comparisonResults.add(comparisonResult);
	}
}
def failCount = 0;
for(item in comparisonResults) {
	def fail = item.fail();
	if(fail == -1) {
		log.info((++failCount) + ": " + item.jdbcKey + "-" + item.jdbcValue + "-" + item.restValue);
	} else if(fail > 0) {
		log.info((++failCount) + ": " + item.jdbcKey + "-" + item.jdbcValue + "-" + item.restValue + " --- PERCENT: " + fail);
	} else {
//		log.info(item.jdbcKey + "-" + item.jdbcValue + "-" + item.restValue);
	}
}

if (failCount>0)
    {
       log.info 'Vertica Results    : ' + jdbcMap
       log.info 'Pavi_Test Results: ' + restMap
       log.info 'FAILED : ' + failCount + '  tests failed'
       log.info "*************************************************************"
       log.info "   End test for : " + context.getCurrentStep().getLabel()
       log.info "*************************************************************"
       testStatus = "1"
       com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "testStatus", testStatus )
       assert false : "Test Suite FAILED"
    }
    else
    {
    	  log.info 'PASSED : ' + failCount + '  tests failed'
    	  log.info "*************************************************************"
    	  log.info "   End test for : " + context.getCurrentStep().getLabel()
       log.info "*************************************************************"
       
       assert true: "Test Suite Passed"
    }

//// create groovyUtils and XmlHolder for response of Request
//def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
//def alert = com.eviware.soapui.support.UISupport;
//def response1 = context.expand( 'SummaryFollowersVertica#ResponseAsXml' )
//def response2 = context.expand( '${Summary101Followers#ResponseAsXml}' )
//def holder1 = groovyUtils.getXmlHolder(response1)
//def holder2 = groovyUtils.getXmlHolder(response2)
//
//def jdbcStringList = []
//def restStringList = []
//def x = 0 as int
//def y = 0 as int
//def fail = 0 as int
//
//// loop item nodes in response message
//for( jdbcResults in holder1.getNodeValues( '//FACT_ARTICLE.AUTHOR_NAME, //MAX' ))
//{  
//  //log.info 'Item : [$jdbcResults]'
//  jdbcStringList = jdbcStringList + jdbcResults
//}
//
//holder2.namespaces['ns'] = 'http://10.200.0.124/ArticleQueryApi/rest/query/aggregate'
//for( restResponse in holder2.getNodeValues( '//ns:results/ns:e/ns:author_name, //ns:results/ns:e/ns:followers_max'  ))
//{
//  //log.info 'Item : [$restResponse]' 
//  restStringList = restStringList + restResponse
//    if (restResponse in jdbcStringList ) assert true
//    else {
//    	   //alert.showInfoMessage(jdbcStringList[x] + " counts do not match","soapUI Warning !")
//    	   //log.info 'Results from vertica do not match results from articleQueryApi '+ jdbcStringList[x] + " " + restResponse
//    	   log.info 'Entity : ' + jdbcStringList[x]
//        log.info 'Vertica: '+ jdbcStringList[y] + " HBase: " + restResponse
//        verticount = jdbcStringList[y] as Integer
//        hbasecount = restResponse as Integer
//        //log.info verticount
//        //log.info hbasecount
//       if (verticount < hbasecount)
//          {
//             f = ((1 - (verticount/hbasecount)) * 100 )
//             f = f.abs()
//             log.info 'Difference of: ' + new Double(f).round(2) + '%'
//             log.info 'Vertica count is less than HBase count'
//          }
//          else
//             {
//                f = ((1 - (hbasecount/verticount)) * 100 )
//                f = f.abs()
//                log.info 'Difference of: ' + new Double(f).round(2) + '%'
//                log.info 'HBase count is less than Vertica count'
//             }
//       if (f < 2 )
//          {
//             log.info 'PASS'
//          }
//          else
//             {
//                log.info 'FAILED: Percentage is > 2%'
//                fail = fail + 1
//             }
//
//    x = x + 1
//    
//    }
//    y = y + 1
//}
//log.info "Fail count = " + fail
//log.info "request  : >" + jdbcStringList
//log.info "result     : >" + restStringList
//if (fail>0)
//    {
//       assert false : "Percentage is greater than 2%"
//    }]]></script></con:config></con:testStep><con:testStep type="groovy" name="logsToFile" disabled="true"><con:settings/><con:config><script>//The below groovy script step is to capture the soapUI log area.
// "soapUI log" can be replaced with http log, jetty log, script log, error log etc based on the need.
def logArea = com.eviware.soapui.SoapUI.logMonitor.getLogArea( "script log" );
//Below two lines of groovy script is to get the project directory, we will be saving the soapUI log contents on a file in that directory.
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def start = context.expand('${#Global#filestart}')
def end = context.expand('${#Global#fileend}')
def projectPath = groovyUtils.projectPath
def status = context.expand('${#Global#testStatus}') as Integer
if (status > 0)
   {
   	def fail = context.expand('${#Global#fail}') as String
   	//log.info fail
   	def logFile = new File(projectPath + "\\" + fail + "_soapUI-Logs-to-file_" + start +"_to_" + end + ".txt")
   	def accountName = ("Account Name: " + context.expand('${#Global#itcAccountName}') + "\r\n") as String
     def accountId = ("Account ID  : " + context.expand('${#Global#itcAccountId}') + "\r\n") as String
     def userName = ("Username    : " + context.expand('${#Global#itcUsername}')  + "\r\n") as String
     def password = ("Password    : " + context.expand('${#Global#itcPassword}')  + "\r\n") as String
     def topicId =  ("Topic ID    : " + context.expand('${#Global#itctopicid}') + "\r\n") as String
     def sqlStart =  ("Start Time  : " + context.expand('${#Global#querysqlstart}') + "\r\n") as String
     def sqlEnd =  ("End Time    : " + context.expand('${#Global#querysqlend}') + "\r\n") as String

     logFile.write("soapUI Logs In a file.\r\n" + accountName + accountId + userName + password + topicId + sqlStart + sqlEnd)
        if( logArea !=null )
        {
           def model = logArea.model
           if( model.size > 0 )            
              for( c in 0..(model.size-1) )         
                logFile.append(model.getElementAt( c ).toString() + "\r\n")
        }
   }
   else
      {
   	   def pass = context.expand('${#Global#pass}') as String
   	   //log.info pass
   	   def logFile = new File(projectPath + "\\" + pass + "_soapUI-Logs-to-file_" + start +"_to_" + end + ".txt")
   	   def accountName = ("Account Name: " + context.expand('${#Global#itcAccountName}') + "\r\n") as String
        def accountId = ("Account ID  : " + context.expand('${#Global#itcAccountId}') + "\r\n") as String
        def userName = ("Username    : " + context.expand('${#Global#itcUsername}')  + "\r\n") as String
        def password = ("Password    : " + context.expand('${#Global#itcPassword}')  + "\r\n") as String
        def topicId =  ("Topic ID    : " + context.expand('${#Global#itctopicid}') + "\r\n") as String
        def sqlStart =  ("Start Time  : " + context.expand('${#Global#querysqlstart}') + "\r\n") as String
        def sqlEnd =  ("End Time    : " + context.expand('${#Global#querysqlend}') + "\r\n") as String

        logFile.write("soapUI Logs In a file.\r\n" + accountName + accountId + userName + password + topicId + sqlStart + sqlEnd)
           if( logArea !=null )
           {
              def model = logArea.model
              if( model.size > 0 )            
                 for( c in 0..(model.size-1) )         
                   logFile.append(model.getElementAt( c ).toString() + "\r\n")       
           }
      }

////This is the first line in the soapUI log file.
//def accountName = ("Account Name: " + context.expand('${#Global#itcAccountName}') + "\r\n") as String
//def accountId = ("Account ID  : " + context.expand('${#Global#itcAccountId}') + "\r\n") as String
//def userName = ("Username    : " + context.expand('${#Global#itcUsername}')  + "\r\n") as String
//def password = ("Password    : " + context.expand('${#Global#itcPassword}')  + "\r\n") as String
//def topicId =  ("Topic ID    : " + context.expand('${#Global#itctopicid}') + "\r\n") as String
//def sqlStart =  ("Start Time  : " + context.expand('${#Global#querysqlstart}') + "\r\n") as String
//def sqlEnd =  ("End Time    : " + context.expand('${#Global#querysqlend}') + "\r\n") as String
//
//logFile.write("soapUI Logs In a file.\r\n" + accountName + accountId + userName + password + topicId + sqlStart + sqlEnd)
//   if( logArea !=null )
//   {
//      def model = logArea.model
//      if( model.size > 0 )            
//         for( c in 0..(model.size-1) )         
//           logFile.append(model.getElementAt( c ).toString() + "\r\n")       
//      
//   }</script></con:config></con:testStep><con:properties/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="AggregateOther" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="ae454603-0cc4-46ff-be1f-f9f3be86f126" disabled="true"><con:settings/><con:testStep type="groovy" name="settime" disabled="true"><con:settings/><con:config><script>Calendar sod = Calendar.instance
    sod.set(Calendar.AM_PM, 0)
    sod.set(Calendar.HOUR, 0)
    sod.set(Calendar.MINUTE, 0)
    sod.set(Calendar.SECOND, 0)
    sod.set(Calendar.MILLISECOND, 0)
start = sod.time 
sqlstart = start.format('MM-dd-yy HH:mm:ss')
//log.info "SQL Start Time:  " + sqlstart
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "querysqlstart", sqlstart )

Calendar eod = Calendar.instance
    eod.set(Calendar.AM_PM, 0)
    eod.set(Calendar.HOUR, 9)
    eod.set(Calendar.MINUTE, 59)
    eod.set(Calendar.SECOND, 59)
    eod.set(Calendar.MILLISECOND, 999)
end = eod.time 
sqlend = end.format('MM-dd-yy HH:mm:ss')
//log.info "SQL End Time:  " + sqlend
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "querysqlend", sqlend )

offset = sod.get(Calendar.ZONE_OFFSET) + sod.get(Calendar.DST_OFFSET) / (60 * 1000)

starttime = start.time
epochstart = starttime + offset
//log.info "Epoch Start Time:  " + epochstart
def epochstart = epochstart as String
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "queryepochstart", epochstart )
def timestampstart = epochstart as Long
Date tss = new Date(timestampstart)
//log.info "Time to select in local timezone:  "+ tss

endtime = end.time
epochend = endtime + offset
//log.info "Epoch End Time:  " + epochend
def epochend = epochend as String
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "queryepochend", epochend )
def timestampend = epochend as Long
Date tse = new Date(timestampend)
//log.info "Time to select in local timezone:  "+ tse

now = Calendar.instance
today = now.time
millis = today.time
//log.info "Current time in milli-seconds:  " + millis
def today = new Date (millis)
//log.info "Current Local Time:  "+ today
tf = today.format('MM dd yy HH mm ss')
//log.info "Current Local Time nicely formatted:  "+ tf
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "time", tf )</script></con:config></con:testStep><con:testStep type="restrequest" name="authuser"><con:settings/><con:config service="ARTSA - UserManager" resourcePath="/SaasCoreUserManager/rest/auth" methodName="POST - authenticate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="authuser" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="authkey" value="1189377229352574419-2213262129298445271-4936701685398756970-61" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://10.200.0.124:8080</con:endpoint><con:request>{
  "username":${#Global#userUsername},
  "password":${#Global#useroriginalpassword},
  "accountName":${#Global#userAccountName}
}</con:request><con:assertion type="XPath Match" name="XPath Match"><con:configuration><path>declare namespace soap='http://schemas.xmlsoap.org/soap/envelope/';
declare namespace ns1='http://10.200.0.124/SaasCoreUserManager/rest/auth';
//ns1:loginFailed</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="authResponse"><con:settings/><con:config><script>import groovy.json.JsonSlurper
import com.eviware.soapui.impl.wsdl.teststeps.*

responseContent = testRunner.testCase.getTestStepByName("authuser").getPropertyValue("response")
slurperresponse = new JsonSlurper().parseText(responseContent)

accountid = (slurperresponse.account)
def accountid = accountid as String
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "accountid", accountid )

accountname = (slurperresponse.accountName)
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "accountName", accountname )

authkey = (slurperresponse.authkey)
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "authkey", authkey )

userid = (slurperresponse.id)
def userid = userid as String
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "userid", userid )

username = (slurperresponse.username)
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "userName", username )

//log.info accountid
//log.info accountname
//log.info authkey
//log.info userid
//log.info username</script></con:config></con:testStep><con:testStep type="groovy" name="setutokenheader"><con:settings/><con:config><script>import com.eviware.soapui.impl.wsdl.teststeps.*
import com.eviware.soapui.support.types.StringToStringMap;

def authkey = com.eviware.soapui.SoapUI.globalProperties.getPropertyValue( "authkey")
def tc = testRunner.testCase.testSuite.getTestCaseByName("AggregateOther")
def ts11 = tc.getTestStepByName("Summary104Other")


def headers = new StringToStringMap()
headers.putIfMissing("utoken",authkey)

ts11.getHttpRequest().setRequestHeaders(headers)</script></con:config></con:testStep><con:testStep type="groovy" name="initialize_jdbc_driver"><con:settings/><con:config><script>com.eviware.soapui.support.GroovyUtils.registerJdbcDriver("vertica.jdbc.driver.vertica")</script></con:config></con:testStep><con:testStep type="restrequest" name="Summary104Other"><con:settings/><con:config service="ARTSA  - Article Query" resourcePath="/ArticleQueryApi/rest/query/aggregate" methodName="POST - getAggregateData" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Summary104Other" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="utoken" value="5530346987374586698--3467078605331391649-7107076220513879485-1001" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://10.200.0.124:8080</con:endpoint><con:request>{
  "topicIDs":[${#Global#topicid}],
  "limit":10,
 "selectedFields":[
   {"field":"reach_max()","sortDirection":"DESCENDING"},
   {"field":"reach_max()"},
   {"field":"followers_max()"},
   {"field":"klout_max()"},
   {"field":"status_updates_max()"},
   {"field":"article_following"},
   {"field":"article_groups"},
   {"field":"article_published_at"},
   {"field":"article_publisher"},
   {"field":"article_screen_name"},
   {"field":"article_content_subtype"},
   {"field":"author_name"},
   {"field":"author_image_url"},
   {"field":"article_uri"}],
 "filters":[
   {"field":"article_content_subtype","comparison":"NE","values":["twitter"]}
 ],
  "dateRange":{"startDate":${#Global#queryepochstart},"endDate":${#Global#queryepochend}}
}</con:request><con:assertion type="XPath Match" name="assert_article_details"><con:configuration><path>declare namespace soap='http://schemas.xmlsoap.org/soap/envelope/';
declare namespace ns1='http://10.200.0.124/ArticleQueryApi/rest/query/aggregate';
//ns1:e</path><content>*</content><allowWildcards>true</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="jdbc" name="SummaryOtherVertica"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>com.vertica.Driver</con:driver><con:connectionString>jdbc:vertica://10.200.0.190:5433/artsa01?user=artsa01&amp;password=artsa2</con:connectionString><con:query>SELECT DISTINCT(fa.author_name), max(fa.reach)
FROM fact_article fa
INNER JOIN (
	SELECT pipeline_topic_id, article_id, publish_at, publish_at_week
	FROM topic_article ta
	WHERE pipeline_topic_id IN (${#Global#topicid})
	AND ta.publish_at BETWEEN '${#Global#querysqlstart}' AND '${#Global#querysqlend}'
	  ) ta  ON ta.article_id=fa.id
AND ta.publish_at_week=fa.publish_at_week
WHERE  ta.pipeline_topic_id IN (${#Global#topicid})
GROUP BY fa.author_name
ORDER BY max(fa.reach) DESC LIMIT 10;</con:query><con:properties/></con:config></con:testStep><con:testStep type="groovy" name="compareResultsOther"><con:settings/><con:config><script><![CDATA[// create groovyUtils and XmlHolder for response of Request
def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
def alert = com.eviware.soapui.support.UISupport;
def response1 = context.expand( 'SummaryOtherVertica#ResponseAsXml' )
def response2 = context.expand( '${Summary104Other#ResponseAsXml}' )
def holder1 = groovyUtils.getXmlHolder(response1)
def holder2 = groovyUtils.getXmlHolder(response2)

log.info "*************************************************************"
log.info "   Begin test for : " + context.getCurrentStep().getLabel()
log.info "*************************************************************"

// loop item nodes in Vertica response message
def jdbcMap = [:];
def jdbcEntityTypeArr = holder1.getNodeValues( '//FACT_ARTICLE.AUTHOR_NAME' )
def jdbcEntityVolumeArr = holder1.getNodeValues( '//MAX' )
for( int z=0; z<jdbcEntityTypeArr.length; z++) {  
	jdbcMap.put(jdbcEntityTypeArr[z],jdbcEntityVolumeArr[z]);
}
//log.info jdbcMap

// loop item nodes in REST response message
def restMap = [:];
holder2.namespaces['ns'] = 'http://10.200.0.124/ArticleQueryApi/rest/query/aggregate'
def restEntityTypeArr = holder2.getNodeValues( '//ns:results/ns:e/ns:author_name'  )
def restEntityVolumeArr = holder2.getNodeValues( '//ns:results/ns:e/ns:reach_max'  )
for( int z=0; z<restEntityTypeArr.length; z++) {  
	restMap.put(restEntityTypeArr[z],restEntityVolumeArr[z]);
}
//log.info restMap

class CompRes {
	def jdbcKey;
	def jdbcValue;
	def restValue;
  CompRes(jdbcKey1, jdbcValue1, restValue1) {
  	jdbcKey = jdbcKey1;
  	jdbcValue = jdbcValue1;
  	restValue = restValue1;
  }
  def fail() {
  	if(jdbcValue == null || restValue == null) {
  		return -1;
  	}
  	def f;
//  	if ((jdbcValue.toInteger() < 100 || restValue.toInteger() < 100) && (jdbcValue.toInteger()-restValue.toInteger() > 2 || restValue.toInteger()-jdbcValue.toInteger() > 2))
//  	{
//  		return -1;
//  	}
//  	else {
//  		return 0;
//  	}
     if (jdbcValue.toInteger() < restValue.toInteger())
     {
        f = ((1 - (jdbcValue.toInteger()/restValue.toInteger())) * 100 )
        f = f.abs()
     }
     else
     {
        f = ((1 - (restValue.toInteger()/jdbcValue.toInteger())) * 100 )
        f = f.abs()
     }
	if(f > 2) {
		return new Double(f).round(2);
	}
	return 0;
  }
}

def comparisonResults = [];
for(j in jdbcMap) {
	def jdbcKey = j.key;
	def jdbcValue = j.value;
	def restValue = restMap.get(jdbcKey);
	if(restValue == null || restValue != jdbcValue) {
		def comparisonResult = new CompRes(jdbcKey, jdbcValue, restValue);
		comparisonResults.add(comparisonResult);
	}
}
for(r in restMap) {
	def restKey = r.key;
	def restValue = r.value;
	def jdbcValue = jdbcMap.get(restKey);
	if(jdbcValue == null) {
		def comparisonResult = new CompRes(restKey, null, restValue);
		comparisonResults.add(comparisonResult);
	}
}
def failCount = 0;
for(item in comparisonResults) {
	def fail = item.fail();
	if(fail == -1) {
		log.info((++failCount) + ": " + item.jdbcKey + "-" + item.jdbcValue + "-" + item.restValue);
	} else if(fail > 0) {
		log.info((++failCount) + ": " + item.jdbcKey + "-" + item.jdbcValue + "-" + item.restValue + " --- PERCENT: " + fail);
	} else {
//		log.info(item.jdbcKey + "-" + item.jdbcValue + "-" + item.restValue);
	}
}

if (failCount>0)
    {
       log.info 'Vertica Results    : ' + jdbcMap
       log.info 'Pavi_Test Results: ' + restMap
       log.info 'FAILED : ' + failCount + '  tests failed'
       log.info "*************************************************************"
       log.info "   End test for : " + context.getCurrentStep().getLabel()
       log.info "*************************************************************"
       testStatus = "1"
       com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "testStatus", testStatus )
       assert false : "Test Suite FAILED"
    }
    else
    {
    	  log.info 'PASSED : ' + failCount + '  tests failed'
    	  log.info "*************************************************************"
    	  log.info "   End test for : " + context.getCurrentStep().getLabel()
       log.info "*************************************************************"
       
       assert true: "Test Suite Passed"
    }

//// create groovyUtils and XmlHolder for response of Request
//def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
//def alert = com.eviware.soapui.support.UISupport;
//def response1 = context.expand( 'SummaryOtherVertica#ResponseAsXml' )
//def response2 = context.expand( '${Summary104Other#ResponseAsXml}' )
//def holder1 = groovyUtils.getXmlHolder(response1)
//def holder2 = groovyUtils.getXmlHolder(response2)
//
//def jdbcStringList = []
//def restStringList = []
//def x = 0 as int
//def y = 0 as int
//def fail = 0 as int
//
//// loop item nodes in response message
//for( jdbcResults in holder1.getNodeValues( '//FACT_ARTICLE.AUTHOR_NAME, //MAX' ))
//{  
//  //log.info 'Item : [$jdbcResults]'
//  jdbcStringList = jdbcStringList + jdbcResults
//}
//
//holder2.namespaces['ns'] = 'http://10.200.0.124/ArticleQueryApi/rest/query/aggregate'
//for( restResponse in holder2.getNodeValues( '//ns:results/ns:e/ns:author_name, //ns:results/ns:e/ns:reach_max'  ))
//{
//  //log.info 'Item : [$restResponse]' 
//  restStringList = restStringList + restResponse
//    if (restResponse in jdbcStringList ) assert true
//    else {
//    	   //alert.showInfoMessage(jdbcStringList[x] + " counts do not match","soapUI Warning !")
//    	   //log.info 'Results from vertica do not match results from articleQueryApi '+ jdbcStringList[x] + " " + restResponse
//    	   log.info 'Entity : ' + jdbcStringList[x]
//        log.info 'Vertica: '+ jdbcStringList[y] + " HBase: " + restResponse
//        verticount = jdbcStringList[y] as Integer
//        hbasecount = restResponse as Integer
//        //log.info verticount
//        //log.info hbasecount
//       if (verticount < hbasecount)
//          {
//             f = ((1 - (verticount/hbasecount)) * 100 )
//             f = f.abs()
//             log.info 'Difference of: ' + new Double(f).round(2) + '%'
//             log.info 'Vertica count is less than HBase count'
//          }
//          else
//             {
//                f = ((1 - (hbasecount/verticount)) * 100 )
//                f = f.abs()
//                log.info 'Difference of: ' + new Double(f).round(2) + '%'
//                log.info 'HBase count is less than Vertica count'
//             }
//       if (f < 2 )
//          {
//             log.info 'PASS'
//          }
//          else
//             {
//                log.info 'FAILED: Percentage is > 2%'
//                fail = fail + 1
//             }
//
//    x = x + 1
//    
//    }
//    y = y + 1
//}
//log.info "Fail count = " + fail
//log.info "request  : >" + jdbcStringList
//log.info "result     : >" + restStringList
//if (failCount>0)
//    {
//       log.info 'Failed : ' + failCount + '  tests failed'
//       assert false : "Test Suite FAILED"
//    }
//    else
//    {
//    	  log.info 'Passed : ' + failCount + '  tests failed'
//    	  assert true: "Test Suite Passed"
//    }]]></script></con:config></con:testStep><con:testStep type="groovy" name="logsToFile" disabled="true"><con:settings/><con:config><script>//The below groovy script step is to capture the soapUI log area.
// "soapUI log" can be replaced with http log, jetty log, script log, error log etc based on the need.
def logArea = com.eviware.soapui.SoapUI.logMonitor.getLogArea( "script log" );
//Below two lines of groovy script is to get the project directory, we will be saving the soapUI log contents on a file in that directory.
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def start = context.expand('${#Global#filestart}')
def end = context.expand('${#Global#fileend}')
def projectPath = groovyUtils.projectPath
def status = context.expand('${#Global#testStatus}') as Integer
if (status > 0)
   {
   	def fail = context.expand('${#Global#fail}') as String
   	//log.info fail
   	def logFile = new File(projectPath + "\\" + fail + "_soapUI-Logs-to-file_" + start +"_to_" + end + ".txt")
   	def accountName = ("Account Name: " + context.expand('${#Global#itcAccountName}') + "\r\n") as String
     def accountId = ("Account ID  : " + context.expand('${#Global#itcAccountId}') + "\r\n") as String
     def userName = ("Username    : " + context.expand('${#Global#itcUsername}')  + "\r\n") as String
     def password = ("Password    : " + context.expand('${#Global#itcPassword}')  + "\r\n") as String
     def topicId =  ("Topic ID    : " + context.expand('${#Global#itctopicid}') + "\r\n") as String
     def sqlStart =  ("Start Time  : " + context.expand('${#Global#querysqlstart}') + "\r\n") as String
     def sqlEnd =  ("End Time    : " + context.expand('${#Global#querysqlend}') + "\r\n") as String

     logFile.write("soapUI Logs In a file.\r\n" + accountName + accountId + userName + password + topicId + sqlStart + sqlEnd)
        if( logArea !=null )
        {
           def model = logArea.model
           if( model.size > 0 )            
              for( c in 0..(model.size-1) )         
                logFile.append(model.getElementAt( c ).toString() + "\r\n")
        }
   }
   else
      {
   	   def pass = context.expand('${#Global#pass}') as String
   	   //log.info pass
   	   def logFile = new File(projectPath + "\\" + pass + "_soapUI-Logs-to-file_" + start +"_to_" + end + ".txt")
   	   def accountName = ("Account Name: " + context.expand('${#Global#itcAccountName}') + "\r\n") as String
        def accountId = ("Account ID  : " + context.expand('${#Global#itcAccountId}') + "\r\n") as String
        def userName = ("Username    : " + context.expand('${#Global#itcUsername}')  + "\r\n") as String
        def password = ("Password    : " + context.expand('${#Global#itcPassword}')  + "\r\n") as String
        def topicId =  ("Topic ID    : " + context.expand('${#Global#itctopicid}') + "\r\n") as String
        def sqlStart =  ("Start Time  : " + context.expand('${#Global#querysqlstart}') + "\r\n") as String
        def sqlEnd =  ("End Time    : " + context.expand('${#Global#querysqlend}') + "\r\n") as String

        logFile.write("soapUI Logs In a file.\r\n" + accountName + accountId + userName + password + topicId + sqlStart + sqlEnd)
           if( logArea !=null )
           {
              def model = logArea.model
              if( model.size > 0 )            
                 for( c in 0..(model.size-1) )         
                   logFile.append(model.getElementAt( c ).toString() + "\r\n")       
           }
      }

////This is the first line in the soapUI log file.
//def accountName = ("Account Name: " + context.expand('${#Global#itcAccountName}') + "\r\n") as String
//def accountId = ("Account ID  : " + context.expand('${#Global#itcAccountId}') + "\r\n") as String
//def userName = ("Username    : " + context.expand('${#Global#itcUsername}')  + "\r\n") as String
//def password = ("Password    : " + context.expand('${#Global#itcPassword}')  + "\r\n") as String
//def topicId =  ("Topic ID    : " + context.expand('${#Global#itctopicid}') + "\r\n") as String
//def sqlStart =  ("Start Time  : " + context.expand('${#Global#querysqlstart}') + "\r\n") as String
//def sqlEnd =  ("End Time    : " + context.expand('${#Global#querysqlend}') + "\r\n") as String
//
//logFile.write("soapUI Logs In a file.\r\n" + accountName + accountId + userName + password + topicId + sqlStart + sqlEnd)
//   if( logArea !=null )
//   {
//      def model = logArea.model
//      if( model.size > 0 )            
//         for( c in 0..(model.size-1) )         
//           logFile.append(model.getElementAt( c ).toString() + "\r\n")       
//      
//   }</script></con:config></con:testStep><con:properties/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="AggregateKlout" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="2f3bd050-3e3b-44b7-bfd0-3e99197f910d" disabled="true"><con:settings/><con:testStep type="groovy" name="settime" disabled="true"><con:settings/><con:config><script>Calendar sod = Calendar.instance
    sod.set(Calendar.AM_PM, 0)
    sod.set(Calendar.HOUR, 0)
    sod.set(Calendar.MINUTE, 0)
    sod.set(Calendar.SECOND, 0)
    sod.set(Calendar.MILLISECOND, 0)
start = sod.time 
sqlstart = start.format('MM-dd-yy HH:mm:ss')
//log.info "SQL Start Time:  " + sqlstart
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "querysqlstart", sqlstart )

Calendar eod = Calendar.instance
    eod.set(Calendar.AM_PM, 0)
    eod.set(Calendar.HOUR, 9)
    eod.set(Calendar.MINUTE, 59)
    eod.set(Calendar.SECOND, 59)
    eod.set(Calendar.MILLISECOND, 999)
end = eod.time 
sqlend = end.format('MM-dd-yy HH:mm:ss')
//log.info "SQL End Time:  " + sqlend
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "querysqlend", sqlend )

offset = sod.get(Calendar.ZONE_OFFSET) + sod.get(Calendar.DST_OFFSET) / (60 * 1000)

starttime = start.time
epochstart = starttime + offset
//log.info "Epoch Start Time:  " + epochstart
def epochstart = epochstart as String
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "queryepochstart", epochstart )
def timestampstart = epochstart as Long
Date tss = new Date(timestampstart)
//log.info "Time to select in local timezone:  "+ tss

endtime = end.time
epochend = endtime + offset
//log.info "Epoch End Time:  " + epochend
def epochend = epochend as String
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "queryepochend", epochend )
def timestampend = epochend as Long
Date tse = new Date(timestampend)
//log.info "Time to select in local timezone:  "+ tse

now = Calendar.instance
today = now.time
millis = today.time
//log.info "Current time in milli-seconds:  " + millis
def today = new Date (millis)
//log.info "Current Local Time:  "+ today
tf = today.format('MM dd yy HH mm ss')
//log.info "Current Local Time nicely formatted:  "+ tf
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "time", tf )</script></con:config></con:testStep><con:testStep type="restrequest" name="authuser"><con:settings/><con:config service="ARTSA - UserManager" resourcePath="/SaasCoreUserManager/rest/auth" methodName="POST - authenticate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="authuser" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="authkey" value="1189377229352574419-2213262129298445271-4936701685398756970-61" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://10.200.0.124:8080</con:endpoint><con:request>{
  "username":${#Global#userUsername},
  "password":${#Global#useroriginalpassword},
  "accountName":${#Global#userAccountName}
}</con:request><con:assertion type="XPath Match" name="XPath Match"><con:configuration><path>declare namespace soap='http://schemas.xmlsoap.org/soap/envelope/';
declare namespace ns1='http://10.200.0.124/SaasCoreUserManager/rest/auth';
//ns1:loginFailed</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="authResponse"><con:settings/><con:config><script>import groovy.json.JsonSlurper
import com.eviware.soapui.impl.wsdl.teststeps.*

responseContent = testRunner.testCase.getTestStepByName("authuser").getPropertyValue("response")
slurperresponse = new JsonSlurper().parseText(responseContent)

accountid = (slurperresponse.account)
def accountid = accountid as String
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "accountid", accountid )

accountname = (slurperresponse.accountName)
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "accountName", accountname )

authkey = (slurperresponse.authkey)
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "authkey", authkey )

userid = (slurperresponse.id)
def userid = userid as String
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "userid", userid )

username = (slurperresponse.username)
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "userName", username )

//log.info accountid
//log.info accountname
//log.info authkey
//log.info userid
//log.info username</script></con:config></con:testStep><con:testStep type="groovy" name="setutokenheader"><con:settings/><con:config><script>import com.eviware.soapui.impl.wsdl.teststeps.*
import com.eviware.soapui.support.types.StringToStringMap;

def authkey = com.eviware.soapui.SoapUI.globalProperties.getPropertyValue( "authkey")
def tc = testRunner.testCase.testSuite.getTestCaseByName("AggregateKlout")
def ts11 = tc.getTestStepByName("Summary102Klout")


def headers = new StringToStringMap()
headers.putIfMissing("utoken",authkey)

ts11.getHttpRequest().setRequestHeaders(headers)</script></con:config></con:testStep><con:testStep type="groovy" name="initialize_jdbc_driver"><con:settings/><con:config><script>com.eviware.soapui.support.GroovyUtils.registerJdbcDriver("vertica.jdbc.driver.vertica")</script></con:config></con:testStep><con:testStep type="restrequest" name="Summary102Klout"><con:settings/><con:config service="ARTSA  - Article Query" resourcePath="/ArticleQueryApi/rest/query/aggregate" methodName="POST - getAggregateData" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Summary102Klout" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="utoken" value="-1724402994651259286--5734294075650366013-7119805912162655503-1001" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://10.200.0.124:8080</con:endpoint><con:request>{
  "topicIDs":[${#Global#topicid}],
  "limit":10,
 "selectedFields":[
   {"field":"klout_max()","sortDirection":"DESCENDING"},
   {"field":"followers_max()"},
   {"field":"status_updates_max()"},
   {"field":"article_publisher"},
   {"field":"article_screen_name"},
   {"field":"article_content_subtype"},
   {"field":"author_name"},
   {"field":"author_image_url"},
   {"field":"article_uri_max()"}
 ],
 "filters":[
   {"field":"article_content_subtype","comparison":"EQ","values":["twitter"]}
 ],
  "dateRange":{"startDate":${#Global#queryepochstart},"endDate":${#Global#queryepochend}}
}</con:request><con:assertion type="XPath Match" name="assert_article_details"><con:configuration><path>declare namespace soap='http://schemas.xmlsoap.org/soap/envelope/';
declare namespace ns1='http://10.200.0.124/ArticleQueryApi/rest/query/aggregate';
//ns1:e</path><content>*</content><allowWildcards>true</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="jdbc" name="SummaryKloutVertica"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>com.vertica.Driver</con:driver><con:connectionString>jdbc:vertica://10.200.0.190:5433/artsa01?user=artsa01&amp;password=artsa2</con:connectionString><con:query>SELECT DISTINCT(fa.author_name), max(fa.klout)
FROM fact_article fa
INNER JOIN (
	SELECT pipeline_topic_id, article_id, publish_at, publish_at_week
	FROM topic_article ta
	WHERE pipeline_topic_id IN (${#Global#topicid})
	AND ta.publish_at BETWEEN '${#Global#querysqlstart}' AND '${#Global#querysqlend}'
	  ) ta  ON ta.article_id=fa.id
AND ta.publish_at_week=fa.publish_at_week
WHERE  ta.pipeline_topic_id IN (${#Global#topicid})
GROUP BY fa.author_name
ORDER BY max(fa.klout) DESC LIMIT 10;</con:query><con:properties/></con:config></con:testStep><con:testStep type="groovy" name="compareResultsKlout"><con:settings/><con:config><script><![CDATA[// create groovyUtils and XmlHolder for response of Request
def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
def alert = com.eviware.soapui.support.UISupport;
def response1 = context.expand( 'SummaryKloutVertica#ResponseAsXml' )
def response2 = context.expand( '${Summary102Klout#ResponseAsXml}' )
def holder1 = groovyUtils.getXmlHolder(response1)
def holder2 = groovyUtils.getXmlHolder(response2)

log.info "*************************************************************"
log.info "   Begin test for : " + context.getCurrentStep().getLabel()
log.info "*************************************************************"

// loop item nodes in Vertica response message
def jdbcMap = [:];
def jdbcEntityTypeArr = holder1.getNodeValues( '//FACT_ARTICLE.AUTHOR_NAME' )
def jdbcEntityVolumeArr = holder1.getNodeValues( '//MAX' )
for( int z=0; z<jdbcEntityTypeArr.length; z++) {  
	jdbcMap.put(jdbcEntityTypeArr[z],jdbcEntityVolumeArr[z]);
}
//log.info jdbcMap

// loop item nodes in REST response message
def restMap = [:];
holder2.namespaces['ns'] = 'http://10.200.0.124/ArticleQueryApi/rest/query/aggregate'
def restEntityTypeArr = holder2.getNodeValues( '//ns:results/ns:e/ns:author_name'  )
def restEntityVolumeArr = holder2.getNodeValues( '//ns:results/ns:e/ns:klout_max'  )
for( int z=0; z<restEntityTypeArr.length; z++) {  
	restMap.put(restEntityTypeArr[z],restEntityVolumeArr[z]);
}
//log.info restMap

class CompRes {
	def jdbcKey;
	def jdbcValue;
	def restValue;
  CompRes(jdbcKey1, jdbcValue1, restValue1) {
  	jdbcKey = jdbcKey1;
  	jdbcValue = jdbcValue1;
  	restValue = restValue1;
  }
  def fail() {
  	if(jdbcValue == null || restValue == null) {
  		return -1;
  	}
  	def f;
//  	if ((jdbcValue.toInteger() < 100 || restValue.toInteger() < 100) && (jdbcValue.toInteger()-restValue.toInteger() > 2 || restValue.toInteger()-jdbcValue.toInteger() > 2))
//  	{
//  		return -1;
//  	}
//  	else {
//  		return 0;
//  	}
     if (jdbcValue.toInteger() < restValue.toInteger())
     {
        f = ((1 - (jdbcValue.toInteger()/restValue.toInteger())) * 100 )
        f = f.abs()
     }
     else
     {
        f = ((1 - (restValue.toInteger()/jdbcValue.toInteger())) * 100 )
        f = f.abs()
     }
	if(f > 2) {
		return new Double(f).round(2);
	}
	return 0;
  }
}

def comparisonResults = [];
for(j in jdbcMap) {
	def jdbcKey = j.key;
	def jdbcValue = j.value;
	def restValue = restMap.get(jdbcKey);
	if(restValue == null || restValue != jdbcValue) {
		def comparisonResult = new CompRes(jdbcKey, jdbcValue, restValue);
		comparisonResults.add(comparisonResult);
	}
}
for(r in restMap) {
	def restKey = r.key;
	def restValue = r.value;
	def jdbcValue = jdbcMap.get(restKey);
	if(jdbcValue == null) {
		def comparisonResult = new CompRes(restKey, null, restValue);
		comparisonResults.add(comparisonResult);
	}
}
def failCount = 0;
for(item in comparisonResults) {
	def fail = item.fail();
	if(fail == -1) {
		log.info((++failCount) + ": " + item.jdbcKey + "-" + item.jdbcValue + "-" + item.restValue);
	} else if(fail > 0) {
		log.info((++failCount) + ": " + item.jdbcKey + "-" + item.jdbcValue + "-" + item.restValue + " --- PERCENT: " + fail);
	} else {
//		log.info(item.jdbcKey + "-" + item.jdbcValue + "-" + item.restValue);
	}
}

if (failCount>0)
    {
       log.info 'Vertica Results    : ' + jdbcMap
       log.info 'Pavi_Test Results: ' + restMap
       log.info 'FAILED : ' + failCount + '  tests failed'
       log.info "*************************************************************"
       log.info "   End test for : " + context.getCurrentStep().getLabel()
       log.info "*************************************************************"
       testStatus = "1"
       com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "testStatus", testStatus )
       assert false : "Test Suite FAILED"
    }
    else
    {
    	  log.info 'PASSED : ' + failCount + '  tests failed'
    	  log.info "*************************************************************"
    	  log.info "   End test for : " + context.getCurrentStep().getLabel()
       log.info "*************************************************************"
       
       assert true: "Test Suite Passed"
    }

//// create groovyUtils and XmlHolder for response of Request
//def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
//def alert = com.eviware.soapui.support.UISupport;
//def response1 = context.expand( 'SummaryKloutVertica#ResponseAsXml' )
//def response2 = context.expand( '${Summary102Klout#ResponseAsXml}' )
//def holder1 = groovyUtils.getXmlHolder(response1)
//def holder2 = groovyUtils.getXmlHolder(response2)
//
//def jdbcStringList = []
//def restStringList = []
//def x = 0 as int
//def y = 0 as int
//def fail = 0 as int
//
//// loop item nodes in response message
//for( jdbcResults in holder1.getNodeValues( '//FACT_ARTICLE.AUTHOR_NAME, //MAX' ))
//{  
//  //log.info 'Item : [$jdbcResults]'
//  jdbcStringList = jdbcStringList + jdbcResults
//}
//
//holder2.namespaces['ns'] = 'http://10.200.0.124/ArticleQueryApi/rest/query/aggregate'
//for( restResponse in holder2.getNodeValues( '//ns:results/ns:e/ns:author_name, //ns:results/ns:e/ns:klout_max'  ))
//{
//  //log.info 'Item : [$restResponse]' 
//  restStringList = restStringList + restResponse
//    if (restResponse in jdbcStringList ) assert true
//    else {
//    	   //alert.showInfoMessage(jdbcStringList[x] + " counts do not match","soapUI Warning !")
//    	   //log.info 'Results from vertica do not match results from articleQueryApi '+ jdbcStringList[x] + " " + restResponse
//    	   log.info 'Entity : ' + jdbcStringList[x]
//        log.info 'Vertica: '+ jdbcStringList[y] + " HBase: " + restResponse
//        verticount = jdbcStringList[y] as Integer
//        hbasecount = restResponse as Integer
//        //log.info verticount
//        //log.info hbasecount
//       if (verticount < hbasecount)
//          {
//             f = ((1 - (verticount/hbasecount)) * 100 )
//             f = f.abs()
//             log.info 'Difference of: ' + new Double(f).round(2) + '%'
//             log.info 'Vertica count is less than HBase count'
//          }
//          else
//             {
//                f = ((1 - (hbasecount/verticount)) * 100 )
//                f = f.abs()
//                log.info 'Difference of: ' + new Double(f).round(2) + '%'
//                log.info 'HBase count is less than Vertica count'
//             }
//       if (f < 2 )
//          {
//             log.info 'PASS'
//          }
//          else
//             {
//                log.info 'FAILED: Percentage is > 2%'
//                fail = fail + 1
//             }
//
//    x = x + 1
//    
//    }
//    y = y + 1
//}
//log.info "Fail count = " + fail
//log.info "request  : >" + jdbcStringList
//log.info "result     : >" + restStringList
//if (fail>0)
//    {
//       assert false : "Percentage is greater than 2%"
//    }]]></script></con:config></con:testStep><con:testStep type="groovy" name="logsToFile" disabled="true"><con:settings/><con:config><script>//The below groovy script step is to capture the soapUI log area.
// "soapUI log" can be replaced with http log, jetty log, script log, error log etc based on the need.
def logArea = com.eviware.soapui.SoapUI.logMonitor.getLogArea( "script log" );
//Below two lines of groovy script is to get the project directory, we will be saving the soapUI log contents on a file in that directory.
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def start = context.expand('${#Global#filestart}')
def end = context.expand('${#Global#fileend}')
def projectPath = groovyUtils.projectPath
def status = context.expand('${#Global#testStatus}') as Integer
if (status > 0)
   {
   	def fail = context.expand('${#Global#fail}') as String
   	//log.info fail
   	def logFile = new File(projectPath + "\\" + fail + "_soapUI-Logs-to-file_" + start +"_to_" + end + ".txt")
   	def accountName = ("Account Name: " + context.expand('${#Global#itcAccountName}') + "\r\n") as String
     def accountId = ("Account ID  : " + context.expand('${#Global#itcAccountId}') + "\r\n") as String
     def userName = ("Username    : " + context.expand('${#Global#itcUsername}')  + "\r\n") as String
     def password = ("Password    : " + context.expand('${#Global#itcPassword}')  + "\r\n") as String
     def topicId =  ("Topic ID    : " + context.expand('${#Global#itctopicid}') + "\r\n") as String
     def sqlStart =  ("Start Time  : " + context.expand('${#Global#querysqlstart}') + "\r\n") as String
     def sqlEnd =  ("End Time    : " + context.expand('${#Global#querysqlend}') + "\r\n") as String

     logFile.write("soapUI Logs In a file.\r\n" + accountName + accountId + userName + password + topicId + sqlStart + sqlEnd)
        if( logArea !=null )
        {
           def model = logArea.model
           if( model.size > 0 )            
              for( c in 0..(model.size-1) )         
                logFile.append(model.getElementAt( c ).toString() + "\r\n")
        }
   }
   else
      {
   	   def pass = context.expand('${#Global#pass}') as String
   	   //log.info pass
   	   def logFile = new File(projectPath + "\\" + pass + "_soapUI-Logs-to-file_" + start +"_to_" + end + ".txt")
   	   def accountName = ("Account Name: " + context.expand('${#Global#itcAccountName}') + "\r\n") as String
        def accountId = ("Account ID  : " + context.expand('${#Global#itcAccountId}') + "\r\n") as String
        def userName = ("Username    : " + context.expand('${#Global#itcUsername}')  + "\r\n") as String
        def password = ("Password    : " + context.expand('${#Global#itcPassword}')  + "\r\n") as String
        def topicId =  ("Topic ID    : " + context.expand('${#Global#itctopicid}') + "\r\n") as String
        def sqlStart =  ("Start Time  : " + context.expand('${#Global#querysqlstart}') + "\r\n") as String
        def sqlEnd =  ("End Time    : " + context.expand('${#Global#querysqlend}') + "\r\n") as String

        logFile.write("soapUI Logs In a file.\r\n" + accountName + accountId + userName + password + topicId + sqlStart + sqlEnd)
           if( logArea !=null )
           {
              def model = logArea.model
              if( model.size > 0 )            
                 for( c in 0..(model.size-1) )         
                   logFile.append(model.getElementAt( c ).toString() + "\r\n")       
           }
      }

////This is the first line in the soapUI log file.
//def accountName = ("Account Name: " + context.expand('${#Global#itcAccountName}') + "\r\n") as String
//def accountId = ("Account ID  : " + context.expand('${#Global#itcAccountId}') + "\r\n") as String
//def userName = ("Username    : " + context.expand('${#Global#itcUsername}')  + "\r\n") as String
//def password = ("Password    : " + context.expand('${#Global#itcPassword}')  + "\r\n") as String
//def topicId =  ("Topic ID    : " + context.expand('${#Global#itctopicid}') + "\r\n") as String
//def sqlStart =  ("Start Time  : " + context.expand('${#Global#querysqlstart}') + "\r\n") as String
//def sqlEnd =  ("End Time    : " + context.expand('${#Global#querysqlend}') + "\r\n") as String
//
//logFile.write("soapUI Logs In a file.\r\n" + accountName + accountId + userName + password + topicId + sqlStart + sqlEnd)
//   if( logArea !=null )
//   {
//      def model = logArea.model
//      if( model.size > 0 )            
//         for( c in 0..(model.size-1) )         
//           logFile.append(model.getElementAt( c ).toString() + "\r\n")       
//      
//   }</script></con:config></con:testStep><con:properties/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="AggregateTweets" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="9abed21a-a375-4ca1-8731-111e5bd47287" disabled="true"><con:settings/><con:testStep type="groovy" name="settime" disabled="true"><con:settings/><con:config><script>Calendar sod = Calendar.instance
    sod.set(Calendar.AM_PM, 0)
    sod.set(Calendar.HOUR, 0)
    sod.set(Calendar.MINUTE, 0)
    sod.set(Calendar.SECOND, 0)
    sod.set(Calendar.MILLISECOND, 0)
start = sod.time 
sqlstart = start.format('MM-dd-yy HH:mm:ss')
//log.info "SQL Start Time:  " + sqlstart
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "querysqlstart", sqlstart )

Calendar eod = Calendar.instance
    eod.set(Calendar.AM_PM, 0)
    eod.set(Calendar.HOUR, 9)
    eod.set(Calendar.MINUTE, 59)
    eod.set(Calendar.SECOND, 59)
    eod.set(Calendar.MILLISECOND, 999)
end = eod.time 
sqlend = end.format('MM-dd-yy HH:mm:ss')
//log.info "SQL End Time:  " + sqlend
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "querysqlend", sqlend )

offset = sod.get(Calendar.ZONE_OFFSET) + sod.get(Calendar.DST_OFFSET) / (60 * 1000)

starttime = start.time
epochstart = starttime + offset
//log.info "Epoch Start Time:  " + epochstart
def epochstart = epochstart as String
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "queryepochstart", epochstart )
def timestampstart = epochstart as Long
Date tss = new Date(timestampstart)
//log.info "Time to select in local timezone:  "+ tss

endtime = end.time
epochend = endtime + offset
//log.info "Epoch End Time:  " + epochend
def epochend = epochend as String
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "queryepochend", epochend )
def timestampend = epochend as Long
Date tse = new Date(timestampend)
//log.info "Time to select in local timezone:  "+ tse

now = Calendar.instance
today = now.time
millis = today.time
//log.info "Current time in milli-seconds:  " + millis
def today = new Date (millis)
//log.info "Current Local Time:  "+ today
tf = today.format('MM dd yy HH mm ss')
//log.info "Current Local Time nicely formatted:  "+ tf
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "time", tf )</script></con:config></con:testStep><con:testStep type="restrequest" name="authuser"><con:settings/><con:config service="ARTSA - UserManager" resourcePath="/SaasCoreUserManager/rest/auth" methodName="POST - authenticate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="authuser" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="authkey" value="1189377229352574419-2213262129298445271-4936701685398756970-61" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://10.200.0.124:8080</con:endpoint><con:request>{
  "username":${#Global#userUsername},
  "password":${#Global#useroriginalpassword},
  "accountName":${#Global#userAccountName}
}</con:request><con:assertion type="XPath Match" name="XPath Match"><con:configuration><path>declare namespace soap='http://schemas.xmlsoap.org/soap/envelope/';
declare namespace ns1='http://10.200.0.124/SaasCoreUserManager/rest/auth';
//ns1:loginFailed</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="authResponse"><con:settings/><con:config><script>import groovy.json.JsonSlurper
import com.eviware.soapui.impl.wsdl.teststeps.*

responseContent = testRunner.testCase.getTestStepByName("authuser").getPropertyValue("response")
slurperresponse = new JsonSlurper().parseText(responseContent)

accountid = (slurperresponse.account)
def accountid = accountid as String
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "accountid", accountid )

accountname = (slurperresponse.accountName)
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "accountName", accountname )

authkey = (slurperresponse.authkey)
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "authkey", authkey )

userid = (slurperresponse.id)
def userid = userid as String
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "userid", userid )

username = (slurperresponse.username)
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "userName", username )

//log.info accountid
//log.info accountname
//log.info authkey
//log.info userid
//log.info username</script></con:config></con:testStep><con:testStep type="groovy" name="setutokenheader"><con:settings/><con:config><script>import com.eviware.soapui.impl.wsdl.teststeps.*
import com.eviware.soapui.support.types.StringToStringMap;

def authkey = com.eviware.soapui.SoapUI.globalProperties.getPropertyValue( "authkey")
def tc = testRunner.testCase.testSuite.getTestCaseByName("AggregateTweets")
def ts11 = tc.getTestStepByName("Summary103Tweets")


def headers = new StringToStringMap()
headers.putIfMissing("utoken",authkey)

ts11.getHttpRequest().setRequestHeaders(headers)</script></con:config></con:testStep><con:testStep type="groovy" name="initialize_jdbc_driver"><con:settings/><con:config><script>com.eviware.soapui.support.GroovyUtils.registerJdbcDriver("vertica.jdbc.driver.vertica")</script></con:config></con:testStep><con:testStep type="restrequest" name="Summary103Tweets"><con:settings/><con:config service="ARTSA  - Article Query" resourcePath="/ArticleQueryApi/rest/query/aggregate" methodName="POST - getAggregateData" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Summary103Tweets" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="utoken" value="-2789232991497226535--1886904863947599772--9042855015155337543-1001" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://10.200.0.124:8080</con:endpoint><con:request>{
  "topicIDs":[${#Global#topicid}],
  "limit":10,
 "selectedFields":[
   {"field":"status_updates_max()","sortDirection":"DESCENDING"},
   {"field":"klout_max()"},
   {"field":"followers_max()"},
   {"field":"article_publisher"},
   {"field":"article_screen_name"},
   {"field":"article_content_subtype"},
   {"field":"author_name"},
   {"field":"author_image_url"},
   {"field":"article_uri_max()"}
 ],
 "filters":[
   {"field":"article_content_subtype","comparison":"EQ","values":["twitter"]}
 ],
  "dateRange":{"startDate":${#Global#queryepochstart},"endDate":${#Global#queryepochend}}
}</con:request><con:assertion type="XPath Match" name="assert_article_details"><con:configuration><path>declare namespace soap='http://schemas.xmlsoap.org/soap/envelope/';
declare namespace ns1='http://10.200.0.124/ArticleQueryApi/rest/query/aggregate';
//ns1:e</path><content>*</content><allowWildcards>true</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="jdbc" name="SummaryTweetsVertica"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>com.vertica.Driver</con:driver><con:connectionString>jdbc:vertica://10.200.0.190:5433/artsa01?user=artsa01&amp;password=artsa2</con:connectionString><con:query>SELECT DISTINCT(fa.author_name), max(fa.status_updates)
FROM fact_article fa
INNER JOIN (
	SELECT pipeline_topic_id, article_id, publish_at, publish_at_week
	FROM topic_article ta
	WHERE pipeline_topic_id IN (${#Global#topicid})
	AND ta.publish_at BETWEEN '${#Global#querysqlstart}' AND '${#Global#querysqlend}'
	  ) ta  ON ta.article_id=fa.id
AND ta.publish_at_week=fa.publish_at_week
WHERE  ta.pipeline_topic_id IN (${#Global#topicid})
GROUP BY fa.author_name
ORDER BY max(fa.status_updates) DESC LIMIT 10;</con:query><con:properties/></con:config></con:testStep><con:testStep type="groovy" name="compareResultsTweets"><con:settings/><con:config><script><![CDATA[// create groovyUtils and XmlHolder for response of Request
def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
def alert = com.eviware.soapui.support.UISupport;
def response1 = context.expand( 'SummaryTweetsVertica#ResponseAsXml' )
def response2 = context.expand( '${Summary103Tweets#ResponseAsXml}' )
def holder1 = groovyUtils.getXmlHolder(response1)
def holder2 = groovyUtils.getXmlHolder(response2)

log.info "*************************************************************"
log.info "   Begin test for : " + context.getCurrentStep().getLabel()
log.info "*************************************************************"

// loop item nodes in Vertica response message
def jdbcMap = [:];
def jdbcEntityTypeArr = holder1.getNodeValues( '//FACT_ARTICLE.AUTHOR_NAME' )
def jdbcEntityVolumeArr = holder1.getNodeValues( '//MAX' )
for( int z=0; z<jdbcEntityTypeArr.length; z++) {  
	jdbcMap.put(jdbcEntityTypeArr[z],jdbcEntityVolumeArr[z]);
}
//log.info jdbcMap

// loop item nodes in REST response message
def restMap = [:];
holder2.namespaces['ns'] = 'http://10.200.0.124/ArticleQueryApi/rest/query/aggregate'
def restEntityTypeArr = holder2.getNodeValues( '//ns:results/ns:e/ns:author_name'  )
def restEntityVolumeArr = holder2.getNodeValues( '//ns:results/ns:e/ns:status_updates_max'  )
for( int z=0; z<restEntityTypeArr.length; z++) {  
	restMap.put(restEntityTypeArr[z],restEntityVolumeArr[z]);
}
//log.info restMap

class CompRes {
	def jdbcKey;
	def jdbcValue;
	def restValue;
  CompRes(jdbcKey1, jdbcValue1, restValue1) {
  	jdbcKey = jdbcKey1;
  	jdbcValue = jdbcValue1;
  	restValue = restValue1;
  }
  def fail() {
  	if(jdbcValue == null || restValue == null) {
  		return -1;
  	}
  	def f;
//  	if ((jdbcValue.toInteger() < 100 || restValue.toInteger() < 100) && (jdbcValue.toInteger()-restValue.toInteger() > 2 || restValue.toInteger()-jdbcValue.toInteger() > 2))
//  	{
//  		return -1;
//  	}
//  	else {
//  		return 0;
//  	}
     if (jdbcValue.toInteger() < restValue.toInteger())
     {
        f = ((1 - (jdbcValue.toInteger()/restValue.toInteger())) * 100 )
        f = f.abs()
     }
     else
     {
        f = ((1 - (restValue.toInteger()/jdbcValue.toInteger())) * 100 )
        f = f.abs()
     }
	if(f > 2) {
		return new Double(f).round(2);
	}
	return 0;
  }
}

def comparisonResults = [];
for(j in jdbcMap) {
	def jdbcKey = j.key;
	def jdbcValue = j.value;
	def restValue = restMap.get(jdbcKey);
	if(restValue == null || restValue != jdbcValue) {
		def comparisonResult = new CompRes(jdbcKey, jdbcValue, restValue);
		comparisonResults.add(comparisonResult);
	}
}
for(r in restMap) {
	def restKey = r.key;
	def restValue = r.value;
	def jdbcValue = jdbcMap.get(restKey);
	if(jdbcValue == null) {
		def comparisonResult = new CompRes(restKey, null, restValue);
		comparisonResults.add(comparisonResult);
	}
}
def failCount = 0;
for(item in comparisonResults) {
	def fail = item.fail();
	if(fail == -1) {
		log.info((++failCount) + ": " + item.jdbcKey + "-" + item.jdbcValue + "-" + item.restValue);
	} else if(fail > 0) {
		log.info((++failCount) + ": " + item.jdbcKey + "-" + item.jdbcValue + "-" + item.restValue + " --- PERCENT: " + fail);
	} else {
//		log.info(item.jdbcKey + "-" + item.jdbcValue + "-" + item.restValue);
	}
}

if (failCount>0)
    {
       log.info 'Vertica Results    : ' + jdbcMap
       log.info 'Pavi_Test Results: ' + restMap
       log.info 'FAILED : ' + failCount + '  tests failed'
       log.info "*************************************************************"
       log.info "   End test for : " + context.getCurrentStep().getLabel()
       log.info "*************************************************************"
       testStatus = "1"
       com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "testStatus", testStatus )
       assert false : "Test Suite FAILED"
    }
    else
    {
    	  log.info 'PASSED : ' + failCount + '  tests failed'
    	  log.info "*************************************************************"
    	  log.info "   End test for : " + context.getCurrentStep().getLabel()
       log.info "*************************************************************"
       
       assert true: "Test Suite Passed"
    }

//// create groovyUtils and XmlHolder for response of Request
//def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
//def alert = com.eviware.soapui.support.UISupport;
//def response1 = context.expand( 'SummaryTweetsVertica#ResponseAsXml' )
//def response2 = context.expand( '${Summary103Tweets#ResponseAsXml}' )
//def holder1 = groovyUtils.getXmlHolder(response1)
//def holder2 = groovyUtils.getXmlHolder(response2)
//
//def jdbcStringList = []
//def restStringList = []
//def x = 0 as int
//def y = 0 as int
//def fail = 0 as int
//
//// loop item nodes in response message
//for( jdbcResults in holder1.getNodeValues( '//FACT_ARTICLE.AUTHOR_NAME, //MAX' ))
//{  
//  //log.info 'Item : [$jdbcResults]'
//  jdbcStringList = jdbcStringList + jdbcResults
//}
//
//holder2.namespaces['ns'] = 'http://10.200.0.124/ArticleQueryApi/rest/query/aggregate'
//for( restResponse in holder2.getNodeValues( '//ns:results/ns:e/ns:author_name, //ns:results/ns:e/ns:status_updates_max'  ))
//{
//  //log.info 'Item : [$restResponse]' 
//  restStringList = restStringList + restResponse
//    if (restResponse in jdbcStringList ) assert true
//    else {
//    	   //alert.showInfoMessage(jdbcStringList[x] + " counts do not match","soapUI Warning !")
//    	   //log.info 'Results from vertica do not match results from articleQueryApi '+ jdbcStringList[x] + " " + restResponse
//    	   log.info 'Entity : ' + jdbcStringList[x]
//        log.info 'Vertica: '+ jdbcStringList[y] + " HBase: " + restResponse
//        verticount = jdbcStringList[y] as Integer
//        hbasecount = restResponse as Integer
//        //log.info verticount
//        //log.info hbasecount
//       if (verticount < hbasecount)
//          {
//             f = ((1 - (verticount/hbasecount)) * 100 )
//             f = f.abs()
//             log.info 'Difference of: ' + new Double(f).round(2) + '%'
//             log.info 'Vertica count is less than HBase count'
//          }
//          else
//             {
//                f = ((1 - (hbasecount/verticount)) * 100 )
//                f = f.abs()
//                log.info 'Difference of: ' + new Double(f).round(2) + '%'
//                log.info 'HBase count is less than Vertica count'
//             }
//       if (f < 2 )
//          {
//             log.info 'PASS'
//          }
//          else
//             {
//                log.info 'FAILED: Percentage is > 2%'
//                fail = fail + 1
//             }
//
//    x = x + 1
//    
//    }
//    y = y + 1
//}
//log.info "Fail count = " + fail
//log.info "request  : >" + jdbcStringList
//log.info "result     : >" + restStringList
//if (fail>0)
//    {
//       assert false : "Percentage is greater than 2%"
//    }]]></script></con:config></con:testStep><con:properties/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="resultsToLogFile" searchProperties="true" id="92b67d2e-26b9-44a4-bd2c-7fddade23b33"><con:settings/><con:testStep type="groovy" name="endTest"><con:settings/><con:config><script>def status = context.expand('${#Global#testStatus}') as Integer
if (status > 0)
{
	def fail = "FAIL" as String
	
	com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "fail", fail )
	log.info fail
}
else{
	def pass = "PASS" as String
	com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "pass", pass )
     log.info pass
}

log.info 'Tests Complete'</script></con:config></con:testStep><con:testStep type="jdbc" name="Final"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>com.vertica.Driver</con:driver><con:connectionString>jdbc:vertica://10.200.0.190:5433/artsa01?user=artsa01&amp;password=artsa2</con:connectionString><con:query>SELECT DISTINCT(fa.author_name), max(fa.reach)
FROM fact_article fa
INNER JOIN (
	SELECT pipeline_topic_id, article_id, publish_at, publish_at_week
	FROM topic_article ta
	WHERE pipeline_topic_id IN (${#Global#topicid})
	AND ta.publish_at BETWEEN '${#Global#querysqlstart}' AND '${#Global#querysqlend}'
	  ) ta  ON ta.article_id=fa.id
AND ta.publish_at_week=fa.publish_at_week
WHERE  ta.pipeline_topic_id IN (${#Global#topicid})
GROUP BY fa.author_name
ORDER BY max(fa.reach) DESC LIMIT 10;</con:query><con:properties/></con:config></con:testStep><con:testStep type="groovy" name="logsToFile"><con:settings/><con:config><script>//The below groovy script step is to capture the soapUI log area.
// "soapUI log" can be replaced with http log, jetty log, script log, error log etc based on the need.
def logArea = com.eviware.soapui.SoapUI.logMonitor.getLogArea( "script log" );
//Below two lines of groovy script is to get the project directory, we will be saving the soapUI log contents on a file in that directory.
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def start = context.expand('${#Global#filestart}')
def end = context.expand('${#Global#fileend}')
def projectPath = groovyUtils.projectPath
def status = context.expand('${#Global#testStatus}') as Integer
if (status > 0)
   {
   	def fail = context.expand('${#Global#fail}') as String
   	//log.info fail
   	def logFile = new File(projectPath + "\\" + fail + "_soapUI-Logs-to-file_" + start +"_to_" + end + ".txt")
   	def accountName = ("Account Name: " + context.expand('${#Global#userAccountName}') + "\r\n") as String
     def accountId = ("Account ID  : " + context.expand('${#Global#userAccountId}') + "\r\n") as String
     def userName = ("Username    : " + context.expand('${#Global#userUsername}')  + "\r\n") as String
     def password = ("Password    : " + context.expand('${#Global#userOriginalPassword}')  + "\r\n") as String
     def topicId =  ("Topic ID    : " + context.expand('${#Global#topicid}') + "\r\n") as String
     def sqlStart =  ("Start Time  : " + context.expand('${#Global#querysqlstart}') + "\r\n") as String
     def sqlEnd =  ("End Time    : " + context.expand('${#Global#querysqlend}') + "\r\n") as String

     logFile.write("soapUI Logs In a file.\r\n" + accountName + accountId + userName + password + topicId + sqlStart + sqlEnd)
        if( logArea !=null )
        {
           def model = logArea.model
           if( model.size > 0 )            
              for( c in 0..(model.size-1) )         
                logFile.append(model.getElementAt( c ).toString() + "\r\n")
        }
   }
   else
      {
   	   def pass = context.expand('${#Global#pass}') as String
   	   //log.info pass
   	   def logFile = new File(projectPath + "\\" + pass + "_soapUI-Logs-to-file_" + start +"_to_" + end + ".txt")
   	   def accountName = ("Account Name: " + context.expand('${#Global#itcAccountName}') + "\r\n") as String
        def accountId = ("Account ID  : " + context.expand('${#Global#itcAccountId}') + "\r\n") as String
        def userName = ("Username    : " + context.expand('${#Global#itcUsername}')  + "\r\n") as String
        def password = ("Password    : " + context.expand('${#Global#itcPassword}')  + "\r\n") as String
        def topicId =  ("Topic ID    : " + context.expand('${#Global#itctopicid}') + "\r\n") as String
        def sqlStart =  ("Start Time  : " + context.expand('${#Global#querysqlstart}') + "\r\n") as String
        def sqlEnd =  ("End Time    : " + context.expand('${#Global#querysqlend}') + "\r\n") as String

        logFile.write("soapUI Logs In a file.\r\n" + accountName + accountId + userName + password + topicId + sqlStart + sqlEnd)
           if( logArea !=null )
           {
              def model = logArea.model
              if( model.size > 0 )            
                 for( c in 0..(model.size-1) )         
                   logFile.append(model.getElementAt( c ).toString() + "\r\n")       
           }
      }

////This is the first line in the soapUI log file.
//def accountName = ("Account Name: " + context.expand('${#Global#itcAccountName}') + "\r\n") as String
//def accountId = ("Account ID  : " + context.expand('${#Global#itcAccountId}') + "\r\n") as String
//def userName = ("Username    : " + context.expand('${#Global#itcUsername}')  + "\r\n") as String
//def password = ("Password    : " + context.expand('${#Global#itcPassword}')  + "\r\n") as String
//def topicId =  ("Topic ID    : " + context.expand('${#Global#itctopicid}') + "\r\n") as String
//def sqlStart =  ("Start Time  : " + context.expand('${#Global#querysqlstart}') + "\r\n") as String
//def sqlEnd =  ("End Time    : " + context.expand('${#Global#querysqlend}') + "\r\n") as String
//
//logFile.write("soapUI Logs In a file.\r\n" + accountName + accountId + userName + password + topicId + sqlStart + sqlEnd)
//   if( logArea !=null )
//   {
//      def model = logArea.model
//      if( model.size > 0 )            
//         for( c in 0..(model.size-1) )         
//           logFile.append(model.getElementAt( c ).toString() + "\r\n")       
//      
//   }</script></con:config></con:testStep><con:properties/></con:testCase><con:properties><con:property><con:name>Url</con:name><con:value>jdbc:vertica://10.200.0.190:5433/artsa01</con:value></con:property><con:property><con:name>User</con:name><con:value>artsa01</con:value></con:property><con:property><con:name>Pass</con:name><con:value>artsa2</con:value></con:property><con:property><con:name>Driver</con:name><con:value>com.vertica.Driver</con:value></con:property></con:properties></con:testSuite><con:testSuite name="TimeseriesTestSuite"><con:description>TestSuite generated for REST Service [ARTSA  - Article Query]</con:description><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TrendingVolumeMavg" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="e1f9b0f9-889a-4f46-9cb8-e0c7c1fd1a1c"><con:settings/><con:testStep type="groovy" name="settime"><con:settings/><con:config><script>Calendar sod = Calendar.instance
    sod.set(Calendar.AM_PM, 0)
    sod.set(Calendar.HOUR, 0)
    sod.set(Calendar.MINUTE, 0)
    sod.set(Calendar.SECOND, 0)
    sod.set(Calendar.MILLISECOND, 0)
start = sod.time 
sqlstart = start.format('MM-dd-yy HH:mm:ss')
//log.info "SQL Start Time:  " + sqlstart
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "querysqlstart", sqlstart )

Calendar eod = Calendar.instance
    eod.set(Calendar.AM_PM, 0)
    eod.set(Calendar.HOUR, 9)
    eod.set(Calendar.MINUTE, 59)
    eod.set(Calendar.SECOND, 59)
    eod.set(Calendar.MILLISECOND, 999)
end = eod.time 
sqlend = end.format('MM-dd-yy HH:mm:ss')
//log.info "SQL End Time:  " + sqlend
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "querysqlend", sqlend )

offset = sod.get(Calendar.ZONE_OFFSET) + sod.get(Calendar.DST_OFFSET) / (60 * 1000)

starttime = start.time
epochstart = starttime + offset
//log.info "Epoch Start Time:  " + epochstart
def epochstart = epochstart as String
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "queryepochstart", epochstart )
def timestampstart = epochstart as Long
Date tss = new Date(timestampstart)
//log.info "Time to select in local timezone:  "+ tss

endtime = end.time
epochend = endtime + offset
//log.info "Epoch End Time:  " + epochend
def epochend = epochend as String
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "queryepochend", epochend )
def timestampend = epochend as Long
Date tse = new Date(timestampend)
//log.info "Time to select in local timezone:  "+ tse

now = Calendar.instance
today = now.time
millis = today.time
//log.info "Current time in milli-seconds:  " + millis
def today = new Date (millis)
//log.info "Current Local Time:  "+ today
tf = today.format('MM dd yy HH mm ss')
//log.info "Current Local Time nicely formatted:  "+ tf
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "time", tf )</script></con:config></con:testStep><con:testStep type="restrequest" name="authuser"><con:settings/><con:config service="ARTSA - UserManager" resourcePath="/SaasCoreUserManager/rest/auth" methodName="POST - authenticate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="authuser" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="authkey" value="1189377229352574419-2213262129298445271-4936701685398756970-61" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://10.200.0.124:8080</con:endpoint><con:request>{
  "username":"admin",
  "password":"admin1",
  "accountName":"idetestaccount"
}</con:request><con:assertion type="XPath Match" name="XPath Match"><con:configuration><path>declare namespace soap='http://schemas.xmlsoap.org/soap/envelope/';
declare namespace ns1='http://10.200.0.124/SaasCoreUserManager/rest/auth';
//ns1:loginFailed</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="authResponse"><con:settings/><con:config><script>import groovy.json.JsonSlurper
import com.eviware.soapui.impl.wsdl.teststeps.*

responseContent = testRunner.testCase.getTestStepByName("authuser").getPropertyValue("response")
slurperresponse = new JsonSlurper().parseText(responseContent)

accountid = (slurperresponse.account)
def accountid = accountid as String
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "accountid", accountid )

accountname = (slurperresponse.accountName)
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "accountName", accountname )

authkey = (slurperresponse.authkey)
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "authkey", authkey )

userid = (slurperresponse.id)
def userid = userid as String
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "userid", userid )

username = (slurperresponse.username)
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "userName", username )

//log.info accountid
//log.info accountname
//log.info authkey
//log.info userid
//log.info username</script></con:config></con:testStep><con:testStep type="groovy" name="setutokenheader"><con:settings/><con:config><script>import com.eviware.soapui.impl.wsdl.teststeps.*
import com.eviware.soapui.support.types.StringToStringMap;

def authkey = com.eviware.soapui.SoapUI.globalProperties.getPropertyValue( "authkey")
def tc = testRunner.testCase.testSuite.getTestCaseByName("TrendingVolumeMavg")
def ts11 = tc.getTestStepByName("Trending01VolumeMavg")


def headers = new StringToStringMap()
headers.putIfMissing("utoken",authkey)

ts11.getHttpRequest().setRequestHeaders(headers)</script></con:config></con:testStep><con:testStep type="groovy" name="initialize_jdbc_driver"><con:settings/><con:config><script>com.eviware.soapui.support.GroovyUtils.registerJdbcDriver("vertica.jdbc.driver.vertica")</script></con:config></con:testStep><con:testStep type="restrequest" name="Trending01VolumeMavg"><con:settings/><con:config service="ARTSA  - Article Query" resourcePath="/ArticleQueryApi/rest/query/timeseries" methodName="POST - getTimeSeriesData" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Trending01VolumeMavg" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="utoken" value="212242086907896648--7113641977596079804--8594226268582207310-12" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://10.200.0.124:8080</con:endpoint><con:request>{
  "topicIDs":[${#Global#topicid}],
  //"limit":10,
  "selectedFields":[
    	{"field":"article_topic"},
        {"field":"content_volume()","sortDirection":"DESCENDING"},
        {"field":"ts_moving_average()","sortDirection":"ASCENDING"}
        //{"field":"combined_topics"}
  ],
  "filters":[
      //{"field":"article_title","comparison":"NOT_COOCCURS","values":["Scribd Feed"]}
  ],
  "dateRange":{"startDate":${#Global#queryepochstart},"endDate":${#Global#queryepochend}},
  "timeSlice":"HOUR"
}</con:request><con:assertion type="XPath Match" name="assert_content_volume"><con:configuration><path>declare namespace soap='http://schemas.xmlsoap.org/soap/envelope/';
declare namespace ns1='http://10.200.0.124/ArticleQueryApi/rest/query/timeseries';
//ns1:content_volume</path><content>*</content><allowWildcards>true</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="XPath Match"><con:configuration><path>declare namespace soap='http://schemas.xmlsoap.org/soap/envelope/';
declare namespace ns1='http://10.200.0.124/ArticleQueryApi/rest/query/timeseries';
//ns1:content_volume_mavg</path><content>*</content><allowWildcards>true</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="jdbc" name="TrendingVolumeVertica"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>com.vertica.Driver</con:driver><con:connectionString>jdbc:vertica://10.200.0.190:5433/artsa01?user=artsa01&amp;password=artsa2</con:connectionString><con:query>SELECT fa.publish_at_hour,COUNT(DISTINCT fa.id) content_volume
FROM fact_article fa
INNER JOIN (
	SELECT pipeline_topic_id, article_id, publish_at, publish_at_week
	FROM topic_article ta
	WHERE pipeline_topic_id IN (${#Global#topicid})
	AND ta.publish_at BETWEEN '${#Global#querysqlstart}' AND '${#Global#querysqlend}'
	   ) ta  ON ta.article_id=fa.id
AND ta.publish_at_week=fa.publish_at_week
WHERE  ta.pipeline_topic_id IN (${#Global#topicid})
GROUP BY fa.publish_at_hour
ORDER BY fa.publish_at_hour ASC  limit 100</con:query><con:properties/></con:config></con:testStep><con:properties/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TrendingVolumeProjections" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="0c3687ae-e10b-4862-948e-9e8917622be4"><con:settings/><con:testStep type="groovy" name="settime"><con:settings/><con:config><script>Calendar sod = Calendar.instance
    sod.set(Calendar.AM_PM, 0)
    sod.set(Calendar.HOUR, 0)
    sod.set(Calendar.MINUTE, 0)
    sod.set(Calendar.SECOND, 0)
    sod.set(Calendar.MILLISECOND, 0)
start = sod.time 
sqlstart = start.format('MM-dd-yy HH:mm:ss')
//log.info "SQL Start Time:  " + sqlstart
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "querysqlstart", sqlstart )

Calendar eod = Calendar.instance
    eod.set(Calendar.AM_PM, 0)
    eod.set(Calendar.HOUR, 9)
    eod.set(Calendar.MINUTE, 59)
    eod.set(Calendar.SECOND, 59)
    eod.set(Calendar.MILLISECOND, 999)
end = eod.time 
sqlend = end.format('MM-dd-yy HH:mm:ss')
//log.info "SQL End Time:  " + sqlend
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "querysqlend", sqlend )

offset = sod.get(Calendar.ZONE_OFFSET) + sod.get(Calendar.DST_OFFSET) / (60 * 1000)

starttime = start.time
epochstart = starttime + offset
//log.info "Epoch Start Time:  " + epochstart
def epochstart = epochstart as String
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "queryepochstart", epochstart )
def timestampstart = epochstart as Long
Date tss = new Date(timestampstart)
//log.info "Time to select in local timezone:  "+ tss

endtime = end.time
epochend = endtime + offset
//log.info "Epoch End Time:  " + epochend
def epochend = epochend as String
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "queryepochend", epochend )
def timestampend = epochend as Long
Date tse = new Date(timestampend)
//log.info "Time to select in local timezone:  "+ tse

now = Calendar.instance
today = now.time
millis = today.time
//log.info "Current time in milli-seconds:  " + millis
def today = new Date (millis)
//log.info "Current Local Time:  "+ today
tf = today.format('MM dd yy HH mm ss')
//log.info "Current Local Time nicely formatted:  "+ tf
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "time", tf )</script></con:config></con:testStep><con:testStep type="restrequest" name="authuser"><con:settings/><con:config service="ARTSA - UserManager" resourcePath="/SaasCoreUserManager/rest/auth" methodName="POST - authenticate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="authuser" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="authkey" value="1189377229352574419-2213262129298445271-4936701685398756970-61" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://10.200.0.124:8080</con:endpoint><con:request>{
  "username":${#Global#username},
  "password":${#Global#original},
  "accountName":${#Global#accountname}
}</con:request><con:assertion type="XPath Match" name="XPath Match"><con:configuration><path>declare namespace soap='http://schemas.xmlsoap.org/soap/envelope/';
declare namespace ns1='http://10.200.0.124/SaasCoreUserManager/rest/auth';
//ns1:loginFailed</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="authResponse"><con:settings/><con:config><script>import groovy.json.JsonSlurper
import com.eviware.soapui.impl.wsdl.teststeps.*

responseContent = testRunner.testCase.getTestStepByName("authuser").getPropertyValue("response")
slurperresponse = new JsonSlurper().parseText(responseContent)

accountid = (slurperresponse.account)
def accountid = accountid as String
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "accountid", accountid )

accountname = (slurperresponse.accountName)
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "accountName", accountname )

authkey = (slurperresponse.authkey)
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "authkey", authkey )

userid = (slurperresponse.id)
def userid = userid as String
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "userid", userid )

username = (slurperresponse.username)
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "userName", username )

//log.info accountid
//log.info accountname
//log.info authkey
//log.info userid
//log.info username</script></con:config></con:testStep><con:testStep type="groovy" name="setutokenheader"><con:settings/><con:config><script>import com.eviware.soapui.impl.wsdl.teststeps.*
import com.eviware.soapui.support.types.StringToStringMap;

def authkey = com.eviware.soapui.SoapUI.globalProperties.getPropertyValue( "authkey")
def tc = testRunner.testCase.testSuite.getTestCaseByName("TrendingVolumeProjections")
def ts11 = tc.getTestStepByName("Trending02VolumeProjections")


def headers = new StringToStringMap()
headers.putIfMissing("utoken",authkey)

ts11.getHttpRequest().setRequestHeaders(headers)</script></con:config></con:testStep><con:testStep type="groovy" name="initialize_jdbc_driver"><con:settings/><con:config><script>com.eviware.soapui.support.GroovyUtils.registerJdbcDriver("vertica.jdbc.driver.vertica")</script></con:config></con:testStep><con:testStep type="restrequest" name="Trending02VolumeProjections"><con:settings/><con:config service="ARTSA  - Article Query" resourcePath="/ArticleQueryApi/rest/query/timeseries" methodName="POST - getTimeSeriesData" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Trending02VolumeProjections" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="utoken" value="7169179333464262121-2640676017871015228-4829464299075906304-12" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://10.200.0.124:8080</con:endpoint><con:request>{
  "topicIDs":[${#Global#topicid}],
  //"limit":10,
  "selectedFields":[
    	{"field":"article_topic"},
        {"field":"content_volume()","sortDirection":"DESCENDING"}
        //{"field":"ts_linr_mavg_dev()","sortDirection":"ASCENDING"},
        //{"field":"combined_topics"}
  ],
  "filters":[
      //{"field":"author_name","comparison":"NE","values":["geeves1279"]}
  ],
  "dateRange":{"startDate":${#Global#queryepochstart},"endDate":${#Global#queryepochend}},
  "timeSlice":"HOUR"
}</con:request><con:assertion type="XPath Match" name="assert_content_volume"><con:configuration><path>declare namespace soap='http://schemas.xmlsoap.org/soap/envelope/';
declare namespace ns1='http://10.200.0.124/ArticleQueryApi/rest/query/timeseries';
//ns1:content_volume</path><content>*</content><allowWildcards>true</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:properties/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TrendingSentiment" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="42a4226a-2e90-47e0-b805-cac7cad011f5"><con:settings/><con:testStep type="groovy" name="settime"><con:settings/><con:config><script>Calendar sod = Calendar.instance
    sod.set(Calendar.AM_PM, 0)
    sod.set(Calendar.HOUR, 0)
    sod.set(Calendar.MINUTE, 0)
    sod.set(Calendar.SECOND, 0)
    sod.set(Calendar.MILLISECOND, 0)
start = sod.time 
sqlstart = start.format('MM-dd-yy HH:mm:ss')
//log.info "SQL Start Time:  " + sqlstart
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "querysqlstart", sqlstart )

Calendar eod = Calendar.instance
    eod.set(Calendar.AM_PM, 0)
    eod.set(Calendar.HOUR, 9)
    eod.set(Calendar.MINUTE, 59)
    eod.set(Calendar.SECOND, 59)
    eod.set(Calendar.MILLISECOND, 999)
end = eod.time 
sqlend = end.format('MM-dd-yy HH:mm:ss')
//log.info "SQL End Time:  " + sqlend
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "querysqlend", sqlend )

offset = sod.get(Calendar.ZONE_OFFSET) + sod.get(Calendar.DST_OFFSET) / (60 * 1000)

starttime = start.time
epochstart = starttime + offset
//log.info "Epoch Start Time:  " + epochstart
def epochstart = epochstart as String
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "queryepochstart", epochstart )
def timestampstart = epochstart as Long
Date tss = new Date(timestampstart)
//log.info "Time to select in local timezone:  "+ tss

endtime = end.time
epochend = endtime + offset
//log.info "Epoch End Time:  " + epochend
def epochend = epochend as String
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "queryepochend", epochend )
def timestampend = epochend as Long
Date tse = new Date(timestampend)
//log.info "Time to select in local timezone:  "+ tse

now = Calendar.instance
today = now.time
millis = today.time
//log.info "Current time in milli-seconds:  " + millis
def today = new Date (millis)
//log.info "Current Local Time:  "+ today
tf = today.format('MM dd yy HH mm ss')
//log.info "Current Local Time nicely formatted:  "+ tf
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "time", tf )</script></con:config></con:testStep><con:testStep type="restrequest" name="authuser"><con:settings/><con:config service="ARTSA - UserManager" resourcePath="/SaasCoreUserManager/rest/auth" methodName="POST - authenticate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="authuser" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="authkey" value="1189377229352574419-2213262129298445271-4936701685398756970-61" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://10.200.0.124:8080</con:endpoint><con:request>{
  "username":${#Global#username},
  "password":${#Global#original},
  "accountName":${#Global#accountname}
}</con:request><con:assertion type="XPath Match" name="XPath Match"><con:configuration><path>declare namespace soap='http://schemas.xmlsoap.org/soap/envelope/';
declare namespace ns1='http://10.200.0.124/SaasCoreUserManager/rest/auth';
//ns1:loginFailed</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="authResponse"><con:settings/><con:config><script>import groovy.json.JsonSlurper
import com.eviware.soapui.impl.wsdl.teststeps.*

responseContent = testRunner.testCase.getTestStepByName("authuser").getPropertyValue("response")
slurperresponse = new JsonSlurper().parseText(responseContent)

accountid = (slurperresponse.account)
def accountid = accountid as String
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "accountid", accountid )

accountname = (slurperresponse.accountName)
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "accountName", accountname )

authkey = (slurperresponse.authkey)
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "authkey", authkey )

userid = (slurperresponse.id)
def userid = userid as String
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "userid", userid )

username = (slurperresponse.username)
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "userName", username )

//log.info accountid
//log.info accountname
//log.info authkey
//log.info userid
//log.info username</script></con:config></con:testStep><con:testStep type="groovy" name="setutokenheader"><con:settings/><con:config><script>import com.eviware.soapui.impl.wsdl.teststeps.*
import com.eviware.soapui.support.types.StringToStringMap;

def authkey = com.eviware.soapui.SoapUI.globalProperties.getPropertyValue( "authkey")
def tc = testRunner.testCase.testSuite.getTestCaseByName("TrendingSentiment")
def ts11 = tc.getTestStepByName("Trending03Sentiment")


def headers = new StringToStringMap()
headers.putIfMissing("utoken",authkey)

ts11.getHttpRequest().setRequestHeaders(headers)</script></con:config></con:testStep><con:testStep type="groovy" name="initialize_jdbc_driver"><con:settings/><con:config><script>com.eviware.soapui.support.GroovyUtils.registerJdbcDriver("vertica.jdbc.driver.vertica")</script></con:config></con:testStep><con:testStep type="restrequest" name="Trending03Sentiment"><con:settings/><con:config service="ARTSA  - Article Query" resourcePath="/ArticleQueryApi/rest/query/timeseries" methodName="POST - getTimeSeriesData" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Trending03Sentiment" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="utoken" value="-2759089494868073126-2626584208065894447-5198342783605280229-12" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://10.200.0.124:8080</con:endpoint><con:request>{
  "topicIDs":[${#Global#topicid}],
  //"limit":10,
  "selectedFields":[
    	{"field":"article_topic"},
        {"field":"article_sentiment","sortDirection":"ASCENDING"},
   		{"field":"content_volume()","sortDirection":"DESCENDING"}
        //{"field":"combined_topics"}
  ],
  "filters":[
      //{"field":"article_sentiment","comparison":"EQ","values":["MIXED","NEGATIVE","NEUTRAL","POSITIVE"]}
  ],
  "dateRange":{"startDate":${#Global#queryepochstart},"endDate":${#Global#queryepochend}},
  "timeSlice":"HOUR"
}</con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="jdbc" name="TrendingSentimentVertica"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>com.vertica.Driver</con:driver><con:connectionString>jdbc:vertica://10.200.0.190:5433/artsa01?user=artsa01&amp;password=artsa2</con:connectionString><con:query>SELECT fa.publish_at_hour,fa.sentiment,COUNT(DISTINCT fa.id) content_volume
FROM fact_article fa
INNER JOIN (
	SELECT pipeline_topic_id, article_id, publish_at, publish_at_week
	FROM topic_article ta
	WHERE pipeline_topic_id IN (${#Global#topicid})
	AND ta.publish_at BETWEEN '${#Global#querysqlstart}' AND '${#Global#querysqlend}'
	   ) ta  ON ta.article_id=fa.id
AND ta.publish_at_week=fa.publish_at_week
WHERE  ta.pipeline_topic_id IN (${#Global#topicid})
GROUP BY fa.sentiment, fa.publish_at_hour
ORDER BY fa.sentiment DESC, fa.publish_at_hour ASC  limit 100</con:query><con:properties/></con:config></con:testStep><con:properties/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TrendingTopEntities" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="4dac0501-6eab-4eed-a623-0e6f9e6c6524"><con:settings/><con:testStep type="groovy" name="settime"><con:settings/><con:config><script>Calendar sod = Calendar.instance
    sod.set(Calendar.AM_PM, 0)
    sod.set(Calendar.HOUR, 0)
    sod.set(Calendar.MINUTE, 0)
    sod.set(Calendar.SECOND, 0)
    sod.set(Calendar.MILLISECOND, 0)
start = sod.time 
sqlstart = start.format('MM-dd-yy HH:mm:ss')
//log.info "SQL Start Time:  " + sqlstart
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "querysqlstart", sqlstart )

Calendar eod = Calendar.instance
    eod.set(Calendar.AM_PM, 0)
    eod.set(Calendar.HOUR, 9)
    eod.set(Calendar.MINUTE, 59)
    eod.set(Calendar.SECOND, 59)
    eod.set(Calendar.MILLISECOND, 999)
end = eod.time 
sqlend = end.format('MM-dd-yy HH:mm:ss')
//log.info "SQL End Time:  " + sqlend
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "querysqlend", sqlend )

offset = sod.get(Calendar.ZONE_OFFSET) + sod.get(Calendar.DST_OFFSET) / (60 * 1000)

starttime = start.time
epochstart = starttime + offset
//log.info "Epoch Start Time:  " + epochstart
def epochstart = epochstart as String
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "queryepochstart", epochstart )
def timestampstart = epochstart as Long
Date tss = new Date(timestampstart)
//log.info "Time to select in local timezone:  "+ tss

endtime = end.time
epochend = endtime + offset
//log.info "Epoch End Time:  " + epochend
def epochend = epochend as String
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "queryepochend", epochend )
def timestampend = epochend as Long
Date tse = new Date(timestampend)
//log.info "Time to select in local timezone:  "+ tse

now = Calendar.instance
today = now.time
millis = today.time
//log.info "Current time in milli-seconds:  " + millis
def today = new Date (millis)
//log.info "Current Local Time:  "+ today
tf = today.format('MM dd yy HH mm ss')
//log.info "Current Local Time nicely formatted:  "+ tf
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "time", tf )</script></con:config></con:testStep><con:testStep type="restrequest" name="authuser"><con:settings/><con:config service="ARTSA - UserManager" resourcePath="/SaasCoreUserManager/rest/auth" methodName="POST - authenticate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="authuser" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="authkey" value="1189377229352574419-2213262129298445271-4936701685398756970-61" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://10.200.0.124:8080</con:endpoint><con:request>{
  "username":${#Global#username},
  "password":${#Global#original},
  "accountName":${#Global#accountname}
}</con:request><con:assertion type="XPath Match" name="XPath Match"><con:configuration><path>declare namespace soap='http://schemas.xmlsoap.org/soap/envelope/';
declare namespace ns1='http://10.200.0.124/SaasCoreUserManager/rest/auth';
//ns1:loginFailed</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="authResponse"><con:settings/><con:config><script>import groovy.json.JsonSlurper
import com.eviware.soapui.impl.wsdl.teststeps.*

responseContent = testRunner.testCase.getTestStepByName("authuser").getPropertyValue("response")
slurperresponse = new JsonSlurper().parseText(responseContent)

accountid = (slurperresponse.account)
def accountid = accountid as String
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "accountid", accountid )

accountname = (slurperresponse.accountName)
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "accountName", accountname )

authkey = (slurperresponse.authkey)
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "authkey", authkey )

userid = (slurperresponse.id)
def userid = userid as String
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "userid", userid )

username = (slurperresponse.username)
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "userName", username )

//log.info accountid
//log.info accountname
//log.info authkey
//log.info userid
//log.info username</script></con:config></con:testStep><con:testStep type="groovy" name="setutokenheader"><con:settings/><con:config><script>import com.eviware.soapui.impl.wsdl.teststeps.*
import com.eviware.soapui.support.types.StringToStringMap;

def authkey = com.eviware.soapui.SoapUI.globalProperties.getPropertyValue( "authkey")
def tc = testRunner.testCase.testSuite.getTestCaseByName("TrendingTopEntities")
def ts11 = tc.getTestStepByName("Trending041TopEntitiesLevel1")
def ts12 = tc.getTestStepByName("Trending042TopEntitiesLevel2")


def headers = new StringToStringMap()
headers.putIfMissing("utoken",authkey)

ts11.getHttpRequest().setRequestHeaders(headers)
ts12.getHttpRequest().setRequestHeaders(headers)</script></con:config></con:testStep><con:testStep type="groovy" name="initialize_jdbc_driver"><con:settings/><con:config><script>com.eviware.soapui.support.GroovyUtils.registerJdbcDriver("vertica.jdbc.driver.vertica")</script></con:config></con:testStep><con:testStep type="restrequest" name="Trending041TopEntitiesLevel1"><con:settings/><con:config service="ARTSA  - Article Query" resourcePath="/ArticleQueryApi/rest/query/timeseries" methodName="POST - getTimeSeriesData" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Trending041TopEntitiesLevel1" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="utoken" value="5522862352019278821-8035487882401648631--1659599316403002394-12" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://10.200.0.124:8080</con:endpoint><con:request>{
  "topicIDs":[${#Global#topicid}],
  "limit":10,
  "selectedFields":[
    	//{"field":"article_topic"},
    	{"field":"entity_type"},
    	{"field":"content_volume()","sortDirection":"DESCENDING"}
        //{"field":"combined_topics"}
  ],
  "filters":[
       //{'field':'entity_type','comparison':'EQ','values':['@USERNAME','HASHTAG','PERSON','AMBIGUOUS_ICON','POSITIVE_ICON']}
  ],
  "dateRange":{"startDate":${#Global#queryepochstart},"endDate":${#Global#queryepochend}},
  "timeSlice":"HOUR"
}</con:request><con:assertion type="XPath Match" name="assert_content_volume"><con:configuration><path>declare namespace soap='http://schemas.xmlsoap.org/soap/envelope/';
declare namespace ns1='http://10.200.0.124/ArticleQueryApi/rest/query/timeseries';
//ns1:content_volume</path><content>*</content><allowWildcards>true</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="jdbc" name="TrendingTopEntitiesLevel1Vertica"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>com.vertica.Driver</con:driver><con:connectionString>jdbc:vertica://10.200.0.190:5433/artsa01?user=artsa01&amp;password=artsa2</con:connectionString><con:query>SELECT fa.publish_at_hour,en.level1,COUNT(DISTINCT fa.id) content_volume
FROM fact_article fa
INNER JOIN (
	SELECT pipeline_topic_id, article_id, publish_at, publish_at_week
	FROM topic_article ta
	WHERE pipeline_topic_id IN (${#Global#topicid})
	AND ta.publish_at BETWEEN '${#Global#querysqlstart}' AND '${#Global#querysqlend}'
	   ) ta on ta.article_id=fa.id
INNER JOIN multi_level_annotation en on en.article_id=ta.article_id
AND ta.publish_at_week=fa.publish_at_week
WHERE  ta.pipeline_topic_id IN (${#Global#topicid})
AND en.account IN (0,${#Global#accountid})
AND en.level1 IN
	(
	SELECT en.level1
	FROM topic_article ta, fact_article fa, multi_level_annotation en
	WHERE  ta.pipeline_topic_id IN (${#Global#topicid})
	AND ta.article_id = fa.id AND en.article_id = fa.id
	AND en.type = 'entity'
	AND ta.publish_at BETWEEN '${#Global#querysqlstart}' AND '${#Global#querysqlend}'
	GROUP BY en.level1
	ORDER BY COUNT(DISTINCT(fa.id)) DESC LIMIT 50
	)
GROUP BY en.level1, fa.publish_at_hour
ORDER BY en.level1 ASC, fa.publish_at_hour ASC  limit 500</con:query><con:properties/></con:config></con:testStep><con:testStep type="restrequest" name="Trending042TopEntitiesLevel2"><con:settings/><con:config service="ARTSA  - Article Query" resourcePath="/ArticleQueryApi/rest/query/timeseries" methodName="POST - getTimeSeriesData" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Trending042TopEntitiesLevel2" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="utoken" value="5522862352019278821-8035487882401648631--1659599316403002394-12" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://10.200.0.124:8080</con:endpoint><con:request>{
  "topicIDs":[${#Global#topicid}],
  //"limit":10,
  "selectedFields":[
    	//{"field":"article_topic"},
    	{"field":"entity_value"},
    	{"field":"content_volume()","sortDirection":"DESCENDING"}
        //{"field":"combined_topics"}
  ],
  "filters":[
      {"field":"entity_type","comparison":"EQ","values":["NEGATIVE_ICON"]}
  ],
  "dateRange":{"startDate":${#Global#queryepochstart},"endDate":${#Global#queryepochend}},
  "timeSlice":"HOUR"
}</con:request><con:assertion type="XPath Match" name="assert_content_volume"><con:configuration><path>declare namespace soap='http://schemas.xmlsoap.org/soap/envelope/';
declare namespace ns1='http://10.200.0.124/ArticleQueryApi/rest/query/timeseries';
//ns1:content_volume</path><content>*</content><allowWildcards>true</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:properties/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TrendingTopCategories" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="e2d843d3-a15a-41ba-b4fc-6c22708365c5"><con:settings/><con:testStep type="groovy" name="settime"><con:settings/><con:config><script>Calendar sod = Calendar.instance
    sod.set(Calendar.AM_PM, 0)
    sod.set(Calendar.HOUR, 0)
    sod.set(Calendar.MINUTE, 0)
    sod.set(Calendar.SECOND, 0)
    sod.set(Calendar.MILLISECOND, 0)
start = sod.time 
sqlstart = start.format('MM-dd-yy HH:mm:ss')
//log.info "SQL Start Time:  " + sqlstart
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "querysqlstart", sqlstart )

Calendar eod = Calendar.instance
    eod.set(Calendar.AM_PM, 0)
    eod.set(Calendar.HOUR, 9)
    eod.set(Calendar.MINUTE, 59)
    eod.set(Calendar.SECOND, 59)
    eod.set(Calendar.MILLISECOND, 999)
end = eod.time 
sqlend = end.format('MM-dd-yy HH:mm:ss')
//log.info "SQL End Time:  " + sqlend
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "querysqlend", sqlend )

offset = sod.get(Calendar.ZONE_OFFSET) + sod.get(Calendar.DST_OFFSET) / (60 * 1000)

starttime = start.time
epochstart = starttime + offset
//log.info "Epoch Start Time:  " + epochstart
def epochstart = epochstart as String
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "queryepochstart", epochstart )
def timestampstart = epochstart as Long
Date tss = new Date(timestampstart)
//log.info "Time to select in local timezone:  "+ tss

endtime = end.time
epochend = endtime + offset
//log.info "Epoch End Time:  " + epochend
def epochend = epochend as String
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "queryepochend", epochend )
def timestampend = epochend as Long
Date tse = new Date(timestampend)
//log.info "Time to select in local timezone:  "+ tse

now = Calendar.instance
today = now.time
millis = today.time
//log.info "Current time in milli-seconds:  " + millis
def today = new Date (millis)
//log.info "Current Local Time:  "+ today
tf = today.format('MM dd yy HH mm ss')
//log.info "Current Local Time nicely formatted:  "+ tf
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "time", tf )</script></con:config></con:testStep><con:testStep type="restrequest" name="authuser"><con:settings/><con:config service="ARTSA - UserManager" resourcePath="/SaasCoreUserManager/rest/auth" methodName="POST - authenticate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="authuser" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="authkey" value="1189377229352574419-2213262129298445271-4936701685398756970-61" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://10.200.0.124:8080</con:endpoint><con:request>{
  "username":${#Global#username},
  "password":${#Global#original},
  "accountName":${#Global#accountname}
}</con:request><con:assertion type="XPath Match" name="XPath Match"><con:configuration><path>declare namespace soap='http://schemas.xmlsoap.org/soap/envelope/';
declare namespace ns1='http://10.200.0.124/SaasCoreUserManager/rest/auth';
//ns1:loginFailed</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="authResponse"><con:settings/><con:config><script>import groovy.json.JsonSlurper
import com.eviware.soapui.impl.wsdl.teststeps.*

responseContent = testRunner.testCase.getTestStepByName("authuser").getPropertyValue("response")
slurperresponse = new JsonSlurper().parseText(responseContent)

accountid = (slurperresponse.account)
def accountid = accountid as String
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "accountid", accountid )

accountname = (slurperresponse.accountName)
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "accountName", accountname )

authkey = (slurperresponse.authkey)
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "authkey", authkey )

userid = (slurperresponse.id)
def userid = userid as String
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "userid", userid )

username = (slurperresponse.username)
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "userName", username )

//log.info accountid
//log.info accountname
//log.info authkey
//log.info userid
//log.info username</script></con:config></con:testStep><con:testStep type="groovy" name="setutokenheader"><con:settings/><con:config><script>import com.eviware.soapui.impl.wsdl.teststeps.*
import com.eviware.soapui.support.types.StringToStringMap;

def authkey = com.eviware.soapui.SoapUI.globalProperties.getPropertyValue( "authkey")
def tc = testRunner.testCase.testSuite.getTestCaseByName("TrendingTopCategories")
def ts11 = tc.getTestStepByName("Trending051TopCategoriesLevel1")
def ts12 = tc.getTestStepByName("Trending052TopCategoriesLevel2")
def ts13 = tc.getTestStepByName("Trending053TopCategoriesLevel3")
def ts14 = tc.getTestStepByName("Trending054TopCategoriesLevel4")
def ts15 = tc.getTestStepByName("Trending055TopCategoriesLevel5")


def headers = new StringToStringMap()
headers.putIfMissing("utoken",authkey)

ts11.getHttpRequest().setRequestHeaders(headers)
ts12.getHttpRequest().setRequestHeaders(headers)
ts13.getHttpRequest().setRequestHeaders(headers)
ts14.getHttpRequest().setRequestHeaders(headers)
ts15.getHttpRequest().setRequestHeaders(headers)</script></con:config></con:testStep><con:testStep type="groovy" name="initialize_jdbc_driver"><con:settings/><con:config><script>com.eviware.soapui.support.GroovyUtils.registerJdbcDriver("vertica.jdbc.driver.vertica")</script></con:config></con:testStep><con:testStep type="restrequest" name="Trending051TopCategoriesLevel1"><con:settings/><con:config service="ARTSA  - Article Query" resourcePath="/ArticleQueryApi/rest/query/timeseries" methodName="POST - getTimeSeriesData" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Trending051TopCategoriesLevel1" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="utoken" value="8055576360266805017-4634391820158032390-384057679828663712-12" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://10.200.0.124:8080</con:endpoint><con:request>{
  "topicIDs":[${#Global#topicid}],
  "limit":"20",
  "selectedFields":[
        //{"field":"article_topic"},
	    {"field":"category_type"},
	    {"field":"content_volume()", "sortDirection":"DESCENDING"},
   	    {"field":"category_level1"}
        //{"field":"combined_topics"}
  ],
  "filters":[
	  //{"field":"category_level1","comparison":"EQ","values":["Emotions_Category_Set","Dynamic Routing Category Set","Consumer_Electronics_Master_Category_Set","Telco_Product_Promotion","Political_Category_Set"]}
  ],
  "dateRange":{"startDate":${#Global#queryepochstart},"endDate":${#Global#queryepochend}},
  "timeSlice":"HOUR"
}</con:request><con:assertion type="XPath Match" name="assert_content_volume"><con:configuration><path>declare namespace soap='http://schemas.xmlsoap.org/soap/envelope/';
declare namespace ns1='http://10.200.0.124/ArticleQueryApi/rest/query/timeseries';
//ns1:content_volume</path><content>*</content><allowWildcards>true</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="jdbc" name="TrendingTopCategoriesLevel1Vertica"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>com.vertica.Driver</con:driver><con:connectionString>jdbc:vertica://10.200.0.190:5433/artsa01?user=artsa01&amp;password=artsa2</con:connectionString><con:query>SELECT fa.publish_at_hour,en.level1,COUNT(DISTINCT fa.id) content_volume	
FROM fact_article fa	
INNER JOIN (	
	SELECT pipeline_topic_id, article_id, publish_at, publish_at_week
	FROM topic_article ta
	WHERE pipeline_topic_id IN (${#Global#topicid})
	AND ta.publish_at BETWEEN '${#Global#querysqlstart}' AND '${#Global#querysqlend}'
	   ) ta on ta.article_id=fa.id
INNER JOIN multi_level_annotation en on en.article_id=ta.article_id
AND ta.publish_at_week=fa.publish_at_week
WHERE  ta.pipeline_topic_id IN (${#Global#topicid})
AND en.account IN (0,${#Global#accountid})
AND en.level1 IN
	(
	SELECT en.level1
	FROM topic_article ta, fact_article fa, multi_level_annotation en
	WHERE  ta.pipeline_topic_id IN (${#Global#topicid})
	AND ta.article_id = fa.id AND en.article_id = fa.id
	AND en.type = 'category'
	AND ta.publish_at BETWEEN '${#Global#querysqlstart}' AND '${#Global#querysqlend}'
	GROUP BY en.level1
	ORDER BY COUNT(DISTINCT(fa.id)) DESC LIMIT 30
	)
GROUP BY en.level1, fa.publish_at_hour
ORDER BY en.level1 ASC, fa.publish_at_hour ASC  limit 300</con:query><con:properties/></con:config></con:testStep><con:testStep type="restrequest" name="Trending052TopCategoriesLevel2"><con:settings/><con:config service="ARTSA  - Article Query" resourcePath="/ArticleQueryApi/rest/query/timeseries" methodName="POST - getTimeSeriesData" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Trending052TopCategoriesLevel2" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="utoken" value="8055576360266805017-4634391820158032390-384057679828663712-12" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://10.200.0.124:8080</con:endpoint><con:request>{
  "topicIDs":[${#Global#topicid}],
  "limit":"20",  
  "selectedFields":[
        //{"field":"article_topic"},
        {"field":"category_level2" , "sortDirection":"ASCENDING"} , 
        {"field":"content_volume()", "sortDirection":"DESCENDING"}
        //{"field":"combined_topics"}
  ],  
  "filters":[  
      {"field":"category_level1","comparison":"EQ","values":["Dynamic Routing Category Set"]}  
  ],
  "dateRange":{"startDate":${#Global#queryepochstart},"endDate":${#Global#queryepochend}},
  "timeSlice":"HOUR"
}</con:request><con:assertion type="XPath Match" name="assert_content_volume"><con:configuration><path>declare namespace soap='http://schemas.xmlsoap.org/soap/envelope/';
declare namespace ns1='http://10.200.0.124/ArticleQueryApi/rest/query/timeseries';
//ns1:content_volume</path><content>*</content><allowWildcards>true</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Trending053TopCategoriesLevel3"><con:settings/><con:config service="ARTSA  - Article Query" resourcePath="/ArticleQueryApi/rest/query/timeseries" methodName="POST - getTimeSeriesData" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Trending053TopCategoriesLevel3" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="utoken" value="8055576360266805017-4634391820158032390-384057679828663712-12" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://10.200.0.124:8080</con:endpoint><con:request>{
  "topicIDs":[${#Global#topicid}],
  "limit":"20",
  "selectedFields":[
	    {"field":"category_level3" , "sortDirection":"ASCENDING"},
   	    {"field":"content_volume()", "sortDirection":"DESCENDING"}
        //{"field":"combined_topics"}
  ],
  "filters":[
	  {"field":"category_level1","comparison":"EQ","values":["Dynamic Routing Category Set"]},
	  {"field":"category_level2","comparison":"EQ","values":["Sentiment"]}
  ],
  "dateRange":{"startDate":${#Global#queryepochstart},"endDate":${#Global#queryepochend}},
  "timeSlice":"HOUR"
}</con:request><con:assertion type="XPath Match" name="assert_content_volume"><con:configuration><path>declare namespace soap='http://schemas.xmlsoap.org/soap/envelope/';
declare namespace ns1='http://10.200.0.124/ArticleQueryApi/rest/query/timeseries';
//ns1:content_volume</path><content>*</content><allowWildcards>true</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Trending054TopCategoriesLevel4"><con:settings/><con:config service="ARTSA  - Article Query" resourcePath="/ArticleQueryApi/rest/query/timeseries" methodName="POST - getTimeSeriesData" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Trending054TopCategoriesLevel4" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="utoken" value="8055576360266805017-4634391820158032390-384057679828663712-12" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://10.200.0.124:8080</con:endpoint><con:request>{
  "topicIDs":[${#Global#topicid}],
  "limit":"20",
  "selectedFields":[
        {"field":"category_level4" , "sortDirection":"ASCENDING"},
   	    {"field":"content_volume()", "sortDirection":"DESCENDING"}
        //{"field":"combined_topics"}
  ],
  "filters":[
      {"field":"category_level1","comparison":"EQ","values":["Dynamic Routing Category Set"]},
      {"field":"category_level3","comparison":"EQ","values":["Negative"]}
  ],
  "dateRange":{"startDate":${#Global#queryepochstart},"endDate":${#Global#queryepochend}},
  "timeSlice":"HOUR"
}</con:request><con:assertion type="XPath Match" name="assert_content_volume"><con:configuration><path>declare namespace soap='http://schemas.xmlsoap.org/soap/envelope/';
declare namespace ns1='http://10.200.0.124/ArticleQueryApi/rest/query/timeseries';
//ns1:content_volume</path><content>*</content><allowWildcards>true</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Trending055TopCategoriesLevel5"><con:settings/><con:config service="ARTSA  - Article Query" resourcePath="/ArticleQueryApi/rest/query/timeseries" methodName="POST - getTimeSeriesData" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Trending055TopCategoriesLevel5" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="utoken" value="8055576360266805017-4634391820158032390-384057679828663712-12" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://10.200.0.124:8080</con:endpoint><con:request>{
  "topicIDs":[${#Global#topicid}],
  "limit":"20",
  "selectedFields":[
        {"field":"category_level5" , "sortDirection":"ASCENDING"},
   	    {"field":"content_volume()", "sortDirection":"DESCENDING"}
        //{"field":"combined_topics"}
  ],
  "filters":[
      {"field":"category_level1","comparison":"EQ","values":["Dynamic Routing Category Set"]},
   	  {"field":"category_level4","comparison":"EQ","values":["Complaints"]}
  ],
  "dateRange":{"startDate":${#Global#queryepochstart},"endDate":${#Global#queryepochend}},
  "timeSlice":"HOUR"
}</con:request><con:assertion type="XPath Match" name="assert_content_volume"><con:configuration><path>declare namespace soap='http://schemas.xmlsoap.org/soap/envelope/';
declare namespace ns1='http://10.200.0.124/ArticleQueryApi/rest/query/timeseries';
//ns1:content_volume</path><content>*</content><allowWildcards>true</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:properties/></con:testCase><con:properties><con:property><con:name>Url</con:name><con:value>jdbc:vertica://10.200.0.190:5433/artsa01</con:value></con:property><con:property><con:name>User</con:name><con:value>artsa01</con:value></con:property><con:property><con:name>Pass</con:name><con:value>artsa2</con:value></con:property><con:property><con:name>Driver</con:name><con:value>com.vertica.Driver</con:value></con:property></con:properties></con:testSuite><con:testSuite name="runTestCasesGetResults"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TestCase 1" searchProperties="true"><con:settings/><con:testStep type="groovy" name="exportTestResults 1"><con:settings/><con:config><script>import java.util.*; 
import java.lang.*;
import jxl.*
import jxl.write.*

testCase = testRunner.testCase.testSuite.project.getTestSuiteByName('AggregateTestSuite').getTestCaseByName('AggregateAuthorLocationByState')
def properties = new com.eviware.soapui.support.types.StringToObjectMap ()
def async = false
def runner=testCase.run (properties, async)

for(r in runner.results)
{

}

//The below groovy script step is to capture the soapUI log area.
// "soapUI log" can be replaced with http log, jetty log, script log, error log etc based on the need.
def logArea = com.eviware.soapui.SoapUI.logMonitor.getLogArea( "script log" );
//Below two lines of groovy script is to get the project directory, we will be saving the soapUI log contents on a file in that directory.
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context) 
def projectPath = groovyUtils.projectPath 
def logFile = new File(projectPath + "\\testResults\\soapUI-Logs-to-file.txt")
//This is the first line in the soapUI log file.

logFile.write("soapUI Logs In a file.\r\n")
   if( logArea !=null )
   {
      def model = logArea.model
      if( model.size > 0 )            
         for( c in 0..(model.size-1) )         
           logFile.append(model.getElementAt( c ).toString() + "\r\n")
   }       
com.eviware.soapui.SoapUI.logMonitor.getLogArea("script log").clear()

//import com.eviware.soapui.support.*; 
////Get the TestCase Name to use it as a File Name. 
//def testCase = testRunner.getTestCase() 
//fileName= testCase.getName() 
////Get Current date time stamp to append the same in the file name. 
//def date = new Date() 
//def dts = date.format("yyyy-MM-dd-HH-mm-ss") 
////Write Request to a XML File and save it with Date Time stamp appended to your filename. 
//def myXmlRequest = "C:/Users/tmemmott/Documents/GitHub/automation-test-framework/ARTSA/testResults/"+fileName+"Request_"+dts+".xml" 
//def request = context.expand('${compareResultsAuthorLocationState}') 
//def req = new File(myXmlRequest)
//log.info request 
//req.write(request, "UTF-8") 
//// Write Response to a XMl File and save it with Date Time stamp appended to your filename. 
//def myXmlResponse = "C:/Users/tmemmott/Documents/GitHub/automation-test-framework/ARTSA/testResults/"+fileName+"Response_"+dts+".xml" 
//def response = context.expand( '${compareResultsAuthorLocationState}' ) 
//def res = new File(myXmlResponse) 
//res.write(response, "UTF-8")
//log.info response</script></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script"><con:settings/><con:config><script/></con:config></con:testStep><con:properties/></con:testCase><con:properties/></con:testSuite><con:testSuite name="EmptyTestSuite" disabled="true"><con:description>This is an Empty Test Suite</con:description><con:settings/><con:runType>SEQUENTIAL</con:runType><con:properties/></con:testSuite><con:testSuite name="accountLockDownTestSuite"><con:description>This is an Empty Test Suite</con:description><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="accountLockDownTestCaseAccount" searchProperties="true" id="9a0f1095-fa1b-429a-8499-294e80782609" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword=""><con:settings/><con:testStep type="groovy" name="setTime"><con:settings/><con:config><script>Calendar sod = Calendar.instance
    sod.set(Calendar.AM_PM, 0)
    sod.set(Calendar.HOUR, 0)
    sod.set(Calendar.MINUTE, 0)
    sod.set(Calendar.SECOND, 0)
    sod.set(Calendar.MILLISECOND, 0)
start = sod.time 
sqlstart = start.format('MM-dd-yy HH:mm:ss')
//log.info "SQL Start Time:  " + sqlstart
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "querysqlstart", sqlstart )

Calendar eod = Calendar.instance
    eod.set(Calendar.AM_PM, 0)
    eod.set(Calendar.HOUR, 9)
    eod.set(Calendar.MINUTE, 59)
    eod.set(Calendar.SECOND, 59)
    eod.set(Calendar.MILLISECOND, 999)
end = eod.time 
sqlend = end.format('MM-dd-yy HH:mm:ss')
//log.info "SQL End Time:  " + sqlend
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "querysqlend", sqlend )

offset = sod.get(Calendar.ZONE_OFFSET) + sod.get(Calendar.DST_OFFSET) / (60 * 1000)

starttime = start.time
epochstart = starttime + offset
//log.info "Epoch Start Time:  " + epochstart
def epochstart = epochstart as String
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "queryepochstart", epochstart )
def timestampstart = epochstart as Long
Date tss = new Date(timestampstart)
//log.info "Time to select in local timezone:  "+ tss

endtime = end.time
epochend = endtime + offset
//log.info "Epoch End Time:  " + epochend
def epochend = epochend as String
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "queryepochend", epochend )
def timestampend = epochend as Long
Date tse = new Date(timestampend)
//log.info "Time to select in local timezone:  "+ tse

now = Calendar.instance
today = now.time
millis = today.time
//log.info "Current time in milli-seconds:  " + millis
def today = new Date (millis)
//log.info "Current Local Time:  "+ today
tf = today.format('MM dd yy HH mm ss')
//log.info "Current Local Time nicely formatted:  "+ tf
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "time", tf )
millis = today.time as String
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "currentTime", millis )

secondsInHour = 3600000
secondsInDay = 24*secondsInHour as Long
secondsInMonth = 30*secondsInDay as Long
expirationDate = starttime+secondsInMonth as String
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "expirationDate", expirationDate )</script></con:config></con:testStep><con:testStep type="restrequest" name="authAccountUser"><con:settings/><con:config service="ARTSA- Account Manager" resourcePath="/SaasCoreAccountManager/rest/accountauth" methodName="POST - authenticate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="authAccountUser" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://10.200.0.124:8080</con:endpoint><con:request>{
  "username":${#Global#illumiAccountUsername},
  "password":${#Global#illumiAccountPassword}
}</con:request><con:assertion type="XPath Match" name="XPath Match"><con:configuration><path>declare namespace soap='http://schemas.xmlsoap.org/soap/envelope/';
declare namespace ns1='http://10.200.0.124/SaasCoreAccountManager/rest/accountauth';
//ns1:loginFailed</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="username" value="${#Global#illumiAccountUsername}"/>
  <con:entry key="password" value="${#Global#illumiAccountPassword}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="authResponse"><con:settings/><con:config><script>import groovy.json.JsonSlurper
import com.eviware.soapui.impl.wsdl.teststeps.*

responseContent = testRunner.testCase.getTestStepByName("authAccountUser").getPropertyValue("response")
slurperresponse = new JsonSlurper().parseText(responseContent)

authkey = (slurperresponse.authkey)
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "illumiAccountAuthKey", authkey )

//log.info authkey</script></con:config></con:testStep><con:testStep type="groovy" name="setUtokenHeader"><con:settings/><con:config><script>import com.eviware.soapui.impl.wsdl.teststeps.*
import com.eviware.soapui.support.types.StringToStringMap;

def authkey = com.eviware.soapui.SoapUI.globalProperties.getPropertyValue( "illumiAccountAuthKey")
def tc = testRunner.testCase.testSuite.getTestCaseByName("accountLockDownTestCaseAccount")
def ts11 = tc.getTestStepByName("getAccountListAccount")
def ts12 = tc.getTestStepByName("getListOfAccountUsersAccountUser")
def ts13 = tc.getTestStepByName("getBrandListAccountUser")
def ts14 = tc.getTestStepByName("uniqueAccountNameAccountUser")
def ts15 = tc.getTestStepByName("getAccountInfoAccountUser")
def ts16 = tc.getTestStepByName("createAccountAccountUser")
def ts17 = tc.getTestStepByName("editAccountAccountUser")


def headers = new StringToStringMap()
headers.putIfMissing("utoken",authkey)

ts11.getHttpRequest().setRequestHeaders(headers)
ts12.getHttpRequest().setRequestHeaders(headers)
ts13.getHttpRequest().setRequestHeaders(headers)
ts14.getHttpRequest().setRequestHeaders(headers)
ts15.getHttpRequest().setRequestHeaders(headers)
ts16.getHttpRequest().setRequestHeaders(headers)
ts17.getHttpRequest().setRequestHeaders(headers)</script></con:config></con:testStep><con:testStep type="restrequest" name="getAccountListAccount"><con:settings/><con:config service="ARTSA- Account Manager" methodName="GET - getAccounts" resourcePath="/SaasCoreAccountManager/rest/account" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="getAccountListAccount" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="utoken" value="-5334070054506634098-6307752227963074984-135591299899923713-0" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://10.200.0.124:8080</con:endpoint><con:request/><con:assertion type="Simple Contains" name="Contains"><con:configuration><token>attensity</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="getListOfAccountUsersAccountUser"><con:settings/><con:config service="ARTSA- Account Manager" resourcePath="/SaasCoreAccountManager/rest/user/account/{account}" methodName="GET - getAllUsersForAccount" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="getListOfAccountUsersAccountUser" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="utoken" value="-5334070054506634098-6307752227963074984-135591299899923713-0" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://10.200.0.124:8080</con:endpoint><con:request/><con:assertion type="Simple Contains" name="Contains"><con:configuration><token>2012</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="account" value="${#Global#illumiAccountId}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="getBrandListAccountUser"><con:settings/><con:config service="ARTSA- Account Manager" resourcePath="/SaasCoreAccountManager/rest/account/brands" methodName="GET - getBrands" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="getBrandListAccountUser" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="utoken" value="-5334070054506634098-6307752227963074984-135591299899923713-0" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://10.200.0.124:8080</con:endpoint><con:request/><con:assertion type="Simple Contains" name="Contains"><con:configuration><token>Attensity</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="uniqueAccountNameAccountUser"><con:settings/><con:config service="ARTSA- Account Manager" resourcePath="/SaasCoreAccountManager/rest/account/unique" methodName="POST - accountIsUnique" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="uniqueAccountNameAccountUser" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="utoken" value="-5334070054506634098-6307752227963074984-135591299899923713-0" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://10.200.0.124:8080</con:endpoint><con:request>{
  "id":-1,
  "name":"AttensityBlah"
}</con:request><con:assertion type="XPath Match" name="XPath Match"><con:configuration><path>declare namespace soap='http://schemas.xmlsoap.org/soap/envelope/';
declare namespace ns1='http://10.200.0.124/SaasCoreAccountManager/rest/account/unique';
//ns1:unique</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="getAccountInfoAccountUser"><con:settings/><con:config service="ARTSA- Account Manager" resourcePath="/SaasCoreAccountManager/rest/account/accountInfo" methodName="GET - getAccountInfo" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="getAccountInfoAccountUser" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="utoken" value="-5334070054506634098-6307752227963074984-135591299899923713-0" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://10.200.0.124:8080</con:endpoint><con:request/><con:assertion type="Simple Contains" name="containsForbidden"><con:configuration><token>INTERNAL</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="createAccountAccountUser"><con:settings/><con:config service="ARTSA- Account Manager" methodName="POST - update" resourcePath="/SaasCoreAccountManager/rest/account" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="createAccountAccountUser" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="utoken" value="-5334070054506634098-6307752227963074984-135591299899923713-0" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://10.200.0.124:8080</con:endpoint><con:request>{
  "id":-1,
  "name":"AccountCreateThroughAPI${#Global#currentTime}",
  "user":{
          "id":-1,
          "username":"admin",
          "email":"a@a.aa",
          "password": "admin1",
          "updatePassword":true,
          "enabled":true,
          "admin":true,
          "allowEditTopic":true,
           "userRole":{"description":"Admin",
             "roleName":"admin"
           },
          "accountAdminUser":false
         /*"preferences":{"timeZoneString":"GMT-4",
                         "timeZoneOffset":-14400000
                        },*/
         },
  "accountType":0,
  "brandName":"attensity",
  "expirationDate":1394637299000,
  "accessEli":true,
  "accessTempEditorEli":true,
  "contactName":"aa",
  "contactEmail":"a@a.aaa",
  "address":"anything goes here",
  "city":"anything goes here",
  "state":"anything goes here",
  "zipCode":"anything goes here",
  "psOwner":"anything goes here",
  "maxTopicLimit":5,
  "maxUserLimit":10,
  "maxVolumeLimit":3,
  "maxDataLimit":2
}</con:request><con:assertion type="Simple Contains" name="Contains"><con:configuration><token>PASSWORD</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="editAccountAccountUser"><con:settings/><con:config service="ARTSA- Account Manager" methodName="POST - update" resourcePath="/SaasCoreAccountManager/rest/account" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="editAccountAccountUser" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="utoken" value="-5334070054506634098-6307752227963074984-135591299899923713-0" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://10.200.0.124:8080</con:endpoint><con:request>{
  "id":${#Global#illumiAccountId},
  "name":${#Global#illumiAccountName},
  "accountType":0,
  "brand":"",
  "expirationDate":"${#Global#expirationDate}",
  "accessEli":true,
  "accessTempEditorEli":true,
  "contactName":"anything goes here",
  "contactEmail":"b@b.BBB",
  "address":"anything goes here",
  "city":"anything goes here",
  "state":"anything goes here",
  "zipCode":"anything goes here",
  "psOwner":"anything goes here",
  "maxTopicLimit":5,
  "maxUserLimit":100,
  "maxVolumeLimit":3,
  "maxDataLimit":2
}</con:request><con:assertion type="Simple Contains" name="Contains"><con:configuration><token>anything goes here</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:properties/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="accountLockDownTestCaseAdmin" searchProperties="true" id="4661304c-111e-4e38-91a1-1510ddffde25" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword=""><con:settings/><con:testStep type="restrequest" name="authIllumiAdminUser"><con:settings/><con:config service="ARTSA - UserManager" resourcePath="/SaasCoreUserManager/rest/auth" methodName="POST - authenticate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="authIllumiAdminUser" mediaType="application/json" postQueryString="false" accept=""><con:description>get token for current User</con:description><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Contest-Type" value="application/json"/>
  &lt;con:entry key="Accept" value="application/json"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>http://10.200.0.124:8080</con:endpoint><con:request>{
  "username":${#Global#illumiAdminUsername},
  "password":"${#Global#illumiAdminPassword}",
  "accountName":"${#Global#illumiAccountName}"
}</con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="authIllumiAdminResponse"><con:settings/><con:config><script>import groovy.json.JsonSlurper
import com.eviware.soapui.impl.wsdl.teststeps.*

responseContent = testRunner.testCase.getTestStepByName("authIllumiAdminUser").getPropertyValue("response")
slurperresponse = new JsonSlurper().parseText(responseContent)

authkey = (slurperresponse.authkey)
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "illumiAdminAuthKey", authkey )

//log.info authkey</script></con:config></con:testStep><con:testStep type="groovy" name="setAdminUtokenHeader"><con:settings/><con:config><script>import com.eviware.soapui.impl.wsdl.teststeps.*
import com.eviware.soapui.support.types.StringToStringMap;

def authkey = com.eviware.soapui.SoapUI.globalProperties.getPropertyValue( "illumiAdminAuthKey")
def tc = testRunner.testCase.testSuite.getTestCaseByName("accountLockDownTestCaseAdmin")
def ts11 = tc.getTestStepByName("getAccountListAdmin")
def ts12 = tc.getTestStepByName("getListOfAccountUsersAdminUser")
def ts13 = tc.getTestStepByName("getBrandListAdminUser")
def ts14 = tc.getTestStepByName("uniqueAccountNameAdminUser")
def ts15 = tc.getTestStepByName("getAccountInfoAdminUser")
def ts16 = tc.getTestStepByName("createAccountAdminUser")
def ts17 = tc.getTestStepByName("editAccountAdminUser")


def headers = new StringToStringMap()
headers.putIfMissing("utoken",authkey)

ts11.getHttpRequest().setRequestHeaders(headers)
ts12.getHttpRequest().setRequestHeaders(headers)
ts13.getHttpRequest().setRequestHeaders(headers)
ts14.getHttpRequest().setRequestHeaders(headers)
ts15.getHttpRequest().setRequestHeaders(headers)
ts16.getHttpRequest().setRequestHeaders(headers)
ts17.getHttpRequest().setRequestHeaders(headers)</script></con:config></con:testStep><con:testStep type="restrequest" name="getAccountListAdmin"><con:settings/><con:config service="ARTSA- Account Manager" methodName="GET - getAccounts" resourcePath="/SaasCoreAccountManager/rest/account" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="getAccountListAdmin" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="utoken" value="6838464156303512151-6890621167456394389--1536428201081739410-2012" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://10.200.0.124:8080</con:endpoint><con:request/><con:assertion type="Simple Contains" name="containsForbidden"><con:configuration><token>UserForbidden</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="getListOfAccountUsersAdminUser"><con:settings/><con:config service="ARTSA- Account Manager" resourcePath="/SaasCoreAccountManager/rest/user/account/{account}" methodName="GET - getAllUsersForAccount" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="getListOfAccountUsersAdminUser" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="utoken" value="6838464156303512151-6890621167456394389--1536428201081739410-2012" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://10.200.0.124:8080</con:endpoint><con:request/><con:assertion type="Simple Contains" name="Contains"><con:configuration><token>UserForbidden</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="account" value="${#Global#createAccountAccountId}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="getBrandListAdminUser"><con:settings/><con:config service="ARTSA- Account Manager" resourcePath="/SaasCoreAccountManager/rest/account/brands" methodName="GET - getBrands" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="getBrandListAdminUser" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="utoken" value="6838464156303512151-6890621167456394389--1536428201081739410-2012" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://10.200.0.124:8080</con:endpoint><con:request/><con:assertion type="Simple Contains" name="containsForbidden"><con:configuration><token>UserForbidden</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="uniqueAccountNameAdminUser"><con:settings/><con:config service="ARTSA- Account Manager" resourcePath="/SaasCoreAccountManager/rest/account/unique" methodName="POST - accountIsUnique" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="uniqueAccountNameAdminUser" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="utoken" value="6838464156303512151-6890621167456394389--1536428201081739410-2012" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://10.200.0.124:8080</con:endpoint><con:request>{
  "id":-1,
  "name":"AttensityBlah"
}</con:request><con:assertion type="Simple Contains" name="Contains"><con:configuration><token>UserForbidden</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="getAccountInfoAdminUser"><con:settings/><con:config service="ARTSA- Account Manager" resourcePath="/SaasCoreAccountManager/rest/account/accountInfo" methodName="GET - getAccountInfo" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="getAccountInfoAdminUser" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="utoken" value="6838464156303512151-6890621167456394389--1536428201081739410-2012" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://10.200.0.124:8080</con:endpoint><con:request/><con:assertion type="Simple Contains" name="containsForbidden"><con:configuration><token>UserForbidden</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="createAccountAdminUser"><con:settings/><con:config service="ARTSA- Account Manager" methodName="POST - update" resourcePath="/SaasCoreAccountManager/rest/account" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="createAccountAdminUser" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="utoken" value="6838464156303512151-6890621167456394389--1536428201081739410-2012" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://10.200.0.124:8080</con:endpoint><con:request>{
  "id":-1,
  "name":"AccountCreateThroughAPI${#Global#currentTime}",
  "user":{
          "id":-1,
          "username":"admin",
          "email":"a@a.aa",
          "password": "admin1",
          "updatePassword":true,
          "enabled":true,
          "admin":true,
          "allowEditTopic":true,
           "userRole":{"description":"Admin",
             "roleName":"admin"
           },
          "accountAdminUser":false
         /*"preferences":{"timeZoneString":"GMT-4",
                         "timeZoneOffset":-14400000
                        },*/
         },
  "accountType":0,
  "brandName":"attensity",
  "expirationDate":1394637299000,
  "accessEli":true,
  "accessTempEditorEli":true,
  "contactName":"aa",
  "contactEmail":"a@a.aaa",
  "address":"anything goes here",
  "city":"anything goes here",
  "state":"anything goes here",
  "zipCode":"anything goes here",
  "psOwner":"anything goes here",
  "maxTopicLimit":5,
  "maxUserLimit":10,
  "maxVolumeLimit":3,
  "maxDataLimit":2
}</con:request><con:assertion type="Simple Contains" name="Contains"><con:configuration><token>UserForbidden</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="editAccountAdminUser"><con:settings/><con:config service="ARTSA- Account Manager" methodName="POST - update" resourcePath="/SaasCoreAccountManager/rest/account" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="editAccountAdminUser" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="utoken" value="6838464156303512151-6890621167456394389--1536428201081739410-2012" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://10.200.0.124:8080</con:endpoint><con:request>{
  "id":${#Global#createAccountAccountId},
  "name":${#Global#createAccountAccountName},
  "accountType":0,
  "brand":"",
  "expirationDate":"${#Global#expirationDate}",
  "accessEli":true,
  "accessTempEditorEli":true,
  "contactName":"anything goes here",
  "contactEmail":"b@b.BBB",
  "address":"anything goes here",
  "city":"anything goes here",
  "state":"anything goes here",
  "zipCode":"anything goes here",
  "psOwner":"anything goes here",
  "maxTopicLimit":5,
  "maxUserLimit":10,
  "maxVolumeLimit":3,
  "maxDataLimit":2
}</con:request><con:assertion type="Simple Contains" name="Contains"><con:configuration><token>UserForbidden</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:properties/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="accountLockDoenTestCaseEditor" searchProperties="true" id="9aac21e1-587b-489a-8aef-968c9a619ee2" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword=""><con:settings/><con:testStep type="restrequest" name="authIllumiEditorUser"><con:settings/><con:config service="ARTSA - UserManager" resourcePath="/SaasCoreUserManager/rest/auth" methodName="POST - authenticate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="authIllumiEditorUser" mediaType="application/json" postQueryString="false" accept=""><con:description>get token for current User</con:description><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Contest-Type" value="application/json"/>
  &lt;con:entry key="Accept" value="application/json"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>http://10.200.0.124:8080</con:endpoint><con:request>{
  "username":${#Global#illumiEditorUsername},
  "password":"${#Global#illumiEditorPassword}",
  "accountName":"${#Global#illumiAccountName}"
}</con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="authIllumiEditorResponse"><con:settings/><con:config><script>import groovy.json.JsonSlurper
import com.eviware.soapui.impl.wsdl.teststeps.*

responseContent = testRunner.testCase.getTestStepByName("authIllumiEditorUser").getPropertyValue("response")
slurperresponse = new JsonSlurper().parseText(responseContent)

authkey = (slurperresponse.authkey)
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "illumiEditorAuthKey", authkey )

//log.info authkey</script></con:config></con:testStep><con:testStep type="groovy" name="setEditorUtokenHeader"><con:settings/><con:config><script>import com.eviware.soapui.impl.wsdl.teststeps.*
import com.eviware.soapui.support.types.StringToStringMap;

def authkey = com.eviware.soapui.SoapUI.globalProperties.getPropertyValue( "illumiEditorAuthKey")
def tc = testRunner.testCase.testSuite.getTestCaseByName("accountLockDoenTestCaseEditor")
def ts11 = tc.getTestStepByName("getAccountListEditor")
def ts12 = tc.getTestStepByName("getListOfAccountUsersEditorUser")
def ts13 = tc.getTestStepByName("getBrandListEditorUser")
def ts14 = tc.getTestStepByName("uniqueAccountNameEditorUser")
def ts15 = tc.getTestStepByName("getAccountInfoEditorUser")
def ts16 = tc.getTestStepByName("createAccountEditorUser")
def ts17 = tc.getTestStepByName("editAccountEditorUser")


def headers = new StringToStringMap()
headers.putIfMissing("utoken",authkey)

ts11.getHttpRequest().setRequestHeaders(headers)
ts12.getHttpRequest().setRequestHeaders(headers)
ts13.getHttpRequest().setRequestHeaders(headers)
ts14.getHttpRequest().setRequestHeaders(headers)
ts15.getHttpRequest().setRequestHeaders(headers)
ts16.getHttpRequest().setRequestHeaders(headers)
ts17.getHttpRequest().setRequestHeaders(headers)</script></con:config></con:testStep><con:testStep type="restrequest" name="getAccountListEditor"><con:settings/><con:config service="ARTSA- Account Manager" methodName="GET - getAccounts" resourcePath="/SaasCoreAccountManager/rest/account" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="getAccountListEditor" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="utoken" value="-8005904498125077961--7562305695191763483-8158442387689680272-2012" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://10.200.0.124:8080</con:endpoint><con:request/><con:assertion type="Simple Contains" name="containsForbidden"><con:configuration><token>UserForbidden</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="getListOfAccountUsersEditorUser"><con:settings/><con:config service="ARTSA- Account Manager" resourcePath="/SaasCoreAccountManager/rest/user/account/{account}" methodName="GET - getAllUsersForAccount" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="getListOfAccountUsersEditorUser" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="utoken" value="-8005904498125077961--7562305695191763483-8158442387689680272-2012" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://10.200.0.124:8080</con:endpoint><con:request/><con:assertion type="Simple Contains" name="Contains"><con:configuration><token>UserForbidden</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="account" value="${#Global#createAccountAccountId}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="getBrandListEditorUser"><con:settings/><con:config service="ARTSA- Account Manager" resourcePath="/SaasCoreAccountManager/rest/account/brands" methodName="GET - getBrands" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="getBrandListEditorUser" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="utoken" value="-8005904498125077961--7562305695191763483-8158442387689680272-2012" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://10.200.0.124:8080</con:endpoint><con:request/><con:assertion type="Simple Contains" name="containsForbidden"><con:configuration><token>UserForbidden</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="uniqueAccountNameEditorUser"><con:settings/><con:config service="ARTSA- Account Manager" resourcePath="/SaasCoreAccountManager/rest/account/unique" methodName="POST - accountIsUnique" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="uniqueAccountNameEditorUser" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="utoken" value="-8005904498125077961--7562305695191763483-8158442387689680272-2012" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://10.200.0.124:8080</con:endpoint><con:request>{
  "id":-1,
  "name":"AttensityBlah"
}</con:request><con:assertion type="Simple Contains" name="Contains"><con:configuration><token>UserForbidden</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="getAccountInfoEditorUser"><con:settings/><con:config service="ARTSA- Account Manager" resourcePath="/SaasCoreAccountManager/rest/account/accountInfo" methodName="GET - getAccountInfo" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="getAccountInfoEditorUser" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="utoken" value="-8005904498125077961--7562305695191763483-8158442387689680272-2012" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://10.200.0.124:8080</con:endpoint><con:request/><con:assertion type="Simple Contains" name="containsForbidden"><con:configuration><token>UserForbidden</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="createAccountEditorUser"><con:settings/><con:config service="ARTSA- Account Manager" methodName="POST - update" resourcePath="/SaasCoreAccountManager/rest/account" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="createAccountEditorUser" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="utoken" value="-8005904498125077961--7562305695191763483-8158442387689680272-2012" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://10.200.0.124:8080</con:endpoint><con:request>{
  "id":-1,
  "name":"AccountCreateThroughAPI${#Global#currentTime}",
  "user":{
          "id":-1,
          "username":"admin",
          "email":"a@a.aa",
          "password": "admin1",
          "updatePassword":true,
          "enabled":true,
          "admin":true,
          "allowEditTopic":true,
           "userRole":{"description":"Admin",
             "roleName":"admin"
           },
          "accountAdminUser":false
         /*"preferences":{"timeZoneString":"GMT-4",
                         "timeZoneOffset":-14400000
                        },*/
         },
  "accountType":0,
  "brandName":"attensity",
  "expirationDate":1394637299000,
  "accessEli":true,
  "accessTempEditorEli":true,
  "contactName":"aa",
  "contactEmail":"a@a.aaa",
  "address":"anything goes here",
  "city":"anything goes here",
  "state":"anything goes here",
  "zipCode":"anything goes here",
  "psOwner":"anything goes here",
  "maxTopicLimit":5,
  "maxUserLimit":10,
  "maxVolumeLimit":3,
  "maxDataLimit":2
}</con:request><con:assertion type="Simple Contains" name="Contains"><con:configuration><token>UserForbidden</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="editAccountEditorUser"><con:settings/><con:config service="ARTSA- Account Manager" methodName="POST - update" resourcePath="/SaasCoreAccountManager/rest/account" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="editAccountEditorUser" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="utoken" value="-8005904498125077961--7562305695191763483-8158442387689680272-2012" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://10.200.0.124:8080</con:endpoint><con:request>{
  "id":${#Global#createAccountAccountId},
  "name":${#Global#createAccountAccountName},
  "accountType":0,
  "brand":"",
  "expirationDate":"${#Global#expirationDate}",
  "accessEli":true,
  "accessTempEditorEli":true,
  "contactName":"anything goes here",
  "contactEmail":"b@b.BBB",
  "address":"anything goes here",
  "city":"anything goes here",
  "state":"anything goes here",
  "zipCode":"anything goes here",
  "psOwner":"anything goes here",
  "maxTopicLimit":5,
  "maxUserLimit":10,
  "maxVolumeLimit":3,
  "maxDataLimit":2
}</con:request><con:assertion type="Simple Contains" name="Contains"><con:configuration><token>UserForbidden</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:properties/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="accountLockDoenTestCaseReadOnly" searchProperties="true" id="ada3d07b-f787-43d7-b5a3-8c59a1e97148" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword=""><con:settings/><con:testStep type="restrequest" name="authIllumiReadOnlyUser"><con:settings/><con:config service="ARTSA - UserManager" resourcePath="/SaasCoreUserManager/rest/auth" methodName="POST - authenticate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="authIllumiReadOnlyUser" mediaType="application/json" postQueryString="false" accept=""><con:description>get token for current User</con:description><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Contest-Type" value="application/json"/>
  &lt;con:entry key="Accept" value="application/json"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>http://10.200.0.124:8080</con:endpoint><con:request>{
  "username":"readonly",
  "password":"${#Global#illumiUserPassword}",
  "accountName":"${#Global#illumiAccountName}"
}</con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="authIllumiReadOnlyResponse"><con:settings/><con:config><script>import groovy.json.JsonSlurper
import com.eviware.soapui.impl.wsdl.teststeps.*

responseContent = testRunner.testCase.getTestStepByName("authIllumiReadOnlyUser").getPropertyValue("response")
slurperresponse = new JsonSlurper().parseText(responseContent)

authkey = (slurperresponse.authkey)
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "illumiReadOnlyAuthKey", authkey )

//log.info authkey</script></con:config></con:testStep><con:testStep type="groovy" name="setEditorUtokenHeader"><con:settings/><con:config><script>import com.eviware.soapui.impl.wsdl.teststeps.*
import com.eviware.soapui.support.types.StringToStringMap;

def authkey = com.eviware.soapui.SoapUI.globalProperties.getPropertyValue( "illumiReadOnlyAuthKey")
def tc = testRunner.testCase.testSuite.getTestCaseByName("accountLockDoenTestCaseReadOnly")
def ts11 = tc.getTestStepByName("getAccountListReadOnly")
def ts12 = tc.getTestStepByName("getListOfAccountUsersReadOnlyUser")
def ts13 = tc.getTestStepByName("getBrandListReadOnlyUser")
def ts14 = tc.getTestStepByName("uniqueAccountNameReadOnlyUser")
def ts15 = tc.getTestStepByName("getAccountInfoReadOnlyUser")
def ts16 = tc.getTestStepByName("createAccountReadOnlyUser")
def ts17 = tc.getTestStepByName("editAccountReadOnlyUser")


def headers = new StringToStringMap()
headers.putIfMissing("utoken",authkey)

ts11.getHttpRequest().setRequestHeaders(headers)
ts12.getHttpRequest().setRequestHeaders(headers)
ts13.getHttpRequest().setRequestHeaders(headers)
ts14.getHttpRequest().setRequestHeaders(headers)
ts15.getHttpRequest().setRequestHeaders(headers)
ts16.getHttpRequest().setRequestHeaders(headers)
ts17.getHttpRequest().setRequestHeaders(headers)</script></con:config></con:testStep><con:testStep type="restrequest" name="getAccountListReadOnly"><con:settings/><con:config service="ARTSA- Account Manager" methodName="GET - getAccounts" resourcePath="/SaasCoreAccountManager/rest/account" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="getAccountListReadOnly" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="utoken" value="3065730456409420666--8052612439367513433-2265961312625344581-2012" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://10.200.0.124:8080</con:endpoint><con:request/><con:assertion type="Simple Contains" name="containsForbidden"><con:configuration><token>UserForbidden</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="getListOfAccountUsersReadOnlyUser"><con:settings/><con:config service="ARTSA- Account Manager" resourcePath="/SaasCoreAccountManager/rest/user/account/{account}" methodName="GET - getAllUsersForAccount" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="getListOfAccountUsersReadOnlyUser" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="utoken" value="3065730456409420666--8052612439367513433-2265961312625344581-2012" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://10.200.0.124:8080</con:endpoint><con:request/><con:assertion type="Simple Contains" name="Contains"><con:configuration><token>UserForbidden</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="account" value="${#Global#createAccountAccountId}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="getBrandListReadOnlyUser"><con:settings/><con:config service="ARTSA- Account Manager" resourcePath="/SaasCoreAccountManager/rest/account/brands" methodName="GET - getBrands" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="getBrandListReadOnlyUser" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="utoken" value="3065730456409420666--8052612439367513433-2265961312625344581-2012" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://10.200.0.124:8080</con:endpoint><con:request/><con:assertion type="Simple Contains" name="containsForbidden"><con:configuration><token>UserForbidden</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="uniqueAccountNameReadOnlyUser"><con:settings/><con:config service="ARTSA- Account Manager" resourcePath="/SaasCoreAccountManager/rest/account/unique" methodName="POST - accountIsUnique" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="uniqueAccountNameReadOnlyUser" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="utoken" value="3065730456409420666--8052612439367513433-2265961312625344581-2012" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://10.200.0.124:8080</con:endpoint><con:request>{
  "id":-1,
  "name":"AttensityBlah"
}</con:request><con:assertion type="Simple Contains" name="Contains"><con:configuration><token>UserForbidden</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="getAccountInfoReadOnlyUser"><con:settings/><con:config service="ARTSA- Account Manager" resourcePath="/SaasCoreAccountManager/rest/account/accountInfo" methodName="GET - getAccountInfo" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="getAccountInfoReadOnlyUser" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="utoken" value="3065730456409420666--8052612439367513433-2265961312625344581-2012" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://10.200.0.124:8080</con:endpoint><con:request/><con:assertion type="Simple Contains" name="containsForbidden"><con:configuration><token>UserForbidden</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="createAccountReadOnlyUser"><con:settings/><con:config service="ARTSA- Account Manager" methodName="POST - update" resourcePath="/SaasCoreAccountManager/rest/account" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="createAccountReadOnlyUser" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="utoken" value="3065730456409420666--8052612439367513433-2265961312625344581-2012" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://10.200.0.124:8080</con:endpoint><con:request>{
  "id":-1,
  "name":"AccountCreateThroughAPI${#Global#currentTime}",
  "user":{
          "id":-1,
          "username":"admin",
          "email":"a@a.aa",
          "password": "admin1",
          "updatePassword":true,
          "enabled":true,
          "admin":true,
          "allowEditTopic":true,
           "userRole":{"description":"Admin",
             "roleName":"admin"
           },
          "accountAdminUser":false
         /*"preferences":{"timeZoneString":"GMT-4",
                         "timeZoneOffset":-14400000
                        },*/
         },
  "accountType":0,
  "brandName":"attensity",
  "expirationDate":1394637299000,
  "accessEli":true,
  "accessTempEditorEli":true,
  "contactName":"aa",
  "contactEmail":"a@a.aaa",
  "address":"anything goes here",
  "city":"anything goes here",
  "state":"anything goes here",
  "zipCode":"anything goes here",
  "psOwner":"anything goes here",
  "maxTopicLimit":5,
  "maxUserLimit":10,
  "maxVolumeLimit":3,
  "maxDataLimit":2
}</con:request><con:assertion type="Simple Contains" name="Contains"><con:configuration><token>UserForbidden</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="editAccountReadOnlyUser"><con:settings/><con:config service="ARTSA- Account Manager" methodName="POST - update" resourcePath="/SaasCoreAccountManager/rest/account" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="editAccountReadOnlyUser" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="utoken" value="3065730456409420666--8052612439367513433-2265961312625344581-2012" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://10.200.0.124:8080</con:endpoint><con:request>{
  "id":${#Global#createAccountAccountId},
  "name":${#Global#createAccountAccountName},
  "accountType":0,
  "brand":"",
  "expirationDate":"${#Global#expirationDate}",
  "accessEli":true,
  "accessTempEditorEli":true,
  "contactName":"anything goes here",
  "contactEmail":"b@b.BBB",
  "address":"anything goes here",
  "city":"anything goes here",
  "state":"anything goes here",
  "zipCode":"anything goes here",
  "psOwner":"anything goes here",
  "maxTopicLimit":5,
  "maxUserLimit":10,
  "maxVolumeLimit":3,
  "maxDataLimit":2
}</con:request><con:assertion type="Simple Contains" name="Contains"><con:configuration><token>UserForbidden</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:properties/></con:testCase><con:properties/></con:testSuite><con:testSuite name="userLockDownTestSuite"><con:description>This Test Suite is to test to ensure User administration is locked down based on roles.

Assertions have been made to either pass or fail the test cases.</con:description><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="UserLockDownTestCaseAccount" searchProperties="true" id="9b1b8ae5-9d40-4083-a1cf-62faf6c1d39b" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword=""><con:settings/><con:testStep type="groovy" name="setTime"><con:settings/><con:config><script>Calendar sod = Calendar.instance
    sod.set(Calendar.AM_PM, 0)
    sod.set(Calendar.HOUR, 0)
    sod.set(Calendar.MINUTE, 0)
    sod.set(Calendar.SECOND, 0)
    sod.set(Calendar.MILLISECOND, 0)
start = sod.time 
sqlstart = start.format('MM-dd-yy HH:mm:ss')
//log.info "SQL Start Time:  " + sqlstart
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "querysqlstart", sqlstart )

Calendar eod = Calendar.instance
    eod.set(Calendar.AM_PM, 0)
    eod.set(Calendar.HOUR, 9)
    eod.set(Calendar.MINUTE, 59)
    eod.set(Calendar.SECOND, 59)
    eod.set(Calendar.MILLISECOND, 999)
end = eod.time 
sqlend = end.format('MM-dd-yy HH:mm:ss')
//log.info "SQL End Time:  " + sqlend
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "querysqlend", sqlend )

offset = sod.get(Calendar.ZONE_OFFSET) + sod.get(Calendar.DST_OFFSET) / (60 * 1000)

starttime = start.time
epochstart = starttime + offset
//log.info "Epoch Start Time:  " + epochstart
def epochstart = epochstart as String
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "queryepochstart", epochstart )
def timestampstart = epochstart as Long
Date tss = new Date(timestampstart)
//log.info "Time to select in local timezone:  "+ tss

endtime = end.time
epochend = endtime + offset
//log.info "Epoch End Time:  " + epochend
def epochend = epochend as String
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "queryepochend", epochend )
def timestampend = epochend as Long
Date tse = new Date(timestampend)
//log.info "Time to select in local timezone:  "+ tse

now = Calendar.instance
today = now.time
millis = today.time
//log.info "Current time in milli-seconds:  " + millis
def today = new Date (millis)
//log.info "Current Local Time:  "+ today
tf = today.format('MM dd yy HH mm ss')
//log.info "Current Local Time nicely formatted:  "+ tf
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "time", tf )
millis = today.time as String
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "currentTime", millis )

secondsInHour = 3600000
secondsInDay = 24*secondsInHour as Long
secondsInMonth = 30*secondsInDay as Long
expirationDate = starttime+secondsInMonth as String
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "expirationDate", expirationDate )</script></con:config></con:testStep><con:testStep type="restrequest" name="authAccountUser"><con:settings/><con:config service="ARTSA- Account Manager" resourcePath="/SaasCoreAccountManager/rest/accountauth" methodName="POST - authenticate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="authAccountUser" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://10.200.0.124:8080</con:endpoint><con:request>{
  "username":${#Global#illumiAccountUsername},
  "password":${#Global#illumiAccountPassword}
}</con:request><con:assertion type="XPath Match" name="XPath Match"><con:configuration><path>declare namespace soap='http://schemas.xmlsoap.org/soap/envelope/';
declare namespace ns1='http://10.200.0.124/SaasCoreAccountManager/rest/accountauth';
//ns1:loginFailed</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="username" value="${#Global#illumiAccountUsername}"/>
  <con:entry key="password" value="${#Global#illumiAccountPassword}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="authResponse"><con:settings/><con:config><script>import groovy.json.JsonSlurper
import com.eviware.soapui.impl.wsdl.teststeps.*

responseContent = testRunner.testCase.getTestStepByName("authAccountUser").getPropertyValue("response")
slurperresponse = new JsonSlurper().parseText(responseContent)

authkey = (slurperresponse.authkey)
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "illumiAccountAuthKey", authkey )

//log.info authkey</script></con:config></con:testStep><con:testStep type="groovy" name="setUtokenHeader"><con:settings/><con:config><script>import com.eviware.soapui.impl.wsdl.teststeps.*
import com.eviware.soapui.support.types.StringToStringMap;

def authkey = com.eviware.soapui.SoapUI.globalProperties.getPropertyValue( "illumiAccountAuthKey")
def tc = testRunner.testCase.testSuite.getTestCaseByName("UserLockDownTestCaseAccount")
def ts11 = tc.getTestStepByName("createAdminUserFromAccount")
def ts12 = tc.getTestStepByName("createEditorUserFromAccount")
def ts13 = tc.getTestStepByName("createReadOnlyUserFromAccount")
def ts14 = tc.getTestStepByName("listUsernameAccount")
def ts15 = tc.getTestStepByName("uniqueUserNameAccount")
def ts16 = tc.getTestStepByName("updateEditorUserEmailAccount")
def ts17 = tc.getTestStepByName("updateReadOnlyPasswordAccount")
def ts18 = tc.getTestStepByName("updateEditorPermissionsAccount")
def ts19 = tc.getTestStepByName("deleteAdminUserAccount")
def ts110 = tc.getTestStepByName("deleteEditorUserAccount")
def ts111 = tc.getTestStepByName("deleteReadOnlyUserAccount")



def headers = new StringToStringMap()
headers.putIfMissing("utoken",authkey)

ts11.getHttpRequest().setRequestHeaders(headers)
ts12.getHttpRequest().setRequestHeaders(headers)
ts13.getHttpRequest().setRequestHeaders(headers)
ts14.getHttpRequest().setRequestHeaders(headers)
ts15.getHttpRequest().setRequestHeaders(headers)
ts16.getHttpRequest().setRequestHeaders(headers)
ts17.getHttpRequest().setRequestHeaders(headers)
ts18.getHttpRequest().setRequestHeaders(headers)
ts19.getHttpRequest().setRequestHeaders(headers)
ts110.getHttpRequest().setRequestHeaders(headers)
ts111.getHttpRequest().setRequestHeaders(headers)</script></con:config></con:testStep><con:testStep type="restrequest" name="createAdminUserFromAccount"><con:settings/><con:config service="ARTSA- Account Manager" resourcePath="/SaasCoreAccountManager/rest/user" methodName="POST - updateUser" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="createAdminUserFromAccount" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="utoken" value="-5078884223399430052--6787474239751519315-675236664717351367-0" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://10.200.0.124:8080</con:endpoint><con:request>{
  "id":-1,
  "account": ${#Global#illumiAccountId},
  "accountName":"${#Global#illumiAccountName}",
  "username":"illumiAdminUserFromAccount${#Global#currentTime}",
  "email": "blahblahblah@attensity.com",
  "password": "P@ssword1",
  "updatePassword":true,
  "enabled": true,
  "accountType": 0,
  "brandName": "attensity",
    "userRole": {
      "roleName": "admin"
    },
  "preferences": {
      "timeZoneString": "GMT-4",
      "timeZoneOffset": -14400000
  }
}</con:request><con:assertion type="XPath Match" name="roleNameAdmin"><con:configuration><path>declare namespace soap='http://schemas.xmlsoap.org/soap/envelope/';
declare namespace ns1='http://10.200.0.124/SaasCoreAccountManager/rest/user';
//ns1:roleName</path><content>admin</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="adminUserResponseFromAccount"><con:settings/><con:config><script>import groovy.json.JsonSlurper
import com.eviware.soapui.impl.wsdl.teststeps.*

responseContent = testRunner.testCase.getTestStepByName("createAdminUserFromAccount").getPropertyValue("response")
slurperresponse = new JsonSlurper().parseText(responseContent)

def account = (slurperresponse.account) as String
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "illumiAdminUserFromAccountAccountId", account )

def id = (slurperresponse.id) as String
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "illumiAdminUserFromAccountUserId", id )

def userName = (slurperresponse.username) as String
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "illumiAdminUserFromAccountUsername", userName )

//log.info id</script></con:config></con:testStep><con:testStep type="restrequest" name="createEditorUserFromAccount"><con:settings/><con:config service="ARTSA- Account Manager" resourcePath="/SaasCoreAccountManager/rest/user" methodName="POST - updateUser" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="createEditorUserFromAccount" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="utoken" value="-5078884223399430052--6787474239751519315-675236664717351367-0" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://10.200.0.124:8080</con:endpoint><con:request>{
  "id":-1,
  "account": ${#Global#illumiAccountId},
  "accountName":"${#Global#illumiAccountName}",
  "username":"illumiEditorUserFromAccount${#Global#currentTime}",
  "email": "blahblahblah@attensity.com",
  "password": "P@ssword1",
  "updatePassword":true,
  "enabled": true,
  "accountType": 0,
  "brandName": "attensity",
    "userRole": {
      "roleName": "editor"
    },
  "preferences": {
      "timeZoneString": "GMT-4",
      "timeZoneOffset": -14400000
  }
}</con:request><con:assertion type="XPath Match" name="roleNameEditor"><con:configuration><path>declare namespace soap='http://schemas.xmlsoap.org/soap/envelope/';
declare namespace ns1='http://10.200.0.124/SaasCoreAccountManager/rest/user';
//ns1:roleName</path><content>editor</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="editorUserResponse"><con:settings/><con:config><script>import groovy.json.JsonSlurper
import com.eviware.soapui.impl.wsdl.teststeps.*

responseContent = testRunner.testCase.getTestStepByName("createEditorUserFromAccount").getPropertyValue("response")
slurperresponse = new JsonSlurper().parseText(responseContent)

def account = (slurperresponse.account) as String
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "illumiEditornUserFromAccountAccountId", account )

def id = (slurperresponse.id) as String
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "illumiEditorUserFromAccountUserId", id )

def userName = (slurperresponse.username) as String
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "illumiEditorUserFromAccountUsername", userName )

//log.info id</script></con:config></con:testStep><con:testStep type="restrequest" name="createReadOnlyUserFromAccount"><con:settings/><con:config service="ARTSA- Account Manager" resourcePath="/SaasCoreAccountManager/rest/user" methodName="POST - updateUser" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="createReadOnlyUserFromAccount" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="utoken" value="-5078884223399430052--6787474239751519315-675236664717351367-0" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://10.200.0.124:8080</con:endpoint><con:request>{
  "id":-1,
  "account": ${#Global#illumiAccountId},
  "accountName":"${#Global#illumiAccountName}",
  "username":"illumiReadOnlyUserFromAccount${#Global#currentTime}",
  "email": "blahblahblah@attensity.com",
  "password": "P@ssword100",
  "updatePassword":true,
  "enabled": true,
  "accountType": 0,
  "brandName": "attensity",
    "userRole": {
      "roleName": "read_only"
    },
  "preferences": {
      "timeZoneString": "GMT-4",
      "timeZoneOffset": -14400000
  }
}</con:request><con:assertion type="XPath Match" name="XPath Match"><con:configuration><path>declare namespace soap='http://schemas.xmlsoap.org/soap/envelope/';
declare namespace ns1='http://10.200.0.124/SaasCoreAccountManager/rest/user';
//ns1:roleName</path><content>read_only</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="readOnlyUserResponse"><con:settings/><con:config><script>import groovy.json.JsonSlurper
import com.eviware.soapui.impl.wsdl.teststeps.*

responseContent = testRunner.testCase.getTestStepByName("createReadOnlyUserFromAccount").getPropertyValue("response")
slurperresponse = new JsonSlurper().parseText(responseContent)

def account = (slurperresponse.account) as String
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "illumiReadOnlyUserFromAccountAccountId", account )

def id = (slurperresponse.id) as String
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "illumiReadOnlyUserFromAccountUserId", id )

def userName = (slurperresponse.username) as String
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "illumiReadOnlyUserFromAccountUsername", userName )

//log.info id</script></con:config></con:testStep><con:testStep type="restrequest" name="listUsernameAccount"><con:settings/><con:config service="ARTSA- Account Manager" methodName="GET - getAllUsersForAccount" resourcePath="/SaasCoreAccountManager/rest/user/account/{account}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="listUsernameAccount" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="utoken" value="-5078884223399430052--6787474239751519315-675236664717351367-0" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://10.200.0.124:8080</con:endpoint><con:request/><con:assertion type="Simple Contains" name="Contains"><con:configuration><token>${#Global#illumiAccountId}</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="account" value="${#Global#illumiAccountId}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="uniqueUserNameAccount"><con:settings/><con:config service="ARTSA- Account Manager" methodName="POST - userIsUnique" resourcePath="/SaasCoreAccountManager/rest/user/unique" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="uniqueUserNameAccount" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="utoken" value="-5078884223399430052--6787474239751519315-675236664717351367-0" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://10.200.0.124:8080</con:endpoint><con:request>{
  "account":${#Global#illumiAccountId},
  "username":"blahblahblahblah1234567890"
}</con:request><con:assertion type="Simple Contains" name="Contains"><con:configuration><token>true</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="updateEditorUserEmailAccount"><con:settings/><con:config service="ARTSA- Account Manager" methodName="POST - updateUser" resourcePath="/SaasCoreAccountManager/rest/user" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="updateEditorUserEmailAccount" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="utoken" value="-5078884223399430052--6787474239751519315-675236664717351367-0" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://10.200.0.124:8080</con:endpoint><con:request>{
  "id":"${#Global#illumiEditorUserFromAccountUserId}",
  "email": "changedbyaccount@a.com"
}</con:request><con:assertion type="Simple Contains" name="containsNewEmail"><con:configuration><token>changedbyaccount@a.com</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="updateReadOnlyPasswordAccount"><con:settings/><con:config service="ARTSA- Account Manager" methodName="POST - updateUser" resourcePath="/SaasCoreAccountManager/rest/user" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="updateReadOnlyPasswordAccount" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="utoken" value="-5078884223399430052--6787474239751519315-675236664717351367-0" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://10.200.0.124:8080</con:endpoint><con:request>{
  "id":${#Global#illumiReadOnlyUserFromAccountUserId},
  "password": "${#Global#illumiReadOnlyPassword}",
  "updatePassword":true
}</con:request><con:assertion type="Simple Contains" name="containsNewPassword"><con:configuration><token>P@ssword1</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="updateEditorPermissionsAccount"><con:settings/><con:config service="ARTSA- Account Manager" methodName="POST - updateUser" resourcePath="/SaasCoreAccountManager/rest/user" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="updateEditorPermissionsAccount" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="utoken" value="-5078884223399430052--6787474239751519315-675236664717351367-0" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://10.200.0.124:8080</con:endpoint><con:request>{
  "id": ${#Global#illumiEditorUserFromAccountUserId},
  "account": ${#Global#illumiAccountId},
  "accountName": ${#Global#illumiAccountName},
  "username": ${#Global#illumiEditorUserFromAccountUsername},
  "enabled": true,
  "accountType": 0,
  "brandName": "attensity",
    "userRole": {
      "roleName": "read_only"
  },
  "preferences": {
      "timeZoneString": "GMT-6",
      "timeZoneOffset": -21600000
  }
}</con:request><con:assertion type="XPath Match" name="XPathRoleNameReadOnly"><con:configuration><path>declare namespace soap='http://schemas.xmlsoap.org/soap/envelope/';
declare namespace ns1='http://10.200.0.124/SaasCoreAccountManager/rest/user';
//ns1:roleName</path><content>read_only</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="deleteAdminUserAccount"><con:settings/><con:config service="ARTSA- Account Manager" methodName="DELETE - deleteUser" resourcePath="/SaasCoreAccountManager/rest/user/{id}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="deleteAdminUserAccount" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="utoken" value="-5078884223399430052--6787474239751519315-675236664717351367-0" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://10.200.0.124:8080</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="id" value="${#Global#illumiAdminUserFromAccountUserId}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="deleteEditorUserAccount"><con:settings/><con:config service="ARTSA- Account Manager" methodName="DELETE - deleteUser" resourcePath="/SaasCoreAccountManager/rest/user/{id}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="deleteEditorUserAccount" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="utoken" value="-5078884223399430052--6787474239751519315-675236664717351367-0" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://10.200.0.124:8080</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="id" value="${#Global#illumiEditorUserFromAccountUserId}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="deleteReadOnlyUserAccount"><con:settings/><con:config service="ARTSA- Account Manager" methodName="DELETE - deleteUser" resourcePath="/SaasCoreAccountManager/rest/user/{id}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="deleteReadOnlyUserAccount" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="utoken" value="-5078884223399430052--6787474239751519315-675236664717351367-0" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://10.200.0.124:8080</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="id" value="${#Global#illumiReadOnlyUserFromAccountUserId}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:properties/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="UserLockDownTestCaseAdmin" searchProperties="true" id="6720c736-0389-4cf5-a809-3a753e447400" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword=""><con:settings/><con:testStep type="groovy" name="setTime"><con:settings/><con:config><script>Calendar sod = Calendar.instance
    sod.set(Calendar.AM_PM, 0)
    sod.set(Calendar.HOUR, 0)
    sod.set(Calendar.MINUTE, 0)
    sod.set(Calendar.SECOND, 0)
    sod.set(Calendar.MILLISECOND, 0)
start = sod.time 
sqlstart = start.format('MM-dd-yy HH:mm:ss')
//log.info "SQL Start Time:  " + sqlstart
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "querysqlstart", sqlstart )

Calendar eod = Calendar.instance
    eod.set(Calendar.AM_PM, 0)
    eod.set(Calendar.HOUR, 9)
    eod.set(Calendar.MINUTE, 59)
    eod.set(Calendar.SECOND, 59)
    eod.set(Calendar.MILLISECOND, 999)
end = eod.time 
sqlend = end.format('MM-dd-yy HH:mm:ss')
//log.info "SQL End Time:  " + sqlend
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "querysqlend", sqlend )

offset = sod.get(Calendar.ZONE_OFFSET) + sod.get(Calendar.DST_OFFSET) / (60 * 1000)

starttime = start.time
epochstart = starttime + offset
//log.info "Epoch Start Time:  " + epochstart
def epochstart = epochstart as String
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "queryepochstart", epochstart )
def timestampstart = epochstart as Long
Date tss = new Date(timestampstart)
//log.info "Time to select in local timezone:  "+ tss

endtime = end.time
epochend = endtime + offset
//log.info "Epoch End Time:  " + epochend
def epochend = epochend as String
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "queryepochend", epochend )
def timestampend = epochend as Long
Date tse = new Date(timestampend)
//log.info "Time to select in local timezone:  "+ tse

now = Calendar.instance
today = now.time
millis = today.time
//log.info "Current time in milli-seconds:  " + millis
def today = new Date (millis)
//log.info "Current Local Time:  "+ today
tf = today.format('MM dd yy HH mm ss')
//log.info "Current Local Time nicely formatted:  "+ tf
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "time", tf )
millis = today.time as String
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "currentTime", millis )

secondsInHour = 3600000
secondsInDay = 24*secondsInHour as Long
secondsInMonth = 30*secondsInDay as Long
expirationDate = starttime+secondsInMonth as String
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "expirationDate", expirationDate )</script></con:config></con:testStep><con:testStep type="restrequest" name="authIllumiAdminUser"><con:settings/><con:config service="ARTSA - UserManager" resourcePath="/SaasCoreUserManager/rest/auth" methodName="POST - authenticate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="authIllumiAdminUser" mediaType="application/json" postQueryString="false" accept=""><con:description>get token for current User</con:description><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Contest-Type" value="application/json"/>
  &lt;con:entry key="Accept" value="application/json"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>http://10.200.0.124:8080</con:endpoint><con:request>{
  "username":"${#Global#illumiAdminUsername}",
  "password":"${#Global#illumiAdminPassword}",
  "accountName":"${#Global#illumiAccountName}"
}</con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="authIllumiAdminResponse"><con:settings/><con:config><script>import groovy.json.JsonSlurper
import com.eviware.soapui.impl.wsdl.teststeps.*

responseContent = testRunner.testCase.getTestStepByName("authIllumiAdminUser").getPropertyValue("response")
slurperresponse = new JsonSlurper().parseText(responseContent)

authkey = (slurperresponse.authkey)
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "illumiAdminAuthKey", authkey )

//log.info authkey</script></con:config></con:testStep><con:testStep type="groovy" name="setAdminUtokenHeader"><con:settings/><con:config><script>import com.eviware.soapui.impl.wsdl.teststeps.*
import com.eviware.soapui.support.types.StringToStringMap;

def authkey = com.eviware.soapui.SoapUI.globalProperties.getPropertyValue( "illumiAdminAuthKey")
def tc = testRunner.testCase.testSuite.getTestCaseByName("UserLockDownTestCaseAdmin")
def ts11 = tc.getTestStepByName("createAdminUserFromAdmin")
def ts12 = tc.getTestStepByName("createEditorUserFromAdmin")
def ts13 = tc.getTestStepByName("createReadOnlyUserFromAdmin")
def ts14 = tc.getTestStepByName("listUsernameAdmin")
def ts15 = tc.getTestStepByName("uniqueUserNameAdmin")
def ts16 = tc.getTestStepByName("updateUserEmailAdmin")
def ts17 = tc.getTestStepByName("updateAnotherUserEmailAdmin")
def ts18 = tc.getTestStepByName("updateUserPasswordAdmin")
def ts19 = tc.getTestStepByName("updateAnotherUserPasswordAdmin")
def ts110 = tc.getTestStepByName("updateUserPermissionsAdmin")
def ts111 = tc.getTestStepByName("updateAnotherUserPermissionsAdmin")
def ts112 = tc.getTestStepByName("deleteUserAdmin")
def ts113 = tc.getTestStepByName("deleteUserEditor")
def ts114 = tc.getTestStepByName("deleteUserReadOnly")
def ts115 = tc.getTestStepByName("setPermissionsToAdmin")
def ts116 = tc.getTestStepByName("setPermissionsToEditor")
def ts117 = tc.getTestStepByName("setPermissionsToReadOnly")




def headers = new StringToStringMap()
headers.putIfMissing("utoken",authkey)

ts11.getHttpRequest().setRequestHeaders(headers)
ts12.getHttpRequest().setRequestHeaders(headers)
ts13.getHttpRequest().setRequestHeaders(headers)
ts14.getHttpRequest().setRequestHeaders(headers)
ts15.getHttpRequest().setRequestHeaders(headers)
ts16.getHttpRequest().setRequestHeaders(headers)
ts17.getHttpRequest().setRequestHeaders(headers)
ts18.getHttpRequest().setRequestHeaders(headers)
ts19.getHttpRequest().setRequestHeaders(headers)
ts110.getHttpRequest().setRequestHeaders(headers)
ts111.getHttpRequest().setRequestHeaders(headers)
ts112.getHttpRequest().setRequestHeaders(headers)
ts113.getHttpRequest().setRequestHeaders(headers)
ts114.getHttpRequest().setRequestHeaders(headers)
ts115.getHttpRequest().setRequestHeaders(headers)
ts116.getHttpRequest().setRequestHeaders(headers)
ts117.getHttpRequest().setRequestHeaders(headers)</script></con:config></con:testStep><con:testStep type="restrequest" name="createAdminUserFromAdmin"><con:settings/><con:config service="ARTSA - UserManager" resourcePath="/SaasCoreUserManager/rest/user" methodName="POST - update" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="createAdminUserFromAdmin" mediaType="application/json" postQueryString="false" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="utoken" value="8872922380505494898-3228657147389684012-2122806876941779815-2012" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://10.200.0.124:8080</con:endpoint><con:request>{
  "id":-1,
  "account": ${#Global#illumiAccountId},
  "accountName":"${#Global#illumiAccountName}",
  "username":"illumiAdminUserFromAdmin${#Global#currentTime}",
  "email": "blahblahblah@attensity.com",
  "password": "P@ssword1",
  "updatePassword":true,
  "enabled": true,
  "accountType": 0,
  "brandName": "attensity",
    "userRole": {
      "roleName": "admin"
    },
  "preferences": {
      "timeZoneString": "GMT-4",
      "timeZoneOffset": -14400000
  }
}</con:request><con:assertion type="Simple Contains" name="containsAdminRole1"><con:configuration><token>view_account_reports</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" name="containsAdminRole2"><con:configuration><token>set_account_level_preferences</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" name="containsEditorRole1"><con:configuration><token>create_custom_entities</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" name="containsEditorRole2"><con:configuration><token>create_edit_topics</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" name="containsReadOnlyRole1"><con:configuration><token>share_data_dashboards</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" name="containsReadOnlyRole2"><con:configuration><token>export</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" name="containsReadOnlyRole3"><con:configuration><token>drill_down_article</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" name="containsReadOnlyRole4"><con:configuration><token>apply_filters</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="adminUserResponseFromAdmin"><con:settings/><con:config><script>import groovy.json.JsonSlurper
import com.eviware.soapui.impl.wsdl.teststeps.*

responseContent = testRunner.testCase.getTestStepByName("createAdminUserFromAdmin").getPropertyValue("response")
slurperresponse = new JsonSlurper().parseText(responseContent)

def account = (slurperresponse.account) as String
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "illumiAdminUserFromAdminAccountId", account )

def id = (slurperresponse.id) as String
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "illumiAdminUserFromAdminUserId", id )

def userName = (slurperresponse.username) as String
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "illumiAdminUserFromAdminUsername", userName )

//log.info id</script></con:config></con:testStep><con:testStep type="restrequest" name="createEditorUserFromAdmin"><con:settings/><con:config service="ARTSA - UserManager" resourcePath="/SaasCoreUserManager/rest/user" methodName="POST - update" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="createEditorUserFromAdmin" mediaType="application/json" postQueryString="false" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="utoken" value="8872922380505494898-3228657147389684012-2122806876941779815-2012" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://10.200.0.124:8080</con:endpoint><con:request>{
  "id":-1,
  "account": ${#Global#illumiAccountId},
  "accountName":"${#Global#illumiAccountName}",
  "username":"illumiEditorUserFromAdmin${#Global#currentTime}",
  "email": "blahblahblah@attensity.com",
  "password": "P@ssword1",
  "updatePassword":true,
  "enabled": true,
  "accountType": 0,
  "brandName": "attensity",
    "userRole": {
      "roleName": "editor"
    },
  "preferences": {
      "timeZoneString": "GMT-4",
      "timeZoneOffset": -14400000
  }
}</con:request><con:assertion type="Simple Contains" name="containsEditorRole1"><con:configuration><token>create_custom_entities</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" name="containsEditorRole2"><con:configuration><token>create_edit_topics</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" name="containsReadOnlyRole1"><con:configuration><token>share_data_dashboards</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" name="containsReadOnlyRole2"><con:configuration><token>export</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" name="containsReadOnlyRole3"><con:configuration><token>drill_down_article</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" name="containsReadOnlyRole4"><con:configuration><token>apply_filters</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" name="Not Contains"><con:configuration><token/><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" name="notContainsAdminRole1"><con:configuration><token/><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" name="notContainsAdminRole2"><con:configuration><token>set_account_level_preferences</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="editorUserResponseFromAdmin"><con:settings/><con:config><script>import groovy.json.JsonSlurper
import com.eviware.soapui.impl.wsdl.teststeps.*

responseContent = testRunner.testCase.getTestStepByName("createEditorUserFromAdmin").getPropertyValue("response")
slurperresponse = new JsonSlurper().parseText(responseContent)

def account = (slurperresponse.account) as String
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "illumiEditorUserFromAdminAccountId", account )

def id = (slurperresponse.id) as String
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "illumiEditorUserFromAdminUserId", id )

def userName = (slurperresponse.username) as String
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "illumiEditorUserFromAdminUsername", userName )

//log.info id</script></con:config></con:testStep><con:testStep type="restrequest" name="createReadOnlyUserFromAdmin"><con:settings/><con:config service="ARTSA - UserManager" resourcePath="/SaasCoreUserManager/rest/user" methodName="POST - update" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="createReadOnlyUserFromAdmin" mediaType="application/json" postQueryString="false" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="utoken" value="8872922380505494898-3228657147389684012-2122806876941779815-2012" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://10.200.0.124:8080</con:endpoint><con:request>{
  "id":-1,
  "account": ${#Global#illumiAccountId},
  "accountName":"${#Global#illumiAccountName}",
  "username":"illumiReadonlyUserFromAdmin${#Global#currentTime}",
  "email": "blahblahblah@attensity.com",
  "password": "P@ssword1",
  "updatePassword":true,
  "enabled": true,
  "accountType": 0,
  "brandName": "attensity",
    "userRole": {
      "roleName": "read_only"
    },
  "preferences": {
      "timeZoneString": "GMT-4",
      "timeZoneOffset": -14400000
  }
}</con:request><con:assertion type="Simple Contains" name="containsReadOnlyRole1"><con:configuration><token>share_data_dashboards</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" name="containsReadOnlyRole2"><con:configuration><token>export</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" name="containsReadOnlyRole3"><con:configuration><token>drill_down_article</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" name="containsReadOnlyRole4"><con:configuration><token>apply_filters</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" name="Not Contains"><con:configuration><token/><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" name="notContainsAdminRole1"><con:configuration><token>view_account_reports</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" name="notContainsAdminRole2"><con:configuration><token>set_account_level_preferences</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" name="notContainsEditorRole1"><con:configuration><token>create_custom_entities</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" name="notContainsEditorRole2"><con:configuration><token>create_edit_topics</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="readOnlyUserResponseFromAdmin"><con:settings/><con:config><script>import groovy.json.JsonSlurper
import com.eviware.soapui.impl.wsdl.teststeps.*

responseContent = testRunner.testCase.getTestStepByName("createReadOnlyUserFromAdmin").getPropertyValue("response")
slurperresponse = new JsonSlurper().parseText(responseContent)

def account = (slurperresponse.account) as String
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "illumiReadOnlyUserFromAdminAccountId", account )

def id = (slurperresponse.id) as String
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "illumiReadOnlyUserFromAdminUserId", id )

def userName = (slurperresponse.username) as String
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "illumiReadOnlyUserFromAdminUsername", userName )

//log.info id</script></con:config></con:testStep><con:testStep type="restrequest" name="listUsernameAdmin"><con:settings/><con:config service="ARTSA - UserManager" resourcePath="/SaasCoreUserManager/rest/user" methodName="GET - getAllUsersForAccountExceptCurrentUser" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="listUsernameAdmin" mediaType="application/json" postQueryString="false" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="utoken" value="8872922380505494898-3228657147389684012-2122806876941779815-2012" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://10.200.0.124:8080</con:endpoint><con:request/><con:assertion type="Simple Contains" name="Contains"><con:configuration><token>${#Global#illumiAccountId}</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="UserToken" value="${#Global#illumiAdminAuthKey}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="uniqueUserNameAdmin"><con:settings/><con:config service="ARTSA - UserManager" resourcePath="/SaasCoreUserManager/rest/user/unique" methodName="POST - userIsUnique" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="uniqueUserNameAdmin" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="utoken" value="8872922380505494898-3228657147389684012-2122806876941779815-2012" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://10.200.0.124:8080</con:endpoint><con:request>{
  "account":${#Global#illumiAccountId},
  "username":"blahblahblahblah1234567890"
}</con:request><con:assertion type="XPath Match" name="XPath Match"><con:configuration><path>declare namespace soap='http://schemas.xmlsoap.org/soap/envelope/';
declare namespace ns1='http://10.200.0.124/SaasCoreUserManager/rest/user/unique';
//ns1:unique</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="UserToken" value="${#Global#authkey}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="updateUserEmailAdmin"><con:settings/><con:config service="ARTSA - UserManager" resourcePath="/SaasCoreUserManager/rest/profile" methodName="POST - updateProfile" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="updateUserEmailAdmin" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="utoken" value="8872922380505494898-3228657147389684012-2122806876941779815-2012" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://10.200.0.124:8080</con:endpoint><con:request>{
  "id":"${#Global#illumiAdminUserId}",
  "email": "changedbyadmin@a.com"
}</con:request><con:assertion type="Simple Contains" name="containsAdminUserId"><con:configuration><token>${#Global#illumiAdminUserId}</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" name="containsChangedByAdmin"><con:configuration><token>changedbyadmin@a.com</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="updateAnotherUserEmailAdmin"><con:settings/><con:config service="ARTSA - UserManager" resourcePath="/SaasCoreUserManager/rest/profile" methodName="POST - updateProfile" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="updateAnotherUserEmailAdmin" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="utoken" value="8872922380505494898-3228657147389684012-2122806876941779815-2012" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://10.200.0.124:8080</con:endpoint><con:request>{
  "id":"${#Global#illumiEditorUserFromAdminUserId}",
  "email": "changedbyadmin@a.com"
}</con:request><con:assertion type="Simple Contains" name="containsChangedByAdmin"><con:configuration><token>changedbyadmin@a.com</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="updateUserPasswordAdmin"><con:settings/><con:config service="ARTSA - UserManager" methodName="POST - updatePassword" resourcePath="/SaasCoreUserManager/rest/profile/password" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="updateUserPasswordAdmin" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="utoken" value="8872922380505494898-3228657147389684012-2122806876941779815-2012" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://10.200.0.124:8080</con:endpoint><con:request>{
  "username": ${#Global#illumiAdminUsername},
  "account": ${#Global#illumiAccountId},
  "id":${#Global#illumiAdminUserId},
  "oldpassword": "${#Global#illumiAdminPassword}",
  "password": "${#Global#illumiAdminPassword}",
  "updatePassword":true
}</con:request><con:assertion type="XPath Match" name="assert_update_password"><con:configuration><path>declare namespace soap='http://schemas.xmlsoap.org/soap/envelope/';
declare namespace ns1='http://10.200.0.124/SaasCoreUserManager/rest/profile/password';
//ns1:loginFailed</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="updateAnotherUserPasswordAdmin"><con:settings/><con:config service="ARTSA - UserManager" methodName="POST - updatePassword" resourcePath="/SaasCoreUserManager/rest/profile/password" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="updateAnotherUserPasswordAdmin" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="utoken" value="8872922380505494898-3228657147389684012-2122806876941779815-2012" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://10.200.0.124:8080</con:endpoint><con:request>{
  "id":${#Global#illumiReadOnlyUserFromAdminUserId},
  "password": "${#Global#illumiReadOnlyPassword}",
  "updatePassword":true
}</con:request><con:assertion type="XPath Match" name="XPathLoginFailedFalse"><con:configuration><path>declare namespace soap='http://schemas.xmlsoap.org/soap/envelope/';
declare namespace ns1='http://10.200.0.124/SaasCoreUserManager/rest/profile/password';
//ns1:loginFailed</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="updateUserPermissionsAdmin"><con:settings/><con:config service="ARTSA - UserManager" methodName="POST - update" resourcePath="/SaasCoreUserManager/rest/user" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="updateUserPermissionsAdmin" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="utoken" value="8872922380505494898-3228657147389684012-2122806876941779815-2012" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://10.200.0.124:8080</con:endpoint><con:request>{
  "id": ${#Global#illumiEditorUserId},
  "account": ${#Global#illumiAccountId},
  "accountName": ${#Global#illumiAccountName},
  "username": ${#Global#illumiEditorUsername},
  "enabled": true,
  "accountType": 0,
  "brandName": "attensity",
    "userRole": {
      "roleName": "read_only"
  },
  "preferences": {
      "timeZoneString": "GMT-6",
      "timeZoneOffset": -21600000
  }
}</con:request><con:assertion type="XPath Match" name="XPathRoleNameReadOnly"><con:configuration><path>declare namespace soap='http://schemas.xmlsoap.org/soap/envelope/';
declare namespace ns1='http://10.200.0.124/SaasCoreUserManager/rest/user';
//ns1:roleName</path><content>read_only</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="updateAnotherUserPermissionsAdmin"><con:settings/><con:config service="ARTSA - UserManager" methodName="POST - update" resourcePath="/SaasCoreUserManager/rest/user" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="updateAnotherUserPermissionsAdmin" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="utoken" value="8872922380505494898-3228657147389684012-2122806876941779815-2012" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://10.200.0.124:8080</con:endpoint><con:request>{
  "id": ${#Global#illumiReadOnlyUserId},
  "account": ${#Global#illumiAccountId},
  "accountName": ${#Global#illumiAccountName},
  "username": ${#Global#illumiReadOnlyUsername},
  "enabled": true,
  "accountType": 0,
  "brandName": "attensity",
    "userRole": {
      "roleName": "admin"
  },
  "preferences": {
      "timeZoneString": "GMT-6",
      "timeZoneOffset": -21600000
  }
}</con:request><con:assertion type="XPath Match" name="XPath Match"><con:configuration><path>declare namespace soap='http://schemas.xmlsoap.org/soap/envelope/';
declare namespace ns1='http://10.200.0.124/SaasCoreUserManager/rest/user';
//ns1:roleName</path><content>admin</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="deleteUserAdmin"><con:settings/><con:config service="ARTSA - UserManager" resourcePath="/SaasCoreUserManager/rest/user/{id}" methodName="DELETE - deleteUser" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="deleteUserAdmin" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="utoken" value="8872922380505494898-3228657147389684012-2122806876941779815-2012" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://10.200.0.124:8080</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="id" value="${#Global#illumiAdminUserFromAdminUserId}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="deleteUserEditor"><con:settings/><con:config service="ARTSA - UserManager" resourcePath="/SaasCoreUserManager/rest/user/{id}" methodName="DELETE - deleteUser" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="deleteUserEditor" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="utoken" value="8872922380505494898-3228657147389684012-2122806876941779815-2012" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://10.200.0.124:8080</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="id" value="${#Global#illumiEditorUserFromAdminUserId}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="deleteUserReadOnly"><con:settings/><con:config service="ARTSA - UserManager" resourcePath="/SaasCoreUserManager/rest/user/{id}" methodName="DELETE - deleteUser" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="deleteUserReadOnly" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="utoken" value="8872922380505494898-3228657147389684012-2122806876941779815-2012" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://10.200.0.124:8080</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="id" value="${#Global#illumiReadOnlyUserFromAdminUserId}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="setPermissionsToAdmin"><con:settings/><con:config service="ARTSA - UserManager" methodName="POST - update" resourcePath="/SaasCoreUserManager/rest/user" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="setPermissionsToAdmin" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="utoken" value="8872922380505494898-3228657147389684012-2122806876941779815-2012" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://10.200.0.124:8080</con:endpoint><con:request>{
  "id": ${#Global#illumiAdminUserId},
  "account": ${#Global#illumiAccountId},
  "accountName": ${#Global#illumiAccountName},
  "username": ${#Global#illumiAdminUsername},
  "enabled": true,
  "accountType": 0,
  "brandName": "attensity",
    "userRole": {
      "roleName": "Admin"
  },
  "preferences": {
      "timeZoneString": "GMT-6",
      "timeZoneOffset": -21600000
  }
}</con:request><con:assertion type="XPath Match" name="XPath Match"><con:configuration><path>declare namespace soap='http://schemas.xmlsoap.org/soap/envelope/';
declare namespace ns1='http://10.200.0.124/SaasCoreUserManager/rest/user';
//ns1:roleName</path><content>admin</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="setPermissionsToEditor"><con:settings/><con:config service="ARTSA - UserManager" methodName="POST - update" resourcePath="/SaasCoreUserManager/rest/user" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="setPermissionsToEditor" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="utoken" value="8872922380505494898-3228657147389684012-2122806876941779815-2012" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://10.200.0.124:8080</con:endpoint><con:request>{
  "id": ${#Global#illumiEditorUserId},
  "account": ${#Global#illumiAccountId},
  "accountName": ${#Global#illumiAccountName},
  "username": ${#Global#illumiEditorUsername},
  "enabled": true,
  "accountType": 0,
  "brandName": "attensity",
    "userRole": {
      "roleName": "editor"
  },
  "preferences": {
      "timeZoneString": "GMT-6",
      "timeZoneOffset": -21600000
  }
}</con:request><con:assertion type="XPath Match" name="XPath Match"><con:configuration><path>declare namespace soap='http://schemas.xmlsoap.org/soap/envelope/';
declare namespace ns1='http://10.200.0.124/SaasCoreUserManager/rest/user';
//ns1:roleName</path><content>editor</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="setPermissionsToReadOnly"><con:settings/><con:config service="ARTSA - UserManager" methodName="POST - update" resourcePath="/SaasCoreUserManager/rest/user" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="setPermissionsToReadOnly" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="utoken" value="8872922380505494898-3228657147389684012-2122806876941779815-2012" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://10.200.0.124:8080</con:endpoint><con:request>{
  "id": ${#Global#illumiReadOnlyUserId},
  "account": ${#Global#illumiAccountId},
  "accountName": ${#Global#illumiAccountName},
  "username": ${#Global#illumiReadOnlyUsername},
  "enabled": true,
  "accountType": 0,
  "brandName": "attensity",
    "userRole": {
      "roleName": "read_only"
  },
  "preferences": {
      "timeZoneString": "GMT-6",
      "timeZoneOffset": -21600000
  }
}</con:request><con:assertion type="XPath Match" name="XPath Match"><con:configuration><path>declare namespace soap='http://schemas.xmlsoap.org/soap/envelope/';
declare namespace ns1='http://10.200.0.124/SaasCoreUserManager/rest/user';
//ns1:roleName</path><content>read_only</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:properties/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="UserLockDownTestCaseEditor" searchProperties="true" id="e1c7eee0-386a-493e-8826-bd5c527d1f1b" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword=""><con:settings/><con:testStep type="groovy" name="setTime"><con:settings/><con:config><script>Calendar sod = Calendar.instance
    sod.set(Calendar.AM_PM, 0)
    sod.set(Calendar.HOUR, 0)
    sod.set(Calendar.MINUTE, 0)
    sod.set(Calendar.SECOND, 0)
    sod.set(Calendar.MILLISECOND, 0)
start = sod.time 
sqlstart = start.format('MM-dd-yy HH:mm:ss')
//log.info "SQL Start Time:  " + sqlstart
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "querysqlstart", sqlstart )

Calendar eod = Calendar.instance
    eod.set(Calendar.AM_PM, 0)
    eod.set(Calendar.HOUR, 9)
    eod.set(Calendar.MINUTE, 59)
    eod.set(Calendar.SECOND, 59)
    eod.set(Calendar.MILLISECOND, 999)
end = eod.time 
sqlend = end.format('MM-dd-yy HH:mm:ss')
//log.info "SQL End Time:  " + sqlend
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "querysqlend", sqlend )

offset = sod.get(Calendar.ZONE_OFFSET) + sod.get(Calendar.DST_OFFSET) / (60 * 1000)

starttime = start.time
epochstart = starttime + offset
//log.info "Epoch Start Time:  " + epochstart
def epochstart = epochstart as String
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "queryepochstart", epochstart )
def timestampstart = epochstart as Long
Date tss = new Date(timestampstart)
//log.info "Time to select in local timezone:  "+ tss

endtime = end.time
epochend = endtime + offset
//log.info "Epoch End Time:  " + epochend
def epochend = epochend as String
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "queryepochend", epochend )
def timestampend = epochend as Long
Date tse = new Date(timestampend)
//log.info "Time to select in local timezone:  "+ tse

now = Calendar.instance
today = now.time
millis = today.time
//log.info "Current time in milli-seconds:  " + millis
def today = new Date (millis)
//log.info "Current Local Time:  "+ today
tf = today.format('MM dd yy HH mm ss')
//log.info "Current Local Time nicely formatted:  "+ tf
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "time", tf )
millis = today.time as String
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "currentTime", millis )

secondsInHour = 3600000
secondsInDay = 24*secondsInHour as Long
secondsInMonth = 30*secondsInDay as Long
expirationDate = starttime+secondsInMonth as String
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "expirationDate", expirationDate )</script></con:config></con:testStep><con:testStep type="restrequest" name="authIllumiEditorUser"><con:settings/><con:config service="ARTSA - UserManager" resourcePath="/SaasCoreUserManager/rest/auth" methodName="POST - authenticate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="authIllumiEditorUser" mediaType="application/json" postQueryString="false" accept=""><con:description>get token for current User</con:description><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Contest-Type" value="application/json"/>
  &lt;con:entry key="Accept" value="application/json"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>http://10.200.0.124:8080</con:endpoint><con:request>{
  "username":"${#Global#illumiEditorUsername}",
  "password":"${#Global#illumiEditorPassword}",
  "accountName":"${#Global#illumiAccountName}"
}</con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="authIllumiEditorResponse"><con:settings/><con:config><script>import groovy.json.JsonSlurper
import com.eviware.soapui.impl.wsdl.teststeps.*

responseContent = testRunner.testCase.getTestStepByName("authIllumiEditorUser").getPropertyValue("response")
slurperresponse = new JsonSlurper().parseText(responseContent)

authkey = (slurperresponse.authkey)
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "illumiEditorAuthKey", authkey )

//log.info authkey</script></con:config></con:testStep><con:testStep type="groovy" name="setEditorUtokenHeader"><con:settings/><con:config><script>import com.eviware.soapui.impl.wsdl.teststeps.*
import com.eviware.soapui.support.types.StringToStringMap;

def authkey = com.eviware.soapui.SoapUI.globalProperties.getPropertyValue( "illumiEditorAuthKey")
def tc = testRunner.testCase.testSuite.getTestCaseByName("UserLockDownTestCaseEditor")
def ts11 = tc.getTestStepByName("createAdminUserFromEditor")
def ts12 = tc.getTestStepByName("createEditorUserFromEditor")
def ts13 = tc.getTestStepByName("createReadOnlyUserFromEditor")
def ts14 = tc.getTestStepByName("listUsernameEditor")
def ts15 = tc.getTestStepByName("uniqueUserNameEditor")
def ts16 = tc.getTestStepByName("updateUserEmailEditor")
def ts17 = tc.getTestStepByName("updateAnotherUserEmailEditor")
def ts18 = tc.getTestStepByName("updateUserPasswordEditor")
def ts19 = tc.getTestStepByName("updateAnotherUserPasswordEditor")
def ts110 = tc.getTestStepByName("updateUserPermissionsEditor")
def ts111 = tc.getTestStepByName("updateAnotherUserPermissionsEditor")
def ts112 = tc.getTestStepByName("deleteUserEditor")
def ts113 = tc.getTestStepByName("setPermissionsToEditor")



def headers = new StringToStringMap()
headers.putIfMissing("utoken",authkey)

ts11.getHttpRequest().setRequestHeaders(headers)
ts12.getHttpRequest().setRequestHeaders(headers)
ts13.getHttpRequest().setRequestHeaders(headers)
ts14.getHttpRequest().setRequestHeaders(headers)
ts15.getHttpRequest().setRequestHeaders(headers)
ts16.getHttpRequest().setRequestHeaders(headers)
ts17.getHttpRequest().setRequestHeaders(headers)
ts18.getHttpRequest().setRequestHeaders(headers)
ts19.getHttpRequest().setRequestHeaders(headers)
ts110.getHttpRequest().setRequestHeaders(headers)
ts111.getHttpRequest().setRequestHeaders(headers)
ts112.getHttpRequest().setRequestHeaders(headers)
ts113.getHttpRequest().setRequestHeaders(headers)</script></con:config></con:testStep><con:testStep type="restrequest" name="createAdminUserFromEditor"><con:settings/><con:config service="ARTSA - UserManager" resourcePath="/SaasCoreUserManager/rest/user" methodName="POST - update" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="createAdminUserFromEditor" mediaType="application/json" postQueryString="false" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="utoken" value="-8545841595472732773-2744432642885947986--7405945953758229387-2012" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://10.200.0.124:8080</con:endpoint><con:request>{
  "id":-1,
  "account": ${#Global#illumiAccountId},
  "accountName":"${#Global#illumiAccountName}",
  "username":"illumiAdminUserFromEditor${#Global#currentTime}",
  "email": "blahblahblah@attensity.com",
  "password": "P@ssword1",
  "updatePassword":true,
  "enabled": true,
  "accountType": 0,
  "brandName": "attensity",
    "userRole": {
      "roleName": "admin"
    },
  "preferences": {
      "timeZoneString": "GMT-4",
      "timeZoneOffset": -14400000
  }
}</con:request><con:assertion type="Simple Contains" name="containsForbidden"><con:configuration><token>UserForbidden</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="createEditorUserFromEditor"><con:settings/><con:config service="ARTSA - UserManager" resourcePath="/SaasCoreUserManager/rest/user" methodName="POST - update" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="createEditorUserFromEditor" mediaType="application/json" postQueryString="false" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="utoken" value="-8545841595472732773-2744432642885947986--7405945953758229387-2012" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://10.200.0.124:8080</con:endpoint><con:request>{
  "id":-1,
  "account": ${#Global#illumiAccountId},
  "accountName":"${#Global#illumiAccountName}",
  "username":"illumiEditorUserFromEditor${#Global#currentTime}",
  "email": "blahblahblah@attensity.com",
  "password": "P@ssword1",
  "updatePassword":true,
  "enabled": true,
  "accountType": 0,
  "brandName": "attensity",
    "userRole": {
      "roleName": "editor"
    },
  "preferences": {
      "timeZoneString": "GMT-4",
      "timeZoneOffset": -14400000
  }
}</con:request><con:assertion type="Simple Contains" name="containsForbidden"><con:configuration><token>UserForbidden</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="createReadOnlyUserFromEditor"><con:settings/><con:config service="ARTSA - UserManager" resourcePath="/SaasCoreUserManager/rest/user" methodName="POST - update" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="createReadOnlyUserFromEditor" mediaType="application/json" postQueryString="false" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="utoken" value="-8545841595472732773-2744432642885947986--7405945953758229387-2012" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://10.200.0.124:8080</con:endpoint><con:request>{
  "id":-1,
  "account": ${#Global#illumiAccountId},
  "accountName":"${#Global#illumiAccountName}",
  "username":"illumiReadonlyUserFromEditor${#Global#currentTime}",
  "email": "blahblahblah@attensity.com",
  "password": "P@ssword1",
  "updatePassword":true,
  "enabled": true,
  "accountType": 0,
  "brandName": "attensity",
    "userRole": {
      "roleName": "read_only"
    },
  "preferences": {
      "timeZoneString": "GMT-4",
      "timeZoneOffset": -14400000
  }
}</con:request><con:assertion type="Simple Contains" name="containsForbidden"><con:configuration><token>UserForbidden</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="listUsernameEditor"><con:settings/><con:config service="ARTSA - UserManager" resourcePath="/SaasCoreUserManager/rest/user" methodName="GET - getAllUsersForAccountExceptCurrentUser" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="listUsernameEditor" mediaType="application/json" postQueryString="false" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="utoken" value="-8545841595472732773-2744432642885947986--7405945953758229387-2012" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://10.200.0.124:8080</con:endpoint><con:request/><con:assertion type="Simple Contains" name="containsUserForbidden"><con:configuration><token>UserForbidden</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="UserToken" value="${#Global#illumiAdminAuthKey}"/>
  <con:entry key="utoken" value="${#Global#illumiEditorAuthKey}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="uniqueUserNameEditor"><con:settings/><con:config service="ARTSA - UserManager" resourcePath="/SaasCoreUserManager/rest/user/unique" methodName="POST - userIsUnique" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="uniqueUserNameEditor" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="utoken" value="-8545841595472732773-2744432642885947986--7405945953758229387-2012" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://10.200.0.124:8080</con:endpoint><con:request>{
  "account":${#Global#illumiAccountId},
  "username":"blahblahblahblah1234567890"
}</con:request><con:assertion type="Simple Contains" name="containsForbidden"><con:configuration><token>UserForbidden</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="UserToken" value="${#Global#authkey}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="updateUserEmailEditor"><con:settings/><con:config service="ARTSA - UserManager" resourcePath="/SaasCoreUserManager/rest/profile" methodName="POST - updateProfile" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="updateUserEmailEditor" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="utoken" value="-8545841595472732773-2744432642885947986--7405945953758229387-2012" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://10.200.0.124:8080</con:endpoint><con:request>{
  "id":"${#Global#illumiEditorUserId}",
  "email": "tmemmoty@a.com"
}</con:request><con:assertion type="Simple Contains" name="containsForbidden"><con:configuration><token>UserRoleEditForbidden</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="updateAnotherUserEmailEditor"><con:settings/><con:config service="ARTSA - UserManager" resourcePath="/SaasCoreUserManager/rest/profile" methodName="POST - updateProfile" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="updateAnotherUserEmailEditor" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="utoken" value="-8545841595472732773-2744432642885947986--7405945953758229387-2012" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://10.200.0.124:8080</con:endpoint><con:request>{
  "id":"${#Global#illumiAdminUserId}",
  "email": "tmemmoty@a.com"
}</con:request><con:assertion type="Simple Contains" name="containsForbidden"><con:configuration><token>UserForbidden</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="updateUserPasswordEditor"><con:settings/><con:config service="ARTSA - UserManager" methodName="POST - updatePassword" resourcePath="/SaasCoreUserManager/rest/profile/password" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="updateUserPasswordEditor" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="utoken" value="-8545841595472732773-2744432642885947986--7405945953758229387-2012" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://10.200.0.124:8080</con:endpoint><con:request>{
  "username": ${#Global#illumiEditorUsername},
  "account": ${#Global#illumiAccountId},
  "id":${#Global#illumiEditorUserId},
  "oldpassword": "${#Global#illumiEditorPassword}",
  "password": "${#Global#illumiEditorPassword}",
  "updatePassword":true
}</con:request><con:assertion type="Simple Contains" name="containsForbidden"><con:configuration><token>UserRoleEditForbidden</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="updateAnotherUserPasswordEditor"><con:settings/><con:config service="ARTSA - UserManager" methodName="POST - updatePassword" resourcePath="/SaasCoreUserManager/rest/profile/password" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="updateAnotherUserPasswordEditor" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="utoken" value="-8545841595472732773-2744432642885947986--7405945953758229387-2012" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://10.200.0.124:8080</con:endpoint><con:request>{
  "id":${#Global#illumiReadOnlyUserId},
  "password": "${#Global#illumiReadOnlyPassword}",
  "updatePassword":true
}</con:request><con:assertion type="Simple Contains" name="containsForbidden"><con:configuration><token>UserForbidden</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="updateUserPermissionsEditor"><con:settings/><con:config service="ARTSA - UserManager" methodName="POST - update" resourcePath="/SaasCoreUserManager/rest/user" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="updateUserPermissionsEditor" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="utoken" value="-8545841595472732773-2744432642885947986--7405945953758229387-2012" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://10.200.0.124:8080</con:endpoint><con:request>{
  "id": ${#Global#illumiEditorUserId},
  "account": ${#Global#illumiAccountId},
  "accountName": ${#Global#illumiAccountName},
  "username": ${#Global#illumiEditorUsername},
  "enabled": true,
  "accountType": 0,
  "brandName": "attensity",
    "userRole": {
      "roleName": "read_only"
  },
  "preferences": {
      "timeZoneString": "GMT-6",
      "timeZoneOffset": -21600000
  }
}</con:request><con:assertion type="Simple Contains" name="containsForbidden"><con:configuration><token>UserRoleEditForbidden</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="updateAnotherUserPermissionsEditor"><con:settings/><con:config service="ARTSA - UserManager" methodName="POST - update" resourcePath="/SaasCoreUserManager/rest/user" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="updateAnotherUserPermissionsEditor" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="utoken" value="-8545841595472732773-2744432642885947986--7405945953758229387-2012" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://10.200.0.124:8080</con:endpoint><con:request>{
  "id": ${#Global#illumiReadOnlyUserId},
  "account": ${#Global#illumiAccountId},
  "accountName": ${#Global#illumiAccountName},
  "username": ${#Global#illumiReadOnlyUsername},
  "enabled": true,
  "accountType": 0,
  "brandName": "attensity",
    "userRole": {
      "roleName": "admin"
  },
  "preferences": {
      "timeZoneString": "GMT-6",
      "timeZoneOffset": -21600000
  }
}</con:request><con:assertion type="Simple Contains" name="containsForbidden"><con:configuration><token>UserForbidden</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="deleteUserEditor"><con:settings/><con:config service="ARTSA - UserManager" resourcePath="/SaasCoreUserManager/rest/user/{id}" methodName="DELETE - deleteUser" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="deleteUserEditor" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="utoken" value="-8545841595472732773-2744432642885947986--7405945953758229387-2012" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://10.200.0.124:8080</con:endpoint><con:request/><con:assertion type="Simple Contains" name="containsForbidden"><con:configuration><token>UserForbidden</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="id" value="20006" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="setPermissionsToEditor"><con:settings/><con:config service="ARTSA - UserManager" methodName="POST - update" resourcePath="/SaasCoreUserManager/rest/user" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="setPermissionsToEditor" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="utoken" value="-8545841595472732773-2744432642885947986--7405945953758229387-2012" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://10.200.0.124:8080</con:endpoint><con:request>{
  "id": ${#Global#illumiEditorUserId},
  "account": ${#Global#illumiAccountId},
  "accountName": ${#Global#illumiAccountName},
  "username": ${#Global#illumiEditorUsername},
  "enabled": true,
  "accountType": 0,
  "brandName": "attensity",
    "userRole": {
      "roleName": "editor"
  },
  "preferences": {
      "timeZoneString": "GMT-6",
      "timeZoneOffset": -21600000
  }
}</con:request><con:assertion type="Simple NotContains" name="notContainsAdmin"><con:configuration><token>admin</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" name="notContainsReadOnly"><con:configuration><token>read_only</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:properties/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="UserLockDownTestCaseReadOnly" searchProperties="true" id="5040af54-0c39-4988-b130-0792cb6b34cf" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword=""><con:settings/><con:testStep type="groovy" name="setTime"><con:settings/><con:config><script>Calendar sod = Calendar.instance
    sod.set(Calendar.AM_PM, 0)
    sod.set(Calendar.HOUR, 0)
    sod.set(Calendar.MINUTE, 0)
    sod.set(Calendar.SECOND, 0)
    sod.set(Calendar.MILLISECOND, 0)
start = sod.time 
sqlstart = start.format('MM-dd-yy HH:mm:ss')
//log.info "SQL Start Time:  " + sqlstart
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "querysqlstart", sqlstart )

Calendar eod = Calendar.instance
    eod.set(Calendar.AM_PM, 0)
    eod.set(Calendar.HOUR, 9)
    eod.set(Calendar.MINUTE, 59)
    eod.set(Calendar.SECOND, 59)
    eod.set(Calendar.MILLISECOND, 999)
end = eod.time 
sqlend = end.format('MM-dd-yy HH:mm:ss')
//log.info "SQL End Time:  " + sqlend
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "querysqlend", sqlend )

offset = sod.get(Calendar.ZONE_OFFSET) + sod.get(Calendar.DST_OFFSET) / (60 * 1000)

starttime = start.time
epochstart = starttime + offset
//log.info "Epoch Start Time:  " + epochstart
def epochstart = epochstart as String
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "queryepochstart", epochstart )
def timestampstart = epochstart as Long
Date tss = new Date(timestampstart)
//log.info "Time to select in local timezone:  "+ tss

endtime = end.time
epochend = endtime + offset
//log.info "Epoch End Time:  " + epochend
def epochend = epochend as String
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "queryepochend", epochend )
def timestampend = epochend as Long
Date tse = new Date(timestampend)
//log.info "Time to select in local timezone:  "+ tse

now = Calendar.instance
today = now.time
millis = today.time
//log.info "Current time in milli-seconds:  " + millis
def today = new Date (millis)
//log.info "Current Local Time:  "+ today
tf = today.format('MM dd yy HH mm ss')
//log.info "Current Local Time nicely formatted:  "+ tf
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "time", tf )
millis = today.time as String
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "currentTime", millis )

secondsInHour = 3600000
secondsInDay = 24*secondsInHour as Long
secondsInMonth = 30*secondsInDay as Long
expirationDate = starttime+secondsInMonth as String
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "expirationDate", expirationDate )</script></con:config></con:testStep><con:testStep type="restrequest" name="authIllumiReadOnlyUser"><con:settings/><con:config service="ARTSA - UserManager" resourcePath="/SaasCoreUserManager/rest/auth" methodName="POST - authenticate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="authIllumiReadOnlyUser" mediaType="application/json" postQueryString="false" accept=""><con:description>get token for current User</con:description><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Contest-Type" value="application/json"/>
  &lt;con:entry key="Accept" value="application/json"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>http://10.200.0.124:8080</con:endpoint><con:request>{
  "username":"${#Global#illumiReadOnlyUsername}",
  "password":"${#Global#illumiReadOnlyPassword}",
  "accountName":"${#Global#illumiAccountName}"
}</con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="authIllumiReadOnlyResponse"><con:settings/><con:config><script>import groovy.json.JsonSlurper
import com.eviware.soapui.impl.wsdl.teststeps.*

responseContent = testRunner.testCase.getTestStepByName("authIllumiReadOnlyUser").getPropertyValue("response")
slurperresponse = new JsonSlurper().parseText(responseContent)

authkey = (slurperresponse.authkey)
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "illumiReadOnlyAuthKey", authkey )

//log.info authkey</script></con:config></con:testStep><con:testStep type="groovy" name="setReadOnlyUtokenHeader"><con:settings/><con:config><script>import com.eviware.soapui.impl.wsdl.teststeps.*
import com.eviware.soapui.support.types.StringToStringMap;

def authkey = com.eviware.soapui.SoapUI.globalProperties.getPropertyValue( "illumiReadOnlyAuthKey")
def tc = testRunner.testCase.testSuite.getTestCaseByName("UserLockDownTestCaseReadOnly")
def ts11 = tc.getTestStepByName("createAdminUserFromReadOnly")
def ts12 = tc.getTestStepByName("createEditorUserFromReadOnly")
def ts13 = tc.getTestStepByName("createReadOnlyUserFromReadOnly")
def ts14 = tc.getTestStepByName("listUsernameReadOnly")
def ts15 = tc.getTestStepByName("uniqueUserNameReadOnly")
def ts16 = tc.getTestStepByName("updateUserEmailReadOnly")
def ts17 = tc.getTestStepByName("updateAnotherUserEmailReadOnly")
def ts18 = tc.getTestStepByName("updateUserPasswordReadOnly")
def ts19 = tc.getTestStepByName("updateAnotherUserPasswordReadOnly")
def ts110 = tc.getTestStepByName("updateUserPermissionsReadOnly")
def ts111 = tc.getTestStepByName("updateAnotherUserPermissionsReadOnly")
def ts112 = tc.getTestStepByName("deleteUserReadOnly")
def ts113 = tc.getTestStepByName("setPermissionsToReadOnly")


def headers = new StringToStringMap()
headers.putIfMissing("utoken",authkey)

ts11.getHttpRequest().setRequestHeaders(headers)
ts12.getHttpRequest().setRequestHeaders(headers)
ts13.getHttpRequest().setRequestHeaders(headers)
ts14.getHttpRequest().setRequestHeaders(headers)
ts15.getHttpRequest().setRequestHeaders(headers)
ts16.getHttpRequest().setRequestHeaders(headers)
ts17.getHttpRequest().setRequestHeaders(headers)
ts18.getHttpRequest().setRequestHeaders(headers)
ts19.getHttpRequest().setRequestHeaders(headers)
ts110.getHttpRequest().setRequestHeaders(headers)
ts111.getHttpRequest().setRequestHeaders(headers)
ts112.getHttpRequest().setRequestHeaders(headers)
ts113.getHttpRequest().setRequestHeaders(headers)</script></con:config></con:testStep><con:testStep type="restrequest" name="createAdminUserFromReadOnly"><con:settings/><con:config service="ARTSA - UserManager" resourcePath="/SaasCoreUserManager/rest/user" methodName="POST - update" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="createAdminUserFromReadOnly" mediaType="application/json" postQueryString="false" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="utoken" value="-902062052031696791--7406074714507961275--7197080267924524643-2012" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://10.200.0.124:8080</con:endpoint><con:request>{
  "id":-1,
  "account": ${#Global#illumiAccountId},
  "accountName":"${#Global#illumiAccountName}",
  "username":"illumiAdminUserFromReadOnly${#Global#currentTime}",
  "email": "blahblahblah@attensity.com",
  "password": "P@ssword1",
  "updatePassword":true,
  "enabled": true,
  "accountType": 0,
  "brandName": "attensity",
    "userRole": {
      "roleName": "admin"
    },
  "preferences": {
      "timeZoneString": "GMT-4",
      "timeZoneOffset": -14400000
  }
}</con:request><con:assertion type="Simple Contains" name="containsForbidden"><con:configuration><token>UserForbidden</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="createEditorUserFromReadOnly"><con:settings/><con:config service="ARTSA - UserManager" resourcePath="/SaasCoreUserManager/rest/user" methodName="POST - update" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="createEditorUserFromReadOnly" mediaType="application/json" postQueryString="false" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="utoken" value="-902062052031696791--7406074714507961275--7197080267924524643-2012" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://10.200.0.124:8080</con:endpoint><con:request>{
  "id":-1,
  "account": ${#Global#illumiAccountId},
  "accountName":"${#Global#illumiAccountName}",
  "username":"illumiEditorUserFromReadOnly${#Global#currentTime}",
  "email": "blahblahblah@attensity.com",
  "password": "P@ssword1",
  "updatePassword":true,
  "enabled": true,
  "accountType": 0,
  "brandName": "attensity",
    "userRole": {
      "roleName": "editor"
    },
  "preferences": {
      "timeZoneString": "GMT-4",
      "timeZoneOffset": -14400000
  }
}</con:request><con:assertion type="Simple Contains" name="containsForbidden"><con:configuration><token>UserForbidden</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="createReadOnlyUserFromReadOnly"><con:settings/><con:config service="ARTSA - UserManager" resourcePath="/SaasCoreUserManager/rest/user" methodName="POST - update" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="createReadOnlyUserFromReadOnly" mediaType="application/json" postQueryString="false" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="utoken" value="-902062052031696791--7406074714507961275--7197080267924524643-2012" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://10.200.0.124:8080</con:endpoint><con:request>{
  "id":-1,
  "account": ${#Global#illumiAccountId},
  "accountName":"${#Global#illumiAccountName}",
  "username":"illumiReadonlyUserFromReadonly${#Global#currentTime}",
  "email": "blahblahblah@attensity.com",
  "password": "P@ssword1",
  "updatePassword":true,
  "enabled": true,
  "accountType": 0,
  "brandName": "attensity",
    "userRole": {
      "roleName": "read_only"
    },
  "preferences": {
      "timeZoneString": "GMT-4",
      "timeZoneOffset": -14400000
  }
}</con:request><con:assertion type="Simple Contains" name="containsForbidden"><con:configuration><token>UserForbidden</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="listUsernameReadOnly"><con:settings/><con:config service="ARTSA - UserManager" resourcePath="/SaasCoreUserManager/rest/user" methodName="GET - getAllUsersForAccountExceptCurrentUser" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="listUsernameReadOnly" mediaType="application/json" postQueryString="false" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="utoken" value="-902062052031696791--7406074714507961275--7197080267924524643-2012" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://10.200.0.124:8080</con:endpoint><con:request/><con:assertion type="Simple Contains" name="containsUserForbidden"><con:configuration><token>UserForbidden</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="UserToken" value="${#Global#illumiAdminAuthKey}"/>
  <con:entry key="utoken" value="${#Global#illumiEReadOnlyAuthKey}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="uniqueUserNameReadOnly"><con:settings/><con:config service="ARTSA - UserManager" resourcePath="/SaasCoreUserManager/rest/user/unique" methodName="POST - userIsUnique" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="uniqueUserNameReadOnly" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="utoken" value="-902062052031696791--7406074714507961275--7197080267924524643-2012" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://10.200.0.124:8080</con:endpoint><con:request>{
  "account":${#Global#illumiAccountId},
  "username":"blahblahblahblah1234567890"
}</con:request><con:assertion type="Simple Contains" name="containsForbidden"><con:configuration><token>UserForbidden</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="UserToken" value="${#Global#authkey}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="updateUserEmailReadOnly"><con:settings/><con:config service="ARTSA - UserManager" resourcePath="/SaasCoreUserManager/rest/profile" methodName="POST - updateProfile" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="updateUserEmailReadOnly" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="utoken" value="-902062052031696791--7406074714507961275--7197080267924524643-2012" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://10.200.0.124:8080</con:endpoint><con:request>{
  "id":"${#Global#illumiReadOnlyUserId}",
  "email": "tmemmoty@a.com"
}</con:request><con:assertion type="Simple Contains" name="containsForbidden"><con:configuration><token>UserRoleEditForbidden</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="updateAnotherUserEmailReadOnly"><con:settings/><con:config service="ARTSA - UserManager" resourcePath="/SaasCoreUserManager/rest/profile" methodName="POST - updateProfile" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="updateAnotherUserEmailReadOnly" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="utoken" value="-902062052031696791--7406074714507961275--7197080267924524643-2012" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://10.200.0.124:8080</con:endpoint><con:request>{
  "id":"${#Global#illumiAdminUserId}",
  "email": "tmemmoty@a.com"
}</con:request><con:assertion type="Simple Contains" name="containsForbidden"><con:configuration><token>UserForbidden</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="updateUserPasswordReadOnly"><con:settings/><con:config service="ARTSA - UserManager" methodName="POST - updatePassword" resourcePath="/SaasCoreUserManager/rest/profile/password" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="updateUserPasswordReadOnly" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="utoken" value="-902062052031696791--7406074714507961275--7197080267924524643-2012" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://10.200.0.124:8080</con:endpoint><con:request>{
  "username": ${#Global#illumiReadOnlyUsername},
  "account": ${#Global#illumiAccountId},
  "id":${#Global#illumiReadOnlyUserId},
  "oldpassword": "${#Global#illumiReadOnlyPassword}",
  "password": "${#Global#illumiReadOnlyPassword}",
  "updatePassword":true
}</con:request><con:assertion type="Simple Contains" name="containsForbidden"><con:configuration><token>UserRoleEditForbidden</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="updateAnotherUserPasswordReadOnly"><con:settings/><con:config service="ARTSA - UserManager" methodName="POST - updatePassword" resourcePath="/SaasCoreUserManager/rest/profile/password" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="updateAnotherUserPasswordReadOnly" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="utoken" value="-902062052031696791--7406074714507961275--7197080267924524643-2012" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://10.200.0.124:8080</con:endpoint><con:request>{
  "id":${#Global#illumiEditorUserId},
  "password": "${#Global#illumiReadOnlyPassword}",
  "updatePassword":true
}</con:request><con:assertion type="Simple Contains" name="containsForbidden"><con:configuration><token>UserForbidden</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="updateUserPermissionsReadOnly"><con:settings/><con:config service="ARTSA - UserManager" methodName="POST - update" resourcePath="/SaasCoreUserManager/rest/user" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="updateUserPermissionsReadOnly" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="utoken" value="-902062052031696791--7406074714507961275--7197080267924524643-2012" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://10.200.0.124:8080</con:endpoint><con:request>{
  "id": ${#Global#illumiReadOnlyUserId},
  "account": ${#Global#illumiAccountId},
  "accountName": ${#Global#illumiAccountName},
  "username": ${#Global#illumiReadOnlyUsername},
  "enabled": true,
  "accountType": 0,
  "brandName": "attensity",
    "userRole": {
      "roleName": "editor"
  },
  "preferences": {
      "timeZoneString": "GMT-6",
      "timeZoneOffset": -21600000
  }
}</con:request><con:assertion type="Simple Contains" name="containsForbidden"><con:configuration><token>UserRoleEditForbidden</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="updateAnotherUserPermissionsReadOnly"><con:settings/><con:config service="ARTSA - UserManager" methodName="POST - update" resourcePath="/SaasCoreUserManager/rest/user" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="updateAnotherUserPermissionsReadOnly" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="utoken" value="-902062052031696791--7406074714507961275--7197080267924524643-2012" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://10.200.0.124:8080</con:endpoint><con:request>{
  "id": ${#Global#illumiEditorUserId},
  "account": ${#Global#illumiAccountId},
  "accountName": ${#Global#illumiAccountName},
  "username": ${#Global#illumiEditorUsername},
  "enabled": true,
  "accountType": 0,
  "brandName": "attensity",
    "userRole": {
      "roleName": "admin"
  },
  "preferences": {
      "timeZoneString": "GMT-6",
      "timeZoneOffset": -21600000
  }
}</con:request><con:assertion type="Simple Contains" name="containsForbidden"><con:configuration><token>UserForbidden</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="deleteUserReadOnly"><con:settings/><con:config service="ARTSA - UserManager" resourcePath="/SaasCoreUserManager/rest/user/{id}" methodName="DELETE - deleteUser" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="deleteUserReadOnly" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="utoken" value="-902062052031696791--7406074714507961275--7197080267924524643-2012" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://10.200.0.124:8080</con:endpoint><con:request/><con:assertion type="Simple Contains" name="containsForbidden"><con:configuration><token>UserForbidden</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="id" value="20006" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="setPermissionsToReadOnly"><con:settings/><con:config service="ARTSA - UserManager" methodName="POST - update" resourcePath="/SaasCoreUserManager/rest/user" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="setPermissionsToReadOnly" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="utoken" value="-902062052031696791--7406074714507961275--7197080267924524643-2012" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://10.200.0.124:8080</con:endpoint><con:request>{
  "id": ${#Global#illumiReadOnlyUserId},
  "account": ${#Global#illumiAccountId},
  "accountName": ${#Global#illumiAccountName},
  "username": ${#Global#illumiReadOnlyUsername},
  "enabled": true,
  "accountType": 0,
  "brandName": "attensity",
    "userRole": {
      "roleName": "editor"
  },
  "preferences": {
      "timeZoneString": "GMT-6",
      "timeZoneOffset": -21600000
  }
}</con:request><con:assertion type="Simple Contains" name="containsForbidden"><con:configuration><token>UserRoleEditForbidden</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:properties/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="userUpdatePassword" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="86e0ead6-c3c3-4245-880d-bbf412fe1956" disabled="true"><con:description>TestCase generated for REST Resource [password] located at [/profile/password]</con:description><con:settings/><con:testStep type="restrequest" name="authIllumiReadOnlyUser"><con:settings/><con:config service="ARTSA - UserManager" resourcePath="/SaasCoreUserManager/rest/auth" methodName="POST - authenticate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="authIllumiReadOnlyUser" mediaType="application/json" postQueryString="false" accept=""><con:description>get token for current User</con:description><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Contest-Type" value="application/json"/>
  &lt;con:entry key="Accept" value="application/json"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>http://10.200.0.124:8080</con:endpoint><con:request>{
  "username":"${#Global#illumiReadOnlyUsername}",
  "password":"${#Global#illumiReadOnlyPassword}",
  "accountName":"${#Global#illumiAccountName}"
}</con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="authIllumiReadOnlyResponse"><con:settings/><con:config><script>import groovy.json.JsonSlurper
import com.eviware.soapui.impl.wsdl.teststeps.*

responseContent = testRunner.testCase.getTestStepByName("authIllumiReadOnlyUser").getPropertyValue("response")
slurperresponse = new JsonSlurper().parseText(responseContent)

authkey = (slurperresponse.authkey)
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "illumiReadOnlyAuthKey", authkey )

//log.info authkey</script></con:config></con:testStep><con:testStep type="groovy" name="setReadOnlyUtokenHeader"><con:settings/><con:config><script>import com.eviware.soapui.impl.wsdl.teststeps.*
import com.eviware.soapui.support.types.StringToStringMap;

def authkey = com.eviware.soapui.SoapUI.globalProperties.getPropertyValue( "illumiReadOnlyAuthKey")
def tc = testRunner.testCase.testSuite.getTestCaseByName("userUpdatePassword")
def ts1 =tc.getTestStepByName("incorrectpassword")
def ts2 =tc.getTestStepByName("changepassword")
def ts3 =tc.getTestStepByName("updatepassword")
def ts4 =tc.getTestStepByName("shortpassword")
def ts5 =tc.getTestStepByName("notcomplexpassword")

def headers = new StringToStringMap()
headers.putIfMissing("utoken",authkey)

ts1.getHttpRequest().setRequestHeaders(headers)
ts2.getHttpRequest().setRequestHeaders(headers)
ts3.getHttpRequest().setRequestHeaders(headers)
ts4.getHttpRequest().setRequestHeaders(headers)
ts5.getHttpRequest().setRequestHeaders(headers)

//log.info ts5.getHttpRequest().getRequestHeaders()</script></con:config></con:testStep><con:testStep type="restrequest" name="incorrectpassword"><con:settings/><con:config service="ARTSA - UserManager" methodName="POST - updatePassword" resourcePath="/SaasCoreUserManager/rest/profile/password" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="incorrectpassword" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="utoken" value="-2772986850395008429--9137665073999375300-167842882469763178-2012" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://10.200.0.124:8080</con:endpoint><con:request>{
  "username": ${#Global#illumiReadOnlyUsername},
  "account": ${#Global#illumiAccountId},
  "id":${#Global#illumiReadOnlyUserId},
  "oldpassword": "${#Global#illumiReadOnlyPassword}",
  "password": "${#Global#illumiReadOnlyPassword}",
  "updatePassword":false
}</con:request><con:assertion type="Simple Contains" name="assert_incorrect_password"><con:configuration><token>IncorrectCurrentPassword</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="changepassword"><con:settings/><con:config service="ARTSA - UserManager" methodName="POST - updatePassword" resourcePath="/SaasCoreUserManager/rest/profile/password" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="changepassword" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="utoken" value="-2772986850395008429--9137665073999375300-167842882469763178-2012" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://10.200.0.124:8080</con:endpoint><con:request>{
  "username": ${#Global#username},
  "account": ${#Global#accountid},
  "id":${#Global#userid},
  "oldpassword": "${#Global#original}",
  "password": "${#Global#new}",
  "updatePassword":false
}</con:request><con:assertion type="XPath Match" name="XPath Match"><con:configuration><path>declare namespace soap='http://schemas.xmlsoap.org/soap/envelope/';
declare namespace ns1='http://10.200.0.124/SaasCoreUserManager/rest/profile/password';
//ns1:loginFailed</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="updatepassword"><con:settings/><con:config service="ARTSA - UserManager" methodName="POST - updatePassword" resourcePath="/SaasCoreUserManager/rest/profile/password" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="updatepassword" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="utoken" value="-2772986850395008429--9137665073999375300-167842882469763178-2012" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://10.200.0.124:8080</con:endpoint><con:request>{
  "username": ${#Global#username},
  "account": ${#Global#accountid},
  "id":${#Global#userid},
  "oldpassword": "${#Global#new}",
  "password": "${#Global#original}",
  "updatePassword":true
}</con:request><con:assertion type="XPath Match" name="assert_update_password"><con:configuration><path>declare namespace soap='http://schemas.xmlsoap.org/soap/envelope/';
declare namespace ns1='http://10.200.0.124/SaasCoreUserManager/rest/profile/password';
//ns1:loginFailed</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="shortpassword"><con:settings/><con:config service="ARTSA - UserManager" methodName="POST - updatePassword" resourcePath="/SaasCoreUserManager/rest/profile/password" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="shortpassword" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="utoken" value="-2772986850395008429--9137665073999375300-167842882469763178-2012" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://10.200.0.124:8080</con:endpoint><con:request>{
  "username": ${#Global#username},
  "account": ${#Global#accountid},
  "id":${#Global#userid},
  "oldpassword": "${#Global#original}",
  "password": "${#Global#short}",
  "updatePassword":true
}</con:request><con:assertion type="Simple Contains" name="assert_short_password"><con:configuration><token>PASSWORD_TOO_SHORT</token><ignoreCase>true</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="notcomplexpassword"><con:settings/><con:config service="ARTSA - UserManager" methodName="POST - updatePassword" resourcePath="/SaasCoreUserManager/rest/profile/password" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="notcomplexpassword" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="utoken" value="-2772986850395008429--9137665073999375300-167842882469763178-2012" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://10.200.0.124:8080</con:endpoint><con:request>{
  "username": ${#Global#username},
  "account": ${#Global#accountid},
  "id":${#Global#userid},
  "oldpassword": "${#Global#original}",
  "password": "${#Global#short}",
  "updatePassword":true
}</con:request><con:assertion type="Simple Contains" name="assert_not_complex_password"><con:configuration><token>PASSWORD_NOT_COMPLEX</token><ignoreCase>true</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:loadTest name="LoadTest 1"><con:settings><con:setting id="HttpSettings@close-connections">false</con:setting></con:settings><con:threadCount>5</con:threadCount><con:startDelay>0</con:startDelay><con:sampleInterval>250</con:sampleInterval><con:calculateTPSOnTimePassed>true</con:calculateTPSOnTimePassed><con:resetStatisticsOnThreadCountChange>true</con:resetStatisticsOnThreadCountChange><con:historyLimit>-1</con:historyLimit><con:testLimit>60</con:testLimit><con:limitType>TIME</con:limitType><con:loadStrategy><con:type>Simple</con:type></con:loadStrategy><con:assertion type="Step Status" name="Step Status"/><con:maxAssertionErrors>100</con:maxAssertionErrors><con:cancelExcessiveThreads>true</con:cancelExcessiveThreads><con:strategyInterval>500</con:strategyInterval></con:loadTest><con:properties/></con:testCase><con:properties/></con:testSuite><con:testSuite name="topicLockDownTestSuite"><con:description>This Test Suite is to test to ensure Topics is locked down based on roles.

Assertions have been made to either pass or fail the test cases.</con:description><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="topicLockDownTestCaseAdmin" searchProperties="true" id="43183c37-541f-4cbf-b0d8-190f2cd15e2f" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword=""><con:settings/><con:testStep type="restrequest" name="authAccountUser"><con:settings/><con:config service="ARTSA- Account Manager" resourcePath="/SaasCoreAccountManager/rest/accountauth" methodName="POST - authenticate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="authAccountUser" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://10.200.0.124:8080</con:endpoint><con:request>{
  "username":${#Global#illumiAccountUsername},
  "password":${#Global#illumiAccountPassword}
}</con:request><con:assertion type="XPath Match" name="XPath Match"><con:configuration><path>declare namespace soap='http://schemas.xmlsoap.org/soap/envelope/';
declare namespace ns1='http://10.200.0.124/SaasCoreAccountManager/rest/accountauth';
//ns1:loginFailed</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="username" value="${#Global#illumiAccountUsername}"/>
  <con:entry key="password" value="${#Global#illumiAccountPassword}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="authResponse"><con:settings/><con:config><script>import groovy.json.JsonSlurper
import com.eviware.soapui.impl.wsdl.teststeps.*

responseContent = testRunner.testCase.getTestStepByName("authAccountUser").getPropertyValue("response")
slurperresponse = new JsonSlurper().parseText(responseContent)

authkey = (slurperresponse.authkey)
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "illumiAccountAuthKey", authkey )

//log.info authkey</script></con:config></con:testStep><con:testStep type="groovy" name="setUtokenHeader"><con:settings/><con:config><script>import com.eviware.soapui.impl.wsdl.teststeps.*
import com.eviware.soapui.support.types.StringToStringMap;

def authkey = com.eviware.soapui.SoapUI.globalProperties.getPropertyValue( "illumiAccountAuthKey")
def tc = testRunner.testCase.testSuite.getTestCaseByName("topicLockDownTestCaseAdmin")
def ts11 = tc.getTestStepByName("editTopicLimit1")
def ts12 = tc.getTestStepByName("editTopicLimit100")


def headers = new StringToStringMap()
headers.putIfMissing("utoken",authkey)

ts11.getHttpRequest().setRequestHeaders(headers)
ts12.getHttpRequest().setRequestHeaders(headers)</script></con:config></con:testStep><con:testStep type="restrequest" name="authIllumiAdminUser"><con:settings/><con:config service="ARTSA - UserManager" resourcePath="/SaasCoreUserManager/rest/auth" methodName="POST - authenticate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="authIllumiAdminUser" mediaType="application/json" postQueryString="false" accept=""><con:description>get token for current User</con:description><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Contest-Type" value="application/json"/>
  &lt;con:entry key="Accept" value="application/json"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>http://10.200.0.124:8080</con:endpoint><con:request>{
  "username":"${#Global#illumiAdminUsername}",
  "password":"${#Global#illumiAdminPassword}",
  "accountName":"${#Global#illumiAccountName}"
}</con:request><con:assertion type="XPath Match" name="XPath Match"><con:configuration><path>declare namespace soap='http://schemas.xmlsoap.org/soap/envelope/';
declare namespace ns1='http://10.200.0.124/SaasCoreUserManager/rest/auth';
//ns1:loginFailed</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="authIllumiAdminResponse"><con:settings/><con:config><script>import groovy.json.JsonSlurper
import com.eviware.soapui.impl.wsdl.teststeps.*

responseContent = testRunner.testCase.getTestStepByName("authIllumiAdminUser").getPropertyValue("response")
slurperresponse = new JsonSlurper().parseText(responseContent)

authkey = (slurperresponse.authkey)
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "illumiAdminAuthKey", authkey )

//log.info authkey</script></con:config></con:testStep><con:testStep type="groovy" name="setAdminUtokenHeader"><con:settings/><con:config><script>import com.eviware.soapui.impl.wsdl.teststeps.*
import com.eviware.soapui.support.types.StringToStringMap;

def authkey = com.eviware.soapui.SoapUI.globalProperties.getPropertyValue( "illumiAdminAuthKey")
def tc = testRunner.testCase.testSuite.getTestCaseByName("topicLockDownTestCaseAdmin")
def ts11 = tc.getTestStepByName("viewTopicListAdmin")
def ts12 = tc.getTestStepByName("uniqueTopicNameTrueAdmin")
def ts13 = tc.getTestStepByName("uniqueTopicNameFalseAdmin")
def ts14 = tc.getTestStepByName("sanityTopicFailAdmin")
def ts15 = tc.getTestStepByName("sanityTopicPassAdmin")
def ts16 = tc.getTestStepByName("sanityTopicWarnAdmin")
def ts17 = tc.getTestStepByName("createTopicLimitFailAdmin")
def ts18 = tc.getTestStepByName("createTopicLimitPassAdmin")
def ts19 = tc.getTestStepByName("eidtTopicAdmin")
def ts110 = tc.getTestStepByName("alertTopicAddAdmin")
def ts111 = tc.getTestStepByName("alertTopicRemoveAdmin")
def ts112 = tc.getTestStepByName("auditTopicListAdmin")
def ts113 = tc.getTestStepByName("viewInternalTopicStatusAdmin")
def ts114 = tc.getTestStepByName("updateInternalTopicStatusAdmin")
def ts115 = tc.getTestStepByName("deleteTopicAdmin")


def headers = new StringToStringMap()
headers.putIfMissing("utoken",authkey)

ts11.getHttpRequest().setRequestHeaders(headers)
ts12.getHttpRequest().setRequestHeaders(headers)
ts13.getHttpRequest().setRequestHeaders(headers)
ts14.getHttpRequest().setRequestHeaders(headers)
ts15.getHttpRequest().setRequestHeaders(headers)
ts16.getHttpRequest().setRequestHeaders(headers)
ts17.getHttpRequest().setRequestHeaders(headers)
ts18.getHttpRequest().setRequestHeaders(headers)
ts19.getHttpRequest().setRequestHeaders(headers)
ts110.getHttpRequest().setRequestHeaders(headers)
ts111.getHttpRequest().setRequestHeaders(headers)
ts112.getHttpRequest().setRequestHeaders(headers)
ts113.getHttpRequest().setRequestHeaders(headers)
ts114.getHttpRequest().setRequestHeaders(headers)
ts115.getHttpRequest().setRequestHeaders(headers)</script></con:config></con:testStep><con:testStep type="restrequest" name="viewTopicListAdmin"><con:settings/><con:config service="ARTSA - Topic Manager" methodName="GET - getAllTopics" resourcePath="/SaasCoreTopicManager/rest/topic" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="viewTopicListAdmin" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="utoken" value="2557575396315254482--2409833078173852182--1015834774429911385-2012" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://10.200.0.124:8080</con:endpoint><con:request/><con:assertion type="Simple Contains" name="containsAccountId"><con:configuration><token>${#Global#iillumiAccountId}</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="uniqueTopicNameTrueAdmin"><con:settings/><con:config service="ARTSA - Topic Manager" methodName="POST - topicIsUnique" resourcePath="/SaasCoreTopicManager/rest/topic/unique" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="uniqueTopicNameTrueAdmin" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="utoken" value="2557575396315254482--2409833078173852182--1015834774429911385-2012" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://10.200.0.124:8080</con:endpoint><con:request>{
  "name":"is this unique"
}</con:request><con:assertion type="Simple Contains" name="containsUniqueTrue"><con:configuration><token>true</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="uniqueTopicNameFalseAdmin"><con:settings/><con:config service="ARTSA - Topic Manager" methodName="POST - topicIsUnique" resourcePath="/SaasCoreTopicManager/rest/topic/unique" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="uniqueTopicNameFalseAdmin" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="utoken" value="2557575396315254482--2409833078173852182--1015834774429911385-2012" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://10.200.0.124:8080</con:endpoint><con:request>{
  "name":"Competitive Analysis"
}</con:request><con:assertion type="Simple Contains" name="containsUniqueFalse"><con:configuration><token>false</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="sanityTopicFailAdmin"><con:settings/><con:config service="ARTSA - Topic Manager" methodName="POST - topicSanityCheck" resourcePath="/SaasCoreTopicManager/rest/topic/sanity" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="sanityTopicFailAdmin" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="utoken" value="2557575396315254482--2409833078173852182--1015834774429911385-2012" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://10.200.0.124:8080</con:endpoint><con:request>{
"jsonDefinition": {
        "includeAll": [],
        "includeAny": [
            {
                "extraction": "KEYWORD",
                "type": "KEYWORD",
                "text": "i",
                "alias": "KEYWORD"
            },
            {
                "extraction": "KEYWORD",
                "type": "KEYWORD",
                "text": "me",
                "alias": "KEYWORD"
            },
            {
                "extraction": "KEYWORD",
                "type": "KEYWORD",
                "text": "you",
                "alias": "KEYWORD"
            }
        ],
        "exclude": [],
        "exactPhrases": [],
        "other": [
            {
                "type": "lang",
                "values": [
                    "en"
                ]
            }
        ],
   "results":{}
    }
}</con:request><con:assertion type="Simple Contains" name="containsTopicSanityFail"><con:configuration><token>Topic Sanity Test Failed</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="sanityTopicPassAdmin"><con:settings/><con:config service="ARTSA - Topic Manager" methodName="POST - topicSanityCheck" resourcePath="/SaasCoreTopicManager/rest/topic/sanity" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="sanityTopicPassAdmin" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="utoken" value="2557575396315254482--2409833078173852182--1015834774429911385-2012" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://10.200.0.124:8080</con:endpoint><con:request>{
"jsonDefinition": {
        "includeAll": [],
        "includeAny": [
            {
                "extraction": "KEYWORD",
                "type": "KEYWORD",
                "text": "Apple",
                "alias": "KEYWORD"
            },
            {
                "extraction": "KEYWORD",
                "type": "KEYWORD",
                "text": "Orange",
                "alias": "KEYWORD"
            },
            {
                "extraction": "KEYWORD",
                "type": "KEYWORD",
                "text": "Bananna",
                "alias": "KEYWORD"
            }
        ],
        "exclude": [],
        "exactPhrases": [],
        "other": [
            {
                "type": "lang",
                "values": [
                    "en"
                ]
            }
        ],
   "results":{}
    }
}</con:request><con:assertion type="Simple Contains" name="containsTopicSanityPass"><con:configuration><token>Topic Sanity Test Passed</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="sanityTopicWarnAdmin"><con:settings/><con:config service="ARTSA - Topic Manager" methodName="POST - topicSanityCheck" resourcePath="/SaasCoreTopicManager/rest/topic/sanity" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="sanityTopicWarnAdmin" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="utoken" value="2557575396315254482--2409833078173852182--1015834774429911385-2012" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://10.200.0.124:8080</con:endpoint><con:request>{
"jsonDefinition": {
        "includeAll": [],
        "includeAny": [
            {
                "extraction": "KEYWORD",
                "type": "KEYWORD",
                "text": "me",
                "alias": "KEYWORD"
            },
            {
                "extraction": "KEYWORD",
                "type": "KEYWORD",
                "text": "you",
                "alias": "KEYWORD"
            },
            {
                "extraction": "KEYWORD",
                "type": "KEYWORD",
                "text": "Bananna",
                "alias": "KEYWORD"
            }
        ],
        "exclude": [],
        "exactPhrases": [],
        "other": [
            {
                "type": "lang",
                "values": [
                    "en"
                ]
            }
        ],
   "results":{}
    }
}</con:request><con:assertion type="Simple Contains" name="containsTopicSanityWarn"><con:configuration><token>Topic Sanity Test issued Warning</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="editTopicLimit1"><con:settings/><con:config service="ARTSA- Account Manager" methodName="POST - update" resourcePath="/SaasCoreAccountManager/rest/account" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="editTopicLimit1" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="utoken" value="-4851208494011614058-7270597858038093055-8015452504827319962-0" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://10.200.0.124:8080</con:endpoint><con:request>{
  "id":${#Global#illumiAccountId},
  "name":${#Global#illumiAccountName},
  "accountType":0,
  "brand":"",
  "expirationDate":"${#Global#expirationDate}",
  "accessEli":true,
  "accessTempEditorEli":true,
  "contactName":"anything goes here",
  "contactEmail":"b@b.BBB",
  "address":"anything goes here",
  "city":"anything goes here",
  "state":"anything goes here",
  "zipCode":"anything goes here",
  "psOwner":"anything goes here",
  "maxTopicLimit":1,
  "maxUserLimit":100,
  "maxVolumeLimit":3,
  "maxDataLimit":2
}</con:request><con:assertion type="XPath Match" name="XPathMaxTopicLimit1"><con:configuration><path>declare namespace soap='http://schemas.xmlsoap.org/soap/envelope/';
declare namespace ns1='http://10.200.0.124/SaasCoreAccountManager/rest/account';
//ns1:maxTopicLimit</path><content>1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="createTopicLimitFailAdmin"><con:settings/><con:config service="ARTSA - Topic Manager" methodName="POST - update" resourcePath="/SaasCoreTopicManager/rest/topic" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="createTopicLimitFailAdmin" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="utoken" value="2557575396315254482--2409833078173852182--1015834774429911385-2012" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://10.200.0.124:8080</con:endpoint><con:request>{
    "id": -1,
    "name": "Topic create through API 1",
    "jsonDefinition": {
        "includeAll": [
            {
                "extraction": "ENTITY",
                "type": "COMPANY",
                "text": "Apple",
                "alias": "Company"
            }
        ],
        "includeAny": [],
        "exclude": [],
        "exactPhrases": [],
        "other": [
            {
                "type": "lang",
                "values": [
                    "en"
                ]
            }
        ],
   "results":{}
    }
}</con:request><con:assertion type="Simple Contains" name="containsTopicLimitReached"><con:configuration><token>TopicLimitReached</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="editTopicLimit100"><con:settings/><con:config service="ARTSA- Account Manager" methodName="POST - update" resourcePath="/SaasCoreAccountManager/rest/account" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="editTopicLimit100" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="utoken" value="-4851208494011614058-7270597858038093055-8015452504827319962-0" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://10.200.0.124:8080</con:endpoint><con:request>{
  "id":${#Global#illumiAccountId},
  "name":${#Global#illumiAccountName},
  "accountType":0,
  "brand":"",
  "expirationDate":"${#Global#expirationDate}",
  "accessEli":true,
  "accessTempEditorEli":true,
  "contactName":"anything goes here",
  "contactEmail":"b@b.BBB",
  "address":"anything goes here",
  "city":"anything goes here",
  "state":"anything goes here",
  "zipCode":"anything goes here",
  "psOwner":"anything goes here",
  "maxTopicLimit":100,
  "maxUserLimit":100,
  "maxVolumeLimit":3,
  "maxDataLimit":2
}</con:request><con:assertion type="XPath Match" name="XPathMaxTopicLimit1"><con:configuration><path>declare namespace soap='http://schemas.xmlsoap.org/soap/envelope/';
declare namespace ns1='http://10.200.0.124/SaasCoreAccountManager/rest/account';
//ns1:maxTopicLimit</path><content>100</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="createTopicLimitPassAdmin"><con:settings/><con:config service="ARTSA - Topic Manager" methodName="POST - update" resourcePath="/SaasCoreTopicManager/rest/topic" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="createTopicLimitPassAdmin" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="utoken" value="2557575396315254482--2409833078173852182--1015834774429911385-2012" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://10.200.0.124:8080</con:endpoint><con:request>{
    "id": -1,
    "name": "Topic create through API 1",
    "jsonDefinition": {
        "includeAll": [
            {
                "extraction": "ENTITY",
                "type": "COMPANY",
                "text": "Apple",
                "alias": "Company"
            }
        ],
        "includeAny": [],
        "exclude": [],
        "exactPhrases": [],
        "other": [
            {
                "type": "lang",
                "values": [
                    "en"
                ]
            }
        ],
   "results":{}
    }
}</con:request><con:assertion type="Simple Contains" name="containsCreatedTopicName"><con:configuration><token>Topic create through API 1</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="topicIllumiAdminResponse"><con:settings/><con:config><script>import groovy.json.JsonSlurper
import com.eviware.soapui.impl.wsdl.teststeps.*

responseContent = testRunner.testCase.getTestStepByName("createTopicLimitPassAdmin").getPropertyValue("response")
slurperresponse = new JsonSlurper().parseText(responseContent)

def topicId = (slurperresponse.id) as String
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "illumiAdminCreatTopicId", topicId )
def topicName = (slurperresponse.name) as String
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "illumiAdminCreatTopicName", topicName )

//log.info authkey</script></con:config></con:testStep><con:testStep type="restrequest" name="eidtTopicAdmin"><con:settings/><con:config service="ARTSA - Topic Manager" methodName="POST - update" resourcePath="/SaasCoreTopicManager/rest/topic" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="eidtTopicAdmin" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="utoken" value="2557575396315254482--2409833078173852182--1015834774429911385-2012" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://10.200.0.124:8080</con:endpoint><con:request>{
    "id": ${#Global#illumiAdminCreatTopicId},
    "name": "${#Global#illumiAdminCreatTopicName}",
    "jsonDefinition": {
        "includeAll": [
            {
                "extraction": "ENTITY",
                "type": "COMPANY",
                "text": "Apple",
                "alias": "Company"
            }
        ],
        "includeAny": [],
        "exclude": [],
        "exactPhrases": [],
        "other": [
            {
                "type": "lang",
                "values": [
                    "en"
                ]
            }
        ],
   "results":{}
    }
}</con:request><con:assertion type="Simple Contains" name="containsCreatedTopicName"><con:configuration><token>Topic create through API 1</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="alertTopicAddAdmin"><con:settings/><con:config service="ARTSA - Topic Manager" methodName="POST - addAlert" resourcePath="/SaasCoreTopicManager/rest/topic/update/alerts" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="alertTopicAddAdmin" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="utoken" value="2557575396315254482--2409833078173852182--1015834774429911385-2012" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://10.200.0.124:8080</con:endpoint><con:request>{
    "id": ${#Global#illumiAdminCreatTopicId},
    "topicAlerts":
     [
        {
            "sensitivity": "HIGH",
            "alertActive": true,
            "alertType": "FOLLOWER_ALERT"
        },
        {
            "sensitivity": "LOW",
            "alertActive": true,
            "alertType": "FOLLOWER_ALERT"
        },
       {
            "sensitivity": "HIGH",
            "alertActive": true,
            "alertType": "IMPRESSION_ALERT"
        },
        {
            "sensitivity": "LOW",
            "alertActive": true,
            "alertType": "IMPRESSION_ALERT"
        },
       {
            "sensitivity": "HIGH",
            "alertActive": true,
            "alertType": "KLOUT_ALERT"
        },
        {
            "sensitivity": "LOW",
            "alertActive": true,
            "alertType": "KLOUT_ALERT"
        },
       {
            "sensitivity": "HIGH",
            "alertActive": true,
            "alertType": "SENTIMENT_ALERT"
        },
        {
            "sensitivity": "LOW",
            "alertActive": true,
            "alertType": "SENTIMENT_ALERT"
        },
       {
            "sensitivity": "HIGH",
            "alertActive": true,
            "alertType": "TREND_ALERT"
        },
        {
            "sensitivity": "LOW",
            "alertActive": true,
            "alertType": "TREND_ALERT"
        },
       {
            "sensitivity": "HIGH",
            "alertActive": true,
            "alertType": "VOLUME_ALERT"
        },
        {
            "sensitivity": "LOW",
            "alertActive": true,
            "alertType": "VOLUME_ALERT"
        },
        {
            "sensitivity": "HIGH",
            "alertActive": false,
            "alertType": "FOLLOWER_ALERT"
        },
        {
            "sensitivity": "LOW",
            "alertActive": false,
            "alertType": "FOLLOWER_ALERT"
        },
       {
            "sensitivity": "HIGH",
            "alertActive": false,
            "alertType": "IMPRESSION_ALERT"
        },
        {
            "sensitivity": "LOW",
            "alertActive": false,
            "alertType": "IMPRESSION_ALERT"
        },
       {
            "sensitivity": "HIGH",
            "alertActive": false,
            "alertType": "KLOUT_ALERT"
        },
        {
            "sensitivity": "LOW",
            "alertActive": false,
            "alertType": "KLOUT_ALERT"
        },
       {
            "sensitivity": "HIGH",
            "alertActive": false,
            "alertType": "SENTIMENT_ALERT"
        },
        {
            "sensitivity": "LOW",
            "alertActive": false,
            "alertType": "SENTIMENT_ALERT"
        },
       {
            "sensitivity": "HIGH",
            "alertActive": false,
            "alertType": "TREND_ALERT"
        },
        {
            "sensitivity": "LOW",
            "alertActive": false,
            "alertType": "TREND_ALERT"
        },
       {
            "sensitivity": "HIGH",
            "alertActive": false,
            "alertType": "VOLUME_ALERT"
        },
        {
            "sensitivity": "LOW",
            "alertActive": false,
            "alertType": "VOLUME_ALERT"
        }
     ]
}</con:request><con:assertion type="Simple Contains" name="containsFollowerAlert"><con:configuration><token>FOLLOWER_ALERT</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="alertTopicRemoveAdmin"><con:settings/><con:config service="ARTSA - Topic Manager" methodName="POST - addAlert" resourcePath="/SaasCoreTopicManager/rest/topic/update/alerts" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="alertTopicRemoveAdmin" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="utoken" value="2557575396315254482--2409833078173852182--1015834774429911385-2012" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://10.200.0.124:8080</con:endpoint><con:request>{
    "id": ${#Global#illumiAdminCreatTopicId},
    "topicAlerts":
     [
        
     ]
}</con:request><con:assertion type="Simple NotContains" name="notContainsFollowerAlert"><con:configuration><token>FOLLOWER_ALERT</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="auditTopicListAdmin"><con:settings/><con:config service="ARTSA - Topic Manager" methodName="GET - getTopicAudits" resourcePath="/SaasCoreTopicManager/rest/topic/topicAudit/{id}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="auditTopicListAdmin" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="utoken" value="2557575396315254482--2409833078173852182--1015834774429911385-2012" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://10.200.0.124:8080</con:endpoint><con:request/><con:assertion type="Simple Contains" name="containsAdd"><con:configuration><token>ADD</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="id" value="${#Global#illumiAdminCreatTopicId}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="viewInternalTopicStatusAdmin"><con:settings/><con:config service="http://10.200.0.124:8080" methodName="GET - Topic Status" resourcePath="/SaasCoreInternalManager/rest/internal/topic_status/{id}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="viewInternalTopicStatusAdmin" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="utoken" value="2557575396315254482--2409833078173852182--1015834774429911385-2012" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://10.200.0.124:8080</con:endpoint><con:request/><con:assertion type="Simple Contains" name="containsForbidden"><con:configuration><token>UserForbidden</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="id" value="${#Global#illumiAdminCreatTopicId}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="updateInternalTopicStatusAdmin"><con:settings/><con:config service="http://10.200.0.124:8080" methodName="POST - Topic Status" resourcePath="/SaasCoreInternalManager/rest/internal/topic_status/" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="updateInternalTopicStatusAdmin" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="utoken" value="2557575396315254482--2409833078173852182--1015834774429911385-2012" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://10.200.0.124:8080</con:endpoint><con:request>{
  "id": ${#Global#illumiAdminCreatTopicId},
  //"name": "Quite Large",
  //"definition": "he OR him OR me OR you OR we OR twitter",
  "status": 1,
  "account": ${#Global#illumiAccountId}
}</con:request><con:assertion type="Simple Contains" name="containsForbidden"><con:configuration><token>UserForbidden</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="deleteTopicAdmin"><con:settings/><con:config service="ARTSA - Topic Manager" methodName="DELETE - deleteTopic" resourcePath="/SaasCoreTopicManager/rest/topic/{id}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="deleteTopicAdmin" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="utoken" value="2557575396315254482--2409833078173852182--1015834774429911385-2012" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://10.200.0.124:8080</con:endpoint><con:request/><con:assertion type="Simple Contains" name="Contains"><con:configuration><token/><ignoreCase>false</ignoreCase><useRegEx>true</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="id" value="${#Global#illumiAdminCreatTopicId}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:properties/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="topicLockDownTestCaseEditor" searchProperties="true" id="96664cdd-f16f-42e3-b8f0-64e8b27cf753" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword=""><con:settings/><con:testStep type="restrequest" name="authAccountUser"><con:settings/><con:config service="ARTSA- Account Manager" resourcePath="/SaasCoreAccountManager/rest/accountauth" methodName="POST - authenticate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="authAccountUser" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://10.200.0.124:8080</con:endpoint><con:request>{
  "username":${#Global#illumiAccountUsername},
  "password":${#Global#illumiAccountPassword}
}</con:request><con:assertion type="XPath Match" name="XPath Match"><con:configuration><path>declare namespace soap='http://schemas.xmlsoap.org/soap/envelope/';
declare namespace ns1='http://10.200.0.124/SaasCoreAccountManager/rest/accountauth';
//ns1:loginFailed</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="username" value="${#Global#illumiAccountUsername}"/>
  <con:entry key="password" value="${#Global#illumiAccountPassword}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="authResponse"><con:settings/><con:config><script>import groovy.json.JsonSlurper
import com.eviware.soapui.impl.wsdl.teststeps.*

responseContent = testRunner.testCase.getTestStepByName("authAccountUser").getPropertyValue("response")
slurperresponse = new JsonSlurper().parseText(responseContent)

authkey = (slurperresponse.authkey)
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "illumiAccountAuthKey", authkey )

//log.info authkey</script></con:config></con:testStep><con:testStep type="groovy" name="setUtokenHeader"><con:settings/><con:config><script>import com.eviware.soapui.impl.wsdl.teststeps.*
import com.eviware.soapui.support.types.StringToStringMap;

def authkey = com.eviware.soapui.SoapUI.globalProperties.getPropertyValue( "illumiAccountAuthKey")
def tc = testRunner.testCase.testSuite.getTestCaseByName("topicLockDownTestCaseEditor")
def ts11 = tc.getTestStepByName("editTopicLimit1")
def ts12 = tc.getTestStepByName("editTopicLimit100")


def headers = new StringToStringMap()
headers.putIfMissing("utoken",authkey)

ts11.getHttpRequest().setRequestHeaders(headers)
ts12.getHttpRequest().setRequestHeaders(headers)</script></con:config></con:testStep><con:testStep type="restrequest" name="authIllumiEditorUser"><con:settings/><con:config service="ARTSA - UserManager" resourcePath="/SaasCoreUserManager/rest/auth" methodName="POST - authenticate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="authIllumiEditorUser" mediaType="application/json" postQueryString="false" accept=""><con:description>get token for current User</con:description><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Contest-Type" value="application/json"/>
  &lt;con:entry key="Accept" value="application/json"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>http://10.200.0.124:8080</con:endpoint><con:request>{
  "username":"${#Global#illumiEditorUsername}",
  "password":"${#Global#illumiEditorPassword}",
  "accountName":"${#Global#illumiAccountName}"
}</con:request><con:assertion type="XPath Match" name="XPath Match"><con:configuration><path>declare namespace soap='http://schemas.xmlsoap.org/soap/envelope/';
declare namespace ns1='http://10.200.0.124/SaasCoreUserManager/rest/auth';
//ns1:loginFailed</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="authIllumiEditorResponse"><con:settings/><con:config><script>import groovy.json.JsonSlurper
import com.eviware.soapui.impl.wsdl.teststeps.*

responseContent = testRunner.testCase.getTestStepByName("authIllumiEditorUser").getPropertyValue("response")
slurperresponse = new JsonSlurper().parseText(responseContent)

authkey = (slurperresponse.authkey)
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "illumiEditorAuthKey", authkey )

//log.info authkey</script></con:config></con:testStep><con:testStep type="groovy" name="setEditorUtokenHeader"><con:settings/><con:config><script>import com.eviware.soapui.impl.wsdl.teststeps.*
import com.eviware.soapui.support.types.StringToStringMap;

def authkey = com.eviware.soapui.SoapUI.globalProperties.getPropertyValue( "illumiEditorAuthKey")
def tc = testRunner.testCase.testSuite.getTestCaseByName("topicLockDownTestCaseEditor")
def ts11 = tc.getTestStepByName("viewTopicListEditor")
def ts12 = tc.getTestStepByName("uniqueTopicNameTrueEditor")
def ts13 = tc.getTestStepByName("uniqueTopicNameFalseEditor")
def ts14 = tc.getTestStepByName("sanityTopicFailEditor")
def ts15 = tc.getTestStepByName("sanityTopicPassEditor")
def ts16 = tc.getTestStepByName("sanityTopicWarnEditor")
def ts17 = tc.getTestStepByName("createTopicLimitFailEditor")
def ts18 = tc.getTestStepByName("createTopicLimitPassEditor")
def ts19 = tc.getTestStepByName("eidtTopicEditor")
def ts110 = tc.getTestStepByName("alertTopicAddEditor")
def ts111 = tc.getTestStepByName("alertTopicRemoveEditor")
def ts112 = tc.getTestStepByName("auditTopicListEditor")
def ts113 = tc.getTestStepByName("viewInternalTopicStatusEditor")
def ts114 = tc.getTestStepByName("updateInternalTopicStatusEditor")
def ts115 = tc.getTestStepByName("deleteTopicEditor")


def headers = new StringToStringMap()
headers.putIfMissing("utoken",authkey)

ts11.getHttpRequest().setRequestHeaders(headers)
ts12.getHttpRequest().setRequestHeaders(headers)
ts13.getHttpRequest().setRequestHeaders(headers)
ts14.getHttpRequest().setRequestHeaders(headers)
ts15.getHttpRequest().setRequestHeaders(headers)
ts16.getHttpRequest().setRequestHeaders(headers)
ts17.getHttpRequest().setRequestHeaders(headers)
ts18.getHttpRequest().setRequestHeaders(headers)
ts19.getHttpRequest().setRequestHeaders(headers)
ts110.getHttpRequest().setRequestHeaders(headers)
ts111.getHttpRequest().setRequestHeaders(headers)
ts112.getHttpRequest().setRequestHeaders(headers)
ts113.getHttpRequest().setRequestHeaders(headers)
ts114.getHttpRequest().setRequestHeaders(headers)
ts115.getHttpRequest().setRequestHeaders(headers)</script></con:config></con:testStep><con:testStep type="restrequest" name="viewTopicListEditor"><con:settings/><con:config service="ARTSA - Topic Manager" methodName="GET - getAllTopics" resourcePath="/SaasCoreTopicManager/rest/topic" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="viewTopicListEditor" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="utoken" value="-5890243122822910411-796678420634545961-7560237557281013618-2012" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://10.200.0.124:8080</con:endpoint><con:request/><con:assertion type="Simple Contains" name="containsAccountId"><con:configuration><token>${#Global#iillumiAccountId}</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="uniqueTopicNameTrueEditor"><con:settings/><con:config service="ARTSA - Topic Manager" methodName="POST - topicIsUnique" resourcePath="/SaasCoreTopicManager/rest/topic/unique" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="uniqueTopicNameTrueEditor" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="utoken" value="-5890243122822910411-796678420634545961-7560237557281013618-2012" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://10.200.0.124:8080</con:endpoint><con:request>{
  "name":"is this unique"
}</con:request><con:assertion type="Simple Contains" name="containsUniqueTrue"><con:configuration><token>true</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="uniqueTopicNameFalseEditor"><con:settings/><con:config service="ARTSA - Topic Manager" methodName="POST - topicIsUnique" resourcePath="/SaasCoreTopicManager/rest/topic/unique" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="uniqueTopicNameFalseEditor" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="utoken" value="-5890243122822910411-796678420634545961-7560237557281013618-2012" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://10.200.0.124:8080</con:endpoint><con:request>{
  "name":"Competitive Analysis"
}</con:request><con:assertion type="Simple Contains" name="containsUniqueFalse"><con:configuration><token>false</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="sanityTopicFailEditor"><con:settings/><con:config service="ARTSA - Topic Manager" methodName="POST - topicSanityCheck" resourcePath="/SaasCoreTopicManager/rest/topic/sanity" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="sanityTopicFailEditor" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="utoken" value="-5890243122822910411-796678420634545961-7560237557281013618-2012" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://10.200.0.124:8080</con:endpoint><con:request>{
"jsonDefinition": {
        "includeAll": [],
        "includeAny": [
            {
                "extraction": "KEYWORD",
                "type": "KEYWORD",
                "text": "i",
                "alias": "KEYWORD"
            },
            {
                "extraction": "KEYWORD",
                "type": "KEYWORD",
                "text": "me",
                "alias": "KEYWORD"
            },
            {
                "extraction": "KEYWORD",
                "type": "KEYWORD",
                "text": "you",
                "alias": "KEYWORD"
            }
        ],
        "exclude": [],
        "exactPhrases": [],
        "other": [
            {
                "type": "lang",
                "values": [
                    "en"
                ]
            }
        ],
   "results":{}
    }
}</con:request><con:assertion type="Simple Contains" name="containsTopicSanityFail"><con:configuration><token>Topic Sanity Test Failed</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="sanityTopicPassEditor"><con:settings/><con:config service="ARTSA - Topic Manager" methodName="POST - topicSanityCheck" resourcePath="/SaasCoreTopicManager/rest/topic/sanity" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="sanityTopicPassEditor" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="utoken" value="-5890243122822910411-796678420634545961-7560237557281013618-2012" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://10.200.0.124:8080</con:endpoint><con:request>{
"jsonDefinition": {
        "includeAll": [],
        "includeAny": [
            {
                "extraction": "KEYWORD",
                "type": "KEYWORD",
                "text": "Apple",
                "alias": "KEYWORD"
            },
            {
                "extraction": "KEYWORD",
                "type": "KEYWORD",
                "text": "Orange",
                "alias": "KEYWORD"
            },
            {
                "extraction": "KEYWORD",
                "type": "KEYWORD",
                "text": "Bananna",
                "alias": "KEYWORD"
            }
        ],
        "exclude": [],
        "exactPhrases": [],
        "other": [
            {
                "type": "lang",
                "values": [
                    "en"
                ]
            }
        ],
   "results":{}
    }
}</con:request><con:assertion type="Simple Contains" name="containsTopicSanityPass"><con:configuration><token>Topic Sanity Test Passed</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="sanityTopicWarnEditor"><con:settings/><con:config service="ARTSA - Topic Manager" methodName="POST - topicSanityCheck" resourcePath="/SaasCoreTopicManager/rest/topic/sanity" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="sanityTopicWarnEditor" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="utoken" value="-5890243122822910411-796678420634545961-7560237557281013618-2012" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://10.200.0.124:8080</con:endpoint><con:request>{
"jsonDefinition": {
        "includeAll": [],
        "includeAny": [
            {
                "extraction": "KEYWORD",
                "type": "KEYWORD",
                "text": "me",
                "alias": "KEYWORD"
            },
            {
                "extraction": "KEYWORD",
                "type": "KEYWORD",
                "text": "you",
                "alias": "KEYWORD"
            },
            {
                "extraction": "KEYWORD",
                "type": "KEYWORD",
                "text": "Bananna",
                "alias": "KEYWORD"
            }
        ],
        "exclude": [],
        "exactPhrases": [],
        "other": [
            {
                "type": "lang",
                "values": [
                    "en"
                ]
            }
        ],
   "results":{}
    }
}</con:request><con:assertion type="Simple Contains" name="containsTopicSanityWarn"><con:configuration><token>Topic Sanity Test issued Warning</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="editTopicLimit1"><con:settings/><con:config service="ARTSA- Account Manager" methodName="POST - update" resourcePath="/SaasCoreAccountManager/rest/account" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="editTopicLimit1" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="utoken" value="-7404633039626725204--5924243056660494990--5701824735716047415-0" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://10.200.0.124:8080</con:endpoint><con:request>{
  "id":${#Global#illumiAccountId},
  "name":${#Global#illumiAccountName},
  "accountType":0,
  "brand":"",
  "expirationDate":"${#Global#expirationDate}",
  "accessEli":true,
  "accessTempEditorEli":true,
  "contactName":"anything goes here",
  "contactEmail":"b@b.BBB",
  "address":"anything goes here",
  "city":"anything goes here",
  "state":"anything goes here",
  "zipCode":"anything goes here",
  "psOwner":"anything goes here",
  "maxTopicLimit":1,
  "maxUserLimit":100,
  "maxVolumeLimit":3,
  "maxDataLimit":2
}</con:request><con:assertion type="XPath Match" name="XPathMaxTopicLimit1"><con:configuration><path>declare namespace soap='http://schemas.xmlsoap.org/soap/envelope/';
declare namespace ns1='http://10.200.0.124/SaasCoreAccountManager/rest/account';
//ns1:maxTopicLimit</path><content>1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="createTopicLimitFailEditor"><con:settings/><con:config service="ARTSA - Topic Manager" methodName="POST - update" resourcePath="/SaasCoreTopicManager/rest/topic" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="createTopicLimitFailEditor" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="utoken" value="-5890243122822910411-796678420634545961-7560237557281013618-2012" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://10.200.0.124:8080</con:endpoint><con:request>{
    "id": -1,
    "name": "Topic create through API 1",
    "jsonDefinition": {
        "includeAll": [
            {
                "extraction": "ENTITY",
                "type": "COMPANY",
                "text": "Apple",
                "alias": "Company"
            }
        ],
        "includeAny": [],
        "exclude": [],
        "exactPhrases": [],
        "other": [
            {
                "type": "lang",
                "values": [
                    "en"
                ]
            }
        ],
   "results":{}
    }
}</con:request><con:assertion type="Simple Contains" name="containsTopicLimitReached"><con:configuration><token>TopicLimitReached</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="editTopicLimit100"><con:settings/><con:config service="ARTSA- Account Manager" methodName="POST - update" resourcePath="/SaasCoreAccountManager/rest/account" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="editTopicLimit100" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="utoken" value="-7404633039626725204--5924243056660494990--5701824735716047415-0" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://10.200.0.124:8080</con:endpoint><con:request>{
  "id":${#Global#illumiAccountId},
  "name":${#Global#illumiAccountName},
  "accountType":0,
  "brand":"",
  "expirationDate":"${#Global#expirationDate}",
  "accessEli":true,
  "accessTempEditorEli":true,
  "contactName":"anything goes here",
  "contactEmail":"b@b.BBB",
  "address":"anything goes here",
  "city":"anything goes here",
  "state":"anything goes here",
  "zipCode":"anything goes here",
  "psOwner":"anything goes here",
  "maxTopicLimit":100,
  "maxUserLimit":100,
  "maxVolumeLimit":3,
  "maxDataLimit":2
}</con:request><con:assertion type="XPath Match" name="XPathMaxTopicLimit1"><con:configuration><path>declare namespace soap='http://schemas.xmlsoap.org/soap/envelope/';
declare namespace ns1='http://10.200.0.124/SaasCoreAccountManager/rest/account';
//ns1:maxTopicLimit</path><content>100</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="createTopicLimitPassEditor"><con:settings/><con:config service="ARTSA - Topic Manager" methodName="POST - update" resourcePath="/SaasCoreTopicManager/rest/topic" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="createTopicLimitPassEditor" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="utoken" value="-5890243122822910411-796678420634545961-7560237557281013618-2012" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://10.200.0.124:8080</con:endpoint><con:request>{
    "id": -1,
    "name": "Topic create through API 1",
    "jsonDefinition": {
        "includeAll": [
            {
                "extraction": "ENTITY",
                "type": "COMPANY",
                "text": "Apple",
                "alias": "Company"
            }
        ],
        "includeAny": [],
        "exclude": [],
        "exactPhrases": [],
        "other": [
            {
                "type": "lang",
                "values": [
                    "en"
                ]
            }
        ],
   "results":{}
    }
}</con:request><con:assertion type="Simple Contains" name="containsCreatedTopicName"><con:configuration><token>Topic create through API 1</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="topicIllumiEditorResponse"><con:settings/><con:config><script>import groovy.json.JsonSlurper
import com.eviware.soapui.impl.wsdl.teststeps.*

responseContent = testRunner.testCase.getTestStepByName("createTopicLimitPassEditor").getPropertyValue("response")
slurperresponse = new JsonSlurper().parseText(responseContent)

def topicId = (slurperresponse.id) as String
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "illumiEditorCreatTopicId", topicId )
def topicName = (slurperresponse.name) as String
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "illumiEditorCreatTopicName", topicName )

//log.info authkey</script></con:config></con:testStep><con:testStep type="restrequest" name="eidtTopicEditor"><con:settings/><con:config service="ARTSA - Topic Manager" methodName="POST - update" resourcePath="/SaasCoreTopicManager/rest/topic" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="eidtTopicEditor" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="utoken" value="-5890243122822910411-796678420634545961-7560237557281013618-2012" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://10.200.0.124:8080</con:endpoint><con:request>{
    "id": ${#Global#illumiEditorCreatTopicId},
    "name": "${#Global#illumiEditorCreatTopicName}",
    "jsonDefinition": {
        "includeAll": [
            {
                "extraction": "ENTITY",
                "type": "COMPANY",
                "text": "Apple",
                "alias": "Company"
            }
        ],
        "includeAny": [],
        "exclude": [],
        "exactPhrases": [],
        "other": [
            {
                "type": "lang",
                "values": [
                    "en"
                ]
            }
        ],
   "results":{}
    }
}</con:request><con:assertion type="Simple Contains" name="containsCreatedTopicName"><con:configuration><token>Topic create through API 1</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="alertTopicAddEditor"><con:settings/><con:config service="ARTSA - Topic Manager" methodName="POST - addAlert" resourcePath="/SaasCoreTopicManager/rest/topic/update/alerts" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="alertTopicAddEditor" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="utoken" value="-5890243122822910411-796678420634545961-7560237557281013618-2012" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://10.200.0.124:8080</con:endpoint><con:request>{
    "id": ${#Global#illumiEditorCreatTopicId},
    "topicAlerts":
     [
        {
            "sensitivity": "HIGH",
            "alertActive": true,
            "alertType": "FOLLOWER_ALERT"
        },
        {
            "sensitivity": "LOW",
            "alertActive": true,
            "alertType": "FOLLOWER_ALERT"
        },
       {
            "sensitivity": "HIGH",
            "alertActive": true,
            "alertType": "IMPRESSION_ALERT"
        },
        {
            "sensitivity": "LOW",
            "alertActive": true,
            "alertType": "IMPRESSION_ALERT"
        },
       {
            "sensitivity": "HIGH",
            "alertActive": true,
            "alertType": "KLOUT_ALERT"
        },
        {
            "sensitivity": "LOW",
            "alertActive": true,
            "alertType": "KLOUT_ALERT"
        },
       {
            "sensitivity": "HIGH",
            "alertActive": true,
            "alertType": "SENTIMENT_ALERT"
        },
        {
            "sensitivity": "LOW",
            "alertActive": true,
            "alertType": "SENTIMENT_ALERT"
        },
       {
            "sensitivity": "HIGH",
            "alertActive": true,
            "alertType": "TREND_ALERT"
        },
        {
            "sensitivity": "LOW",
            "alertActive": true,
            "alertType": "TREND_ALERT"
        },
       {
            "sensitivity": "HIGH",
            "alertActive": true,
            "alertType": "VOLUME_ALERT"
        },
        {
            "sensitivity": "LOW",
            "alertActive": true,
            "alertType": "VOLUME_ALERT"
        },
        {
            "sensitivity": "HIGH",
            "alertActive": false,
            "alertType": "FOLLOWER_ALERT"
        },
        {
            "sensitivity": "LOW",
            "alertActive": false,
            "alertType": "FOLLOWER_ALERT"
        },
       {
            "sensitivity": "HIGH",
            "alertActive": false,
            "alertType": "IMPRESSION_ALERT"
        },
        {
            "sensitivity": "LOW",
            "alertActive": false,
            "alertType": "IMPRESSION_ALERT"
        },
       {
            "sensitivity": "HIGH",
            "alertActive": false,
            "alertType": "KLOUT_ALERT"
        },
        {
            "sensitivity": "LOW",
            "alertActive": false,
            "alertType": "KLOUT_ALERT"
        },
       {
            "sensitivity": "HIGH",
            "alertActive": false,
            "alertType": "SENTIMENT_ALERT"
        },
        {
            "sensitivity": "LOW",
            "alertActive": false,
            "alertType": "SENTIMENT_ALERT"
        },
       {
            "sensitivity": "HIGH",
            "alertActive": false,
            "alertType": "TREND_ALERT"
        },
        {
            "sensitivity": "LOW",
            "alertActive": false,
            "alertType": "TREND_ALERT"
        },
       {
            "sensitivity": "HIGH",
            "alertActive": false,
            "alertType": "VOLUME_ALERT"
        },
        {
            "sensitivity": "LOW",
            "alertActive": false,
            "alertType": "VOLUME_ALERT"
        }
     ]
}</con:request><con:assertion type="Simple Contains" name="containsFollowerAlert"><con:configuration><token>FOLLOWER_ALERT</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="alertTopicRemoveEditor"><con:settings/><con:config service="ARTSA - Topic Manager" methodName="POST - addAlert" resourcePath="/SaasCoreTopicManager/rest/topic/update/alerts" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="alertTopicRemoveEditor" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="utoken" value="-5890243122822910411-796678420634545961-7560237557281013618-2012" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://10.200.0.124:8080</con:endpoint><con:request>{
    "id": ${#Global#illumiEditorCreatTopicId},
    "topicAlerts":
     [
        
     ]
}</con:request><con:assertion type="Simple NotContains" name="notContainsFollowerAlert"><con:configuration><token>FOLLOWER_ALERT</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="auditTopicListEditor"><con:settings/><con:config service="ARTSA - Topic Manager" methodName="GET - getTopicAudits" resourcePath="/SaasCoreTopicManager/rest/topic/topicAudit/{id}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="auditTopicListEditor" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="utoken" value="-5890243122822910411-796678420634545961-7560237557281013618-2012" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://10.200.0.124:8080</con:endpoint><con:request/><con:assertion type="Simple Contains" name="containsAdd"><con:configuration><token>ADD</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="id" value="${#Global#illumiEditorCreatTopicId}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="viewInternalTopicStatusEditor"><con:settings/><con:config service="http://10.200.0.124:8080" methodName="GET - Topic Status" resourcePath="/SaasCoreInternalManager/rest/internal/topic_status/{id}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="viewInternalTopicStatusEditor" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="utoken" value="-5890243122822910411-796678420634545961-7560237557281013618-2012" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://10.200.0.124:8080</con:endpoint><con:request/><con:assertion type="Simple Contains" name="containsForbidden"><con:configuration><token>UserForbidden</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="id" value="${#Global#illumiEditorCreatTopicId}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="updateInternalTopicStatusEditor"><con:settings/><con:config service="http://10.200.0.124:8080" methodName="POST - Topic Status" resourcePath="/SaasCoreInternalManager/rest/internal/topic_status/" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="updateInternalTopicStatusEditor" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="utoken" value="-5890243122822910411-796678420634545961-7560237557281013618-2012" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://10.200.0.124:8080</con:endpoint><con:request>{
  "id": ${#Global#illumiEditorCreatTopicId},
  //"name": "Quite Large",
  //"definition": "he OR him OR me OR you OR we OR twitter",
  "status": 1,
  "account": ${#Global#illumiAccountId}
}</con:request><con:assertion type="Simple Contains" name="containsForbidden"><con:configuration><token>UserForbidden</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="deleteTopicEditor"><con:settings/><con:config service="ARTSA - Topic Manager" methodName="DELETE - deleteTopic" resourcePath="/SaasCoreTopicManager/rest/topic/{id}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="deleteTopicEditor" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="utoken" value="-5890243122822910411-796678420634545961-7560237557281013618-2012" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://10.200.0.124:8080</con:endpoint><con:request/><con:assertion type="Simple Contains" name="Contains"><con:configuration><token/><ignoreCase>false</ignoreCase><useRegEx>true</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="id" value="${#Global#illumiEditorCreatTopicId}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:properties/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="topicLockDownTestCaseReadOnly" searchProperties="true" id="165aade3-b708-4177-b68e-59c6cacb66e9" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword=""><con:settings/><con:testStep type="restrequest" name="authAccountUser"><con:settings/><con:config service="ARTSA- Account Manager" resourcePath="/SaasCoreAccountManager/rest/accountauth" methodName="POST - authenticate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="authAccountUser" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://10.200.0.124:8080</con:endpoint><con:request>{
  "username":${#Global#illumiAccountUsername},
  "password":${#Global#illumiAccountPassword}
}</con:request><con:assertion type="XPath Match" name="XPath Match"><con:configuration><path>declare namespace soap='http://schemas.xmlsoap.org/soap/envelope/';
declare namespace ns1='http://10.200.0.124/SaasCoreAccountManager/rest/accountauth';
//ns1:loginFailed</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="username" value="${#Global#illumiAccountUsername}"/>
  <con:entry key="password" value="${#Global#illumiAccountPassword}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="authResponse"><con:settings/><con:config><script>import groovy.json.JsonSlurper
import com.eviware.soapui.impl.wsdl.teststeps.*

responseContent = testRunner.testCase.getTestStepByName("authAccountUser").getPropertyValue("response")
slurperresponse = new JsonSlurper().parseText(responseContent)

authkey = (slurperresponse.authkey)
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "illumiAccountAuthKey", authkey )

//log.info authkey</script></con:config></con:testStep><con:testStep type="groovy" name="setUtokenHeader"><con:settings/><con:config><script>import com.eviware.soapui.impl.wsdl.teststeps.*
import com.eviware.soapui.support.types.StringToStringMap;

def authkey = com.eviware.soapui.SoapUI.globalProperties.getPropertyValue( "illumiAccountAuthKey")
def tc = testRunner.testCase.testSuite.getTestCaseByName("topicLockDownTestCaseReadOnly")
def ts11 = tc.getTestStepByName("editTopicLimit1")
def ts12 = tc.getTestStepByName("editTopicLimit100")


def headers = new StringToStringMap()
headers.putIfMissing("utoken",authkey)

ts11.getHttpRequest().setRequestHeaders(headers)
ts12.getHttpRequest().setRequestHeaders(headers)</script></con:config></con:testStep><con:testStep type="restrequest" name="authIllumiReadOnlyUser"><con:settings/><con:config service="ARTSA - UserManager" resourcePath="/SaasCoreUserManager/rest/auth" methodName="POST - authenticate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="authIllumiReadOnlyUser" mediaType="application/json" postQueryString="false" accept=""><con:description>get token for current User</con:description><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Contest-Type" value="application/json"/>
  &lt;con:entry key="Accept" value="application/json"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>http://10.200.0.124:8080</con:endpoint><con:request>{
  "username":"${#Global#illumiReadOnlyUsername}",
  "password":"${#Global#illumiReadOnlyPassword}",
  "accountName":"${#Global#illumiAccountName}"
}</con:request><con:assertion type="XPath Match" name="XPath Match"><con:configuration><path>declare namespace soap='http://schemas.xmlsoap.org/soap/envelope/';
declare namespace ns1='http://10.200.0.124/SaasCoreUserManager/rest/auth';
//ns1:loginFailed</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="authIllumiReadOnlyResponse"><con:settings/><con:config><script>import groovy.json.JsonSlurper
import com.eviware.soapui.impl.wsdl.teststeps.*

responseContent = testRunner.testCase.getTestStepByName("authIllumiReadOnlyUser").getPropertyValue("response")
slurperresponse = new JsonSlurper().parseText(responseContent)

authkey = (slurperresponse.authkey)
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "illumiReadOnlyAuthKey", authkey )

//log.info authkey</script></con:config></con:testStep><con:testStep type="groovy" name="setReadOnlyUtokenHeader"><con:settings/><con:config><script>import com.eviware.soapui.impl.wsdl.teststeps.*
import com.eviware.soapui.support.types.StringToStringMap;

def authkey = com.eviware.soapui.SoapUI.globalProperties.getPropertyValue( "illumiReadOnlyAuthKey")
def tc = testRunner.testCase.testSuite.getTestCaseByName("topicLockDownTestCaseReadOnly")
def ts11 = tc.getTestStepByName("viewTopicListReadOnly")
def ts12 = tc.getTestStepByName("uniqueTopicNameTrueReadOnly")
def ts13 = tc.getTestStepByName("uniqueTopicNameFalseReadOnly")
def ts14 = tc.getTestStepByName("sanityTopicFailReadOnly")
def ts15 = tc.getTestStepByName("sanityTopicPassReadOnly")
def ts16 = tc.getTestStepByName("sanityTopicWarnReadOnly")
def ts17 = tc.getTestStepByName("createTopicLimitFailReadOnly")
def ts18 = tc.getTestStepByName("createTopicLimitPassReadOnly")
def ts19 = tc.getTestStepByName("eidtTopicReadOnly")
def ts110 = tc.getTestStepByName("alertTopicAddReadOnly")
def ts111 = tc.getTestStepByName("alertTopicRemoveReadOnly")
def ts112 = tc.getTestStepByName("auditTopicListReadOnly")
def ts113 = tc.getTestStepByName("viewInternalTopicStatusReadOnly")
def ts114 = tc.getTestStepByName("updateInternalTopicStatusReadOnly")
def ts115 = tc.getTestStepByName("deleteTopicReadOnly")


def headers = new StringToStringMap()
headers.putIfMissing("utoken",authkey)

ts11.getHttpRequest().setRequestHeaders(headers)
ts12.getHttpRequest().setRequestHeaders(headers)
ts13.getHttpRequest().setRequestHeaders(headers)
ts14.getHttpRequest().setRequestHeaders(headers)
ts15.getHttpRequest().setRequestHeaders(headers)
ts16.getHttpRequest().setRequestHeaders(headers)
ts17.getHttpRequest().setRequestHeaders(headers)
ts18.getHttpRequest().setRequestHeaders(headers)
ts19.getHttpRequest().setRequestHeaders(headers)
ts110.getHttpRequest().setRequestHeaders(headers)
ts111.getHttpRequest().setRequestHeaders(headers)
ts112.getHttpRequest().setRequestHeaders(headers)
ts113.getHttpRequest().setRequestHeaders(headers)
ts114.getHttpRequest().setRequestHeaders(headers)
ts115.getHttpRequest().setRequestHeaders(headers)</script></con:config></con:testStep><con:testStep type="restrequest" name="viewTopicListReadOnly"><con:settings/><con:config service="ARTSA - Topic Manager" methodName="GET - getAllTopics" resourcePath="/SaasCoreTopicManager/rest/topic" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="viewTopicListReadOnly" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="utoken" value="7020636882049273998-840830928572651122--411637391265515709-2012" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://10.200.0.124:8080</con:endpoint><con:request/><con:assertion type="Simple Contains" name="containsAccountId"><con:configuration><token>${#Global#iillumiAccountId}</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="uniqueTopicNameTrueReadOnly"><con:settings/><con:config service="ARTSA - Topic Manager" methodName="POST - topicIsUnique" resourcePath="/SaasCoreTopicManager/rest/topic/unique" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="uniqueTopicNameTrueReadOnly" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="utoken" value="7020636882049273998-840830928572651122--411637391265515709-2012" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://10.200.0.124:8080</con:endpoint><con:request>{
  "name":"is this unique"
}</con:request><con:assertion type="Simple Contains" name="containsUniqueTrue"><con:configuration><token>true</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="uniqueTopicNameFalseReadOnly"><con:settings/><con:config service="ARTSA - Topic Manager" methodName="POST - topicIsUnique" resourcePath="/SaasCoreTopicManager/rest/topic/unique" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="uniqueTopicNameFalseReadOnly" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="utoken" value="7020636882049273998-840830928572651122--411637391265515709-2012" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://10.200.0.124:8080</con:endpoint><con:request>{
  "name":"Competitive Analysis"
}</con:request><con:assertion type="Simple Contains" name="containsUniqueFalse"><con:configuration><token>false</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="sanityTopicFailReadOnly"><con:settings/><con:config service="ARTSA - Topic Manager" methodName="POST - topicSanityCheck" resourcePath="/SaasCoreTopicManager/rest/topic/sanity" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="sanityTopicFailReadOnly" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="utoken" value="7020636882049273998-840830928572651122--411637391265515709-2012" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://10.200.0.124:8080</con:endpoint><con:request>{
"jsonDefinition": {
        "includeAll": [],
        "includeAny": [
            {
                "extraction": "KEYWORD",
                "type": "KEYWORD",
                "text": "i",
                "alias": "KEYWORD"
            },
            {
                "extraction": "KEYWORD",
                "type": "KEYWORD",
                "text": "me",
                "alias": "KEYWORD"
            },
            {
                "extraction": "KEYWORD",
                "type": "KEYWORD",
                "text": "you",
                "alias": "KEYWORD"
            }
        ],
        "exclude": [],
        "exactPhrases": [],
        "other": [
            {
                "type": "lang",
                "values": [
                    "en"
                ]
            }
        ],
   "results":{}
    }
}</con:request><con:assertion type="Simple Contains" name="containsTopicSanityFail"><con:configuration><token>Topic Sanity Test Failed</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="sanityTopicPassReadOnly"><con:settings/><con:config service="ARTSA - Topic Manager" methodName="POST - topicSanityCheck" resourcePath="/SaasCoreTopicManager/rest/topic/sanity" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="sanityTopicPassReadOnly" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="utoken" value="7020636882049273998-840830928572651122--411637391265515709-2012" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://10.200.0.124:8080</con:endpoint><con:request>{
"jsonDefinition": {
        "includeAll": [],
        "includeAny": [
            {
                "extraction": "KEYWORD",
                "type": "KEYWORD",
                "text": "Apple",
                "alias": "KEYWORD"
            },
            {
                "extraction": "KEYWORD",
                "type": "KEYWORD",
                "text": "Orange",
                "alias": "KEYWORD"
            },
            {
                "extraction": "KEYWORD",
                "type": "KEYWORD",
                "text": "Bananna",
                "alias": "KEYWORD"
            }
        ],
        "exclude": [],
        "exactPhrases": [],
        "other": [
            {
                "type": "lang",
                "values": [
                    "en"
                ]
            }
        ],
   "results":{}
    }
}</con:request><con:assertion type="Simple Contains" name="containsTopicSanityPass"><con:configuration><token>Topic Sanity Test Passed</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="sanityTopicWarnReadOnly"><con:settings/><con:config service="ARTSA - Topic Manager" methodName="POST - topicSanityCheck" resourcePath="/SaasCoreTopicManager/rest/topic/sanity" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="sanityTopicWarnReadOnly" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="utoken" value="7020636882049273998-840830928572651122--411637391265515709-2012" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://10.200.0.124:8080</con:endpoint><con:request>{
"jsonDefinition": {
        "includeAll": [],
        "includeAny": [
            {
                "extraction": "KEYWORD",
                "type": "KEYWORD",
                "text": "me",
                "alias": "KEYWORD"
            },
            {
                "extraction": "KEYWORD",
                "type": "KEYWORD",
                "text": "you",
                "alias": "KEYWORD"
            },
            {
                "extraction": "KEYWORD",
                "type": "KEYWORD",
                "text": "Bananna",
                "alias": "KEYWORD"
            }
        ],
        "exclude": [],
        "exactPhrases": [],
        "other": [
            {
                "type": "lang",
                "values": [
                    "en"
                ]
            }
        ],
   "results":{}
    }
}</con:request><con:assertion type="Simple Contains" name="containsTopicSanityWarn"><con:configuration><token>Topic Sanity Test issued Warning</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="editTopicLimit1"><con:settings/><con:config service="ARTSA- Account Manager" methodName="POST - update" resourcePath="/SaasCoreAccountManager/rest/account" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="editTopicLimit1" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="utoken" value="-6381959013626199956--1737343453782334517--6301670540181141757-0" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://10.200.0.124:8080</con:endpoint><con:request>{
  "id":${#Global#illumiAccountId},
  "name":${#Global#illumiAccountName},
  "accountType":0,
  "brand":"",
  "expirationDate":"${#Global#expirationDate}",
  "accessEli":true,
  "accessTempEditorEli":true,
  "contactName":"anything goes here",
  "contactEmail":"b@b.BBB",
  "address":"anything goes here",
  "city":"anything goes here",
  "state":"anything goes here",
  "zipCode":"anything goes here",
  "psOwner":"anything goes here",
  "maxTopicLimit":1,
  "maxUserLimit":100,
  "maxVolumeLimit":3,
  "maxDataLimit":2
}</con:request><con:assertion type="XPath Match" name="XPathMaxTopicLimit1"><con:configuration><path>declare namespace soap='http://schemas.xmlsoap.org/soap/envelope/';
declare namespace ns1='http://10.200.0.124/SaasCoreAccountManager/rest/account';
//ns1:maxTopicLimit</path><content>1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="createTopicLimitFailReadOnly"><con:settings/><con:config service="ARTSA - Topic Manager" methodName="POST - update" resourcePath="/SaasCoreTopicManager/rest/topic" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="createTopicLimitFailReadOnly" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="utoken" value="7020636882049273998-840830928572651122--411637391265515709-2012" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://10.200.0.124:8080</con:endpoint><con:request>{
    "id": -1,
    "name": "Topic create through API 1",
    "jsonDefinition": {
        "includeAll": [
            {
                "extraction": "ENTITY",
                "type": "COMPANY",
                "text": "Apple",
                "alias": "Company"
            }
        ],
        "includeAny": [],
        "exclude": [],
        "exactPhrases": [],
        "other": [
            {
                "type": "lang",
                "values": [
                    "en"
                ]
            }
        ],
   "results":{}
    }
}</con:request><con:assertion type="Simple Contains" name="containsTopicLimitReached"><con:configuration><token>TopicLimitReached</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="editTopicLimit100"><con:settings/><con:config service="ARTSA- Account Manager" methodName="POST - update" resourcePath="/SaasCoreAccountManager/rest/account" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="editTopicLimit100" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="utoken" value="-6381959013626199956--1737343453782334517--6301670540181141757-0" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://10.200.0.124:8080</con:endpoint><con:request>{
  "id":${#Global#illumiAccountId},
  "name":${#Global#illumiAccountName},
  "accountType":0,
  "brand":"",
  "expirationDate":"${#Global#expirationDate}",
  "accessEli":true,
  "accessTempEditorEli":true,
  "contactName":"anything goes here",
  "contactEmail":"b@b.BBB",
  "address":"anything goes here",
  "city":"anything goes here",
  "state":"anything goes here",
  "zipCode":"anything goes here",
  "psOwner":"anything goes here",
  "maxTopicLimit":100,
  "maxUserLimit":100,
  "maxVolumeLimit":3,
  "maxDataLimit":2
}</con:request><con:assertion type="XPath Match" name="XPathMaxTopicLimit1"><con:configuration><path>declare namespace soap='http://schemas.xmlsoap.org/soap/envelope/';
declare namespace ns1='http://10.200.0.124/SaasCoreAccountManager/rest/account';
//ns1:maxTopicLimit</path><content>100</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="createTopicLimitPassReadOnly"><con:settings/><con:config service="ARTSA - Topic Manager" methodName="POST - update" resourcePath="/SaasCoreTopicManager/rest/topic" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="createTopicLimitPassReadOnly" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="utoken" value="7020636882049273998-840830928572651122--411637391265515709-2012" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://10.200.0.124:8080</con:endpoint><con:request>{
    "id": -1,
    "name": "Topic create through API 1",
    "jsonDefinition": {
        "includeAll": [
            {
                "extraction": "ENTITY",
                "type": "COMPANY",
                "text": "Apple",
                "alias": "Company"
            }
        ],
        "includeAny": [],
        "exclude": [],
        "exactPhrases": [],
        "other": [
            {
                "type": "lang",
                "values": [
                    "en"
                ]
            }
        ],
   "results":{}
    }
}</con:request><con:assertion type="Simple Contains" name="containsForbidden"><con:configuration><token>TopicEditForbidden</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="authIllumiEditorUser"><con:settings/><con:config service="ARTSA - UserManager" resourcePath="/SaasCoreUserManager/rest/auth" methodName="POST - authenticate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="authIllumiEditorUser" mediaType="application/json" postQueryString="false" accept=""><con:description>get token for current User</con:description><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Contest-Type" value="application/json"/>
  &lt;con:entry key="Accept" value="application/json"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>http://10.200.0.124:8080</con:endpoint><con:request>{
  "username":"${#Global#illumiEditorUsername}",
  "password":"${#Global#illumiEditorPassword}",
  "accountName":"${#Global#illumiAccountName}"
}</con:request><con:assertion type="XPath Match" name="XPath Match"><con:configuration><path>declare namespace soap='http://schemas.xmlsoap.org/soap/envelope/';
declare namespace ns1='http://10.200.0.124/SaasCoreUserManager/rest/auth';
//ns1:loginFailed</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="authIllumiEditorResponse"><con:settings/><con:config><script>import groovy.json.JsonSlurper
import com.eviware.soapui.impl.wsdl.teststeps.*

responseContent = testRunner.testCase.getTestStepByName("authIllumiEditorUser").getPropertyValue("response")
slurperresponse = new JsonSlurper().parseText(responseContent)

authkey = (slurperresponse.authkey)
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "illumiEditorAuthKey", authkey )

//log.info authkey</script></con:config></con:testStep><con:testStep type="groovy" name="setEditorUtokenHeader"><con:settings/><con:config><script>import com.eviware.soapui.impl.wsdl.teststeps.*
import com.eviware.soapui.support.types.StringToStringMap;

def authkey = com.eviware.soapui.SoapUI.globalProperties.getPropertyValue( "illumiEditorAuthKey")
def tc = testRunner.testCase.testSuite.getTestCaseByName("topicLockDownTestCaseReadOnly")
def ts11 = tc.getTestStepByName("createTopicLimitPassEditor")
def ts12 = tc.getTestStepByName("deleteTopicEditor")


def headers = new StringToStringMap()
headers.putIfMissing("utoken",authkey)

ts11.getHttpRequest().setRequestHeaders(headers)
ts12.getHttpRequest().setRequestHeaders(headers)</script></con:config></con:testStep><con:testStep type="restrequest" name="createTopicLimitPassEditor"><con:settings/><con:config service="ARTSA - Topic Manager" methodName="POST - update" resourcePath="/SaasCoreTopicManager/rest/topic" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="createTopicLimitPassEditor" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="utoken" value="6434655919008314464--141415610945747985-1258127124432864747-2012" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://10.200.0.124:8080</con:endpoint><con:request>{
    "id": -1,
    "name": "Topic create through API 1",
    "jsonDefinition": {
        "includeAll": [
            {
                "extraction": "ENTITY",
                "type": "COMPANY",
                "text": "Apple",
                "alias": "Company"
            }
        ],
        "includeAny": [],
        "exclude": [],
        "exactPhrases": [],
        "other": [
            {
                "type": "lang",
                "values": [
                    "en"
                ]
            }
        ],
   "results":{}
    }
}</con:request><con:assertion type="Simple Contains" name="containsCreatedTopicName"><con:configuration><token>Topic create through API 1</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="topicIllumiEditorResponse"><con:settings/><con:config><script>import groovy.json.JsonSlurper
import com.eviware.soapui.impl.wsdl.teststeps.*

responseContent = testRunner.testCase.getTestStepByName("createTopicLimitPassEditor").getPropertyValue("response")
slurperresponse = new JsonSlurper().parseText(responseContent)

def topicId = (slurperresponse.id) as String
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "illumiEditorCreatTopicId", topicId )
def topicName = (slurperresponse.name) as String
com.eviware.soapui.SoapUI.globalProperties.setPropertyValue( "illumiEditorCreatTopicName", topicName )

//log.info authkey</script></con:config></con:testStep><con:testStep type="restrequest" name="eidtTopicReadOnly"><con:settings/><con:config service="ARTSA - Topic Manager" methodName="POST - update" resourcePath="/SaasCoreTopicManager/rest/topic" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="eidtTopicReadOnly" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="utoken" value="7020636882049273998-840830928572651122--411637391265515709-2012" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://10.200.0.124:8080</con:endpoint><con:request>{
    "id": ${#Global#illumiEditorCreatTopicId},
    "name": "${#Global#illumiEditorCreatTopicName}",
    "jsonDefinition": {
        "includeAll": [
            {
                "extraction": "ENTITY",
                "type": "COMPANY",
                "text": "Apple",
                "alias": "Company"
            }
        ],
        "includeAny": [],
        "exclude": [],
        "exactPhrases": [],
        "other": [
            {
                "type": "lang",
                "values": [
                    "en"
                ]
            }
        ],
   "results":{}
    }
}</con:request><con:assertion type="Simple Contains" name="containsForbidden"><con:configuration><token>TopicEditForbidden</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="alertTopicAddReadOnly"><con:settings/><con:config service="ARTSA - Topic Manager" methodName="POST - addAlert" resourcePath="/SaasCoreTopicManager/rest/topic/update/alerts" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="alertTopicAddReadOnly" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="utoken" value="7020636882049273998-840830928572651122--411637391265515709-2012" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://10.200.0.124:8080</con:endpoint><con:request>{
    "id": ${#Global#illumiEditorCreatTopicId},
    "topicAlerts":
     [
        {
            "sensitivity": "HIGH",
            "alertActive": true,
            "alertType": "FOLLOWER_ALERT"
        },
        {
            "sensitivity": "LOW",
            "alertActive": true,
            "alertType": "FOLLOWER_ALERT"
        },
       {
            "sensitivity": "HIGH",
            "alertActive": true,
            "alertType": "IMPRESSION_ALERT"
        },
        {
            "sensitivity": "LOW",
            "alertActive": true,
            "alertType": "IMPRESSION_ALERT"
        },
       {
            "sensitivity": "HIGH",
            "alertActive": true,
            "alertType": "KLOUT_ALERT"
        },
        {
            "sensitivity": "LOW",
            "alertActive": true,
            "alertType": "KLOUT_ALERT"
        },
       {
            "sensitivity": "HIGH",
            "alertActive": true,
            "alertType": "SENTIMENT_ALERT"
        },
        {
            "sensitivity": "LOW",
            "alertActive": true,
            "alertType": "SENTIMENT_ALERT"
        },
       {
            "sensitivity": "HIGH",
            "alertActive": true,
            "alertType": "TREND_ALERT"
        },
        {
            "sensitivity": "LOW",
            "alertActive": true,
            "alertType": "TREND_ALERT"
        },
       {
            "sensitivity": "HIGH",
            "alertActive": true,
            "alertType": "VOLUME_ALERT"
        },
        {
            "sensitivity": "LOW",
            "alertActive": true,
            "alertType": "VOLUME_ALERT"
        },
        {
            "sensitivity": "HIGH",
            "alertActive": false,
            "alertType": "FOLLOWER_ALERT"
        },
        {
            "sensitivity": "LOW",
            "alertActive": false,
            "alertType": "FOLLOWER_ALERT"
        },
       {
            "sensitivity": "HIGH",
            "alertActive": false,
            "alertType": "IMPRESSION_ALERT"
        },
        {
            "sensitivity": "LOW",
            "alertActive": false,
            "alertType": "IMPRESSION_ALERT"
        },
       {
            "sensitivity": "HIGH",
            "alertActive": false,
            "alertType": "KLOUT_ALERT"
        },
        {
            "sensitivity": "LOW",
            "alertActive": false,
            "alertType": "KLOUT_ALERT"
        },
       {
            "sensitivity": "HIGH",
            "alertActive": false,
            "alertType": "SENTIMENT_ALERT"
        },
        {
            "sensitivity": "LOW",
            "alertActive": false,
            "alertType": "SENTIMENT_ALERT"
        },
       {
            "sensitivity": "HIGH",
            "alertActive": false,
            "alertType": "TREND_ALERT"
        },
        {
            "sensitivity": "LOW",
            "alertActive": false,
            "alertType": "TREND_ALERT"
        },
       {
            "sensitivity": "HIGH",
            "alertActive": false,
            "alertType": "VOLUME_ALERT"
        },
        {
            "sensitivity": "LOW",
            "alertActive": false,
            "alertType": "VOLUME_ALERT"
        }
     ]
}</con:request><con:assertion type="Simple Contains" name="containsFollowerAlert"><con:configuration><token>FOLLOWER_ALERT</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="alertTopicRemoveReadOnly"><con:settings/><con:config service="ARTSA - Topic Manager" methodName="POST - addAlert" resourcePath="/SaasCoreTopicManager/rest/topic/update/alerts" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="alertTopicRemoveReadOnly" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="utoken" value="7020636882049273998-840830928572651122--411637391265515709-2012" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://10.200.0.124:8080</con:endpoint><con:request>{
    "id": ${#Global#illumiEditorCreatTopicId},
    "topicAlerts":
     [
        
     ]
}</con:request><con:assertion type="Simple NotContains" name="notContainsFollowerAlert"><con:configuration><token>FOLLOWER_ALERT</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="auditTopicListReadOnly"><con:settings/><con:config service="ARTSA - Topic Manager" methodName="GET - getTopicAudits" resourcePath="/SaasCoreTopicManager/rest/topic/topicAudit/{id}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="auditTopicListReadOnly" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="utoken" value="7020636882049273998-840830928572651122--411637391265515709-2012" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://10.200.0.124:8080</con:endpoint><con:request/><con:assertion type="Simple Contains" name="containsAdd"><con:configuration><token>ADD</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="id" value="${#Global#illumiEditorCreatTopicId}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="viewInternalTopicStatusReadOnly"><con:settings/><con:config service="http://10.200.0.124:8080" methodName="GET - Topic Status" resourcePath="/SaasCoreInternalManager/rest/internal/topic_status/{id}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="viewInternalTopicStatusReadOnly" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="utoken" value="7020636882049273998-840830928572651122--411637391265515709-2012" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://10.200.0.124:8080</con:endpoint><con:request/><con:assertion type="Simple Contains" name="containsForbidden"><con:configuration><token>UserForbidden</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="id" value="${#Global#illumiEditorCreatTopicId}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="updateInternalTopicStatusReadOnly"><con:settings/><con:config service="http://10.200.0.124:8080" methodName="POST - Topic Status" resourcePath="/SaasCoreInternalManager/rest/internal/topic_status/" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="updateInternalTopicStatusReadOnly" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="utoken" value="7020636882049273998-840830928572651122--411637391265515709-2012" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://10.200.0.124:8080</con:endpoint><con:request>{
  "id": ${#Global#illumiEditorCreatTopicId},
  //"name": "Quite Large",
  //"definition": "he OR him OR me OR you OR we OR twitter",
  "status": 1,
  "account": ${#Global#illumiAccountId}
}</con:request><con:assertion type="Simple Contains" name="containsForbidden"><con:configuration><token>UserForbidden</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="deleteTopicReadOnly"><con:settings/><con:config service="ARTSA - Topic Manager" methodName="DELETE - deleteTopic" resourcePath="/SaasCoreTopicManager/rest/topic/{id}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="deleteTopicReadOnly" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="utoken" value="7020636882049273998-840830928572651122--411637391265515709-2012" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://10.200.0.124:8080</con:endpoint><con:request/><con:assertion type="Simple Contains" name="containsForbidden"><con:configuration><token>TopicEditForbidden</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="id" value="${#Global#illumiEditorCreatTopicId}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="deleteTopicEditor"><con:settings/><con:config service="ARTSA - Topic Manager" methodName="DELETE - deleteTopic" resourcePath="/SaasCoreTopicManager/rest/topic/{id}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="deleteTopicEditor" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="utoken" value="6434655919008314464--141415610945747985-1258127124432864747-2012" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://10.200.0.124:8080</con:endpoint><con:request/><con:assertion type="Simple Contains" name="Contains"><con:configuration><token/><ignoreCase>false</ignoreCase><useRegEx>true</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="id" value="${#Global#illumiEditorCreatTopicId}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:properties/></con:testCase><con:properties/></con:testSuite><con:properties/><con:wssContainer/><con:sensitiveInformation/></con:soapui-project>